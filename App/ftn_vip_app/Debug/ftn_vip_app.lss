
ftn_vip_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008e50  00006000  00006000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000240  20000000  0000ee50  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00010240  2**0
                  CONTENTS
  3 .bss          00000ec0  20000240  0000f090  00010240  2**2
                  ALLOC
  4 .stack        00002000  20001100  0000ff50  00010240  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010240  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00010268  2**0
                  CONTENTS, READONLY
  7 .debug_info   00052f48  00000000  00000000  000102c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000079e0  00000000  00000000  00063209  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001f53b  00000000  00000000  0006abe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001820  00000000  00000000  0008a124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002228  00000000  00000000  0008b944  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00029dc7  00000000  00000000  0008db6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00026fd5  00000000  00000000  000b7933  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000aabc4  00000000  00000000  000de908  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000047cc  00000000  00000000  001894cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00006000 <exception_table>:
    6000:	00 31 00 20 31 61 00 00 29 61 00 00 29 61 00 00     .1. 1a..)a..)a..
	...
    602c:	29 61 00 00 00 00 00 00 00 00 00 00 29 61 00 00     )a..........)a..
    603c:	29 61 00 00 29 61 00 00 29 61 00 00 c5 9c 00 00     )a..)a..)a......
    604c:	29 61 00 00 29 61 00 00 29 61 00 00 45 bc 00 00     )a..)a..)a..E...
    605c:	29 61 00 00 29 61 00 00 29 61 00 00 29 61 00 00     )a..)a..)a..)a..
    606c:	d9 a6 00 00 ed a6 00 00 29 61 00 00 29 61 00 00     ........)a..)a..
    607c:	29 61 00 00 29 61 00 00 3d ab 00 00 29 61 00 00     )a..)a..=...)a..
    608c:	29 61 00 00 29 61 00 00 29 61 00 00 7d 99 00 00     )a..)a..)a..}...
    609c:	29 61 00 00 29 61 00 00 29 61 00 00 29 61 00 00     )a..)a..)a..)a..
    60ac:	29 61 00 00 00 00 00 00                             )a......

000060b4 <__do_global_dtors_aux>:
    60b4:	b510      	push	{r4, lr}
    60b6:	4c06      	ldr	r4, [pc, #24]	; (60d0 <__do_global_dtors_aux+0x1c>)
    60b8:	7823      	ldrb	r3, [r4, #0]
    60ba:	2b00      	cmp	r3, #0
    60bc:	d107      	bne.n	60ce <__do_global_dtors_aux+0x1a>
    60be:	4b05      	ldr	r3, [pc, #20]	; (60d4 <__do_global_dtors_aux+0x20>)
    60c0:	2b00      	cmp	r3, #0
    60c2:	d002      	beq.n	60ca <__do_global_dtors_aux+0x16>
    60c4:	4804      	ldr	r0, [pc, #16]	; (60d8 <__do_global_dtors_aux+0x24>)
    60c6:	e000      	b.n	60ca <__do_global_dtors_aux+0x16>
    60c8:	bf00      	nop
    60ca:	2301      	movs	r3, #1
    60cc:	7023      	strb	r3, [r4, #0]
    60ce:	bd10      	pop	{r4, pc}
    60d0:	20000240 	.word	0x20000240
    60d4:	00000000 	.word	0x00000000
    60d8:	0000ee50 	.word	0x0000ee50

000060dc <frame_dummy>:
    60dc:	4b08      	ldr	r3, [pc, #32]	; (6100 <frame_dummy+0x24>)
    60de:	b510      	push	{r4, lr}
    60e0:	2b00      	cmp	r3, #0
    60e2:	d003      	beq.n	60ec <frame_dummy+0x10>
    60e4:	4907      	ldr	r1, [pc, #28]	; (6104 <frame_dummy+0x28>)
    60e6:	4808      	ldr	r0, [pc, #32]	; (6108 <frame_dummy+0x2c>)
    60e8:	e000      	b.n	60ec <frame_dummy+0x10>
    60ea:	bf00      	nop
    60ec:	4807      	ldr	r0, [pc, #28]	; (610c <frame_dummy+0x30>)
    60ee:	6803      	ldr	r3, [r0, #0]
    60f0:	2b00      	cmp	r3, #0
    60f2:	d100      	bne.n	60f6 <frame_dummy+0x1a>
    60f4:	bd10      	pop	{r4, pc}
    60f6:	4b06      	ldr	r3, [pc, #24]	; (6110 <frame_dummy+0x34>)
    60f8:	2b00      	cmp	r3, #0
    60fa:	d0fb      	beq.n	60f4 <frame_dummy+0x18>
    60fc:	4798      	blx	r3
    60fe:	e7f9      	b.n	60f4 <frame_dummy+0x18>
    6100:	00000000 	.word	0x00000000
    6104:	20000244 	.word	0x20000244
    6108:	0000ee50 	.word	0x0000ee50
    610c:	0000ee50 	.word	0x0000ee50
    6110:	00000000 	.word	0x00000000

00006114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    6114:	b510      	push	{r4, lr}
	system_init();
    6116:	4b02      	ldr	r3, [pc, #8]	; (6120 <atmel_start_init+0xc>)
    6118:	4798      	blx	r3
	usb_init();
    611a:	4b02      	ldr	r3, [pc, #8]	; (6124 <atmel_start_init+0x10>)
    611c:	4798      	blx	r3
}
    611e:	bd10      	pop	{r4, pc}
    6120:	00006741 	.word	0x00006741
    6124:	00008595 	.word	0x00008595

00006128 <Dummy_Handler>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6128:	f3ef 8305 	mrs	r3, IPSR
    612c:	e7fc      	b.n	6128 <Dummy_Handler>
	...

00006130 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6130:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    6132:	4a1a      	ldr	r2, [pc, #104]	; (619c <Reset_Handler+0x6c>)
    6134:	4b1a      	ldr	r3, [pc, #104]	; (61a0 <Reset_Handler+0x70>)
    6136:	429a      	cmp	r2, r3
    6138:	d011      	beq.n	615e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    613a:	001a      	movs	r2, r3
    613c:	4b19      	ldr	r3, [pc, #100]	; (61a4 <Reset_Handler+0x74>)
    613e:	429a      	cmp	r2, r3
    6140:	d20d      	bcs.n	615e <Reset_Handler+0x2e>
    6142:	4a19      	ldr	r2, [pc, #100]	; (61a8 <Reset_Handler+0x78>)
    6144:	3303      	adds	r3, #3
    6146:	1a9b      	subs	r3, r3, r2
    6148:	089b      	lsrs	r3, r3, #2
    614a:	3301      	adds	r3, #1
    614c:	009b      	lsls	r3, r3, #2
    614e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6150:	4813      	ldr	r0, [pc, #76]	; (61a0 <Reset_Handler+0x70>)
    6152:	4912      	ldr	r1, [pc, #72]	; (619c <Reset_Handler+0x6c>)
    6154:	588c      	ldr	r4, [r1, r2]
    6156:	5084      	str	r4, [r0, r2]
    6158:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    615a:	429a      	cmp	r2, r3
    615c:	d1fa      	bne.n	6154 <Reset_Handler+0x24>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    615e:	4a13      	ldr	r2, [pc, #76]	; (61ac <Reset_Handler+0x7c>)
    6160:	4b13      	ldr	r3, [pc, #76]	; (61b0 <Reset_Handler+0x80>)
    6162:	429a      	cmp	r2, r3
    6164:	d20a      	bcs.n	617c <Reset_Handler+0x4c>
    6166:	43d3      	mvns	r3, r2
    6168:	4911      	ldr	r1, [pc, #68]	; (61b0 <Reset_Handler+0x80>)
    616a:	185b      	adds	r3, r3, r1
    616c:	2103      	movs	r1, #3
    616e:	438b      	bics	r3, r1
    6170:	3304      	adds	r3, #4
    6172:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6174:	2100      	movs	r1, #0
    6176:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6178:	4293      	cmp	r3, r2
    617a:	d1fc      	bne.n	6176 <Reset_Handler+0x46>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    617c:	4a0d      	ldr	r2, [pc, #52]	; (61b4 <Reset_Handler+0x84>)
    617e:	21ff      	movs	r1, #255	; 0xff
    6180:	4b0d      	ldr	r3, [pc, #52]	; (61b8 <Reset_Handler+0x88>)
    6182:	438b      	bics	r3, r1
    6184:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6186:	4a0d      	ldr	r2, [pc, #52]	; (61bc <Reset_Handler+0x8c>)
    6188:	6853      	ldr	r3, [r2, #4]
    618a:	397f      	subs	r1, #127	; 0x7f
    618c:	430b      	orrs	r3, r1
    618e:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6190:	4b0b      	ldr	r3, [pc, #44]	; (61c0 <Reset_Handler+0x90>)
    6192:	4798      	blx	r3

        /* Branch to main function */
        main();
    6194:	4b0b      	ldr	r3, [pc, #44]	; (61c4 <Reset_Handler+0x94>)
    6196:	4798      	blx	r3
    6198:	e7fe      	b.n	6198 <Reset_Handler+0x68>
    619a:	46c0      	nop			; (mov r8, r8)
    619c:	0000ee50 	.word	0x0000ee50
    61a0:	20000000 	.word	0x20000000
    61a4:	20000240 	.word	0x20000240
    61a8:	20000004 	.word	0x20000004
    61ac:	20000240 	.word	0x20000240
    61b0:	20001100 	.word	0x20001100
    61b4:	e000ed00 	.word	0xe000ed00
    61b8:	00006000 	.word	0x00006000
    61bc:	41004000 	.word	0x41004000
    61c0:	0000dadd 	.word	0x0000dadd
    61c4:	0000c039 	.word	0x0000c039

000061c8 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
    61c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    61ca:	46ce      	mov	lr, r9
    61cc:	4647      	mov	r7, r8
    61ce:	b580      	push	{r7, lr}
    61d0:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC;
    61d2:	4c33      	ldr	r4, [pc, #204]	; (62a0 <ADC_0_init+0xd8>)
    61d4:	6a23      	ldr	r3, [r4, #32]
    61d6:	2708      	movs	r7, #8
    61d8:	433b      	orrs	r3, r7
    61da:	6223      	str	r3, [r4, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    61dc:	2144      	movs	r1, #68	; 0x44
    61de:	23f8      	movs	r3, #248	; 0xf8
    61e0:	4a30      	ldr	r2, [pc, #192]	; (62a4 <ADC_0_init+0xdc>)
    61e2:	50d1      	str	r1, [r2, r3]
	hri_mclk_set_APBDMASK_ADC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC_GCLK_ID, CONF_GCLK_ADC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    61e4:	4b30      	ldr	r3, [pc, #192]	; (62a8 <ADC_0_init+0xe0>)
    61e6:	4699      	mov	r9, r3
    61e8:	2300      	movs	r3, #0
    61ea:	9302      	str	r3, [sp, #8]
    61ec:	4b2f      	ldr	r3, [pc, #188]	; (62ac <ADC_0_init+0xe4>)
    61ee:	9301      	str	r3, [sp, #4]
    61f0:	2501      	movs	r5, #1
    61f2:	9500      	str	r5, [sp, #0]
    61f4:	2300      	movs	r3, #0
    61f6:	464a      	mov	r2, r9
    61f8:	492d      	ldr	r1, [pc, #180]	; (62b0 <ADC_0_init+0xe8>)
    61fa:	482e      	ldr	r0, [pc, #184]	; (62b4 <ADC_0_init+0xec>)
    61fc:	4e2e      	ldr	r6, [pc, #184]	; (62b8 <ADC_0_init+0xf0>)
    61fe:	47b0      	blx	r6
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
    6200:	464a      	mov	r2, r9
    6202:	3204      	adds	r2, #4
    6204:	2310      	movs	r3, #16
    6206:	2100      	movs	r1, #0
    6208:	482a      	ldr	r0, [pc, #168]	; (62b4 <ADC_0_init+0xec>)
    620a:	4e2c      	ldr	r6, [pc, #176]	; (62bc <ADC_0_init+0xf4>)
    620c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    620e:	23c0      	movs	r3, #192	; 0xc0
    6210:	05db      	lsls	r3, r3, #23
    6212:	4698      	mov	r8, r3
    6214:	605f      	str	r7, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6216:	4b2a      	ldr	r3, [pc, #168]	; (62c0 <ADC_0_init+0xf8>)
    6218:	4a2a      	ldr	r2, [pc, #168]	; (62c4 <ADC_0_init+0xfc>)
    621a:	629a      	str	r2, [r3, #40]	; 0x28
    621c:	21c0      	movs	r1, #192	; 0xc0
    621e:	0609      	lsls	r1, r1, #24
    6220:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6222:	2043      	movs	r0, #67	; 0x43
    6224:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    6226:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6228:	2601      	movs	r6, #1
    622a:	46b4      	mov	ip, r6
    622c:	4666      	mov	r6, ip
    622e:	4332      	orrs	r2, r6
    6230:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6232:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6234:	3812      	subs	r0, #18
    6236:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    6238:	3707      	adds	r7, #7
    623a:	403a      	ands	r2, r7
	tmp |= PORT_PMUX_PMUXO(data);
    623c:	2610      	movs	r6, #16
    623e:	4332      	orrs	r2, r6
    6240:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6242:	541a      	strb	r2, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6244:	2280      	movs	r2, #128	; 0x80
    6246:	00d2      	lsls	r2, r2, #3
    6248:	4640      	mov	r0, r8
    624a:	6042      	str	r2, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    624c:	629c      	str	r4, [r3, #40]	; 0x28
    624e:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6250:	204a      	movs	r0, #74	; 0x4a
    6252:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    6254:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6256:	4664      	mov	r4, ip
    6258:	4322      	orrs	r2, r4
    625a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    625c:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    625e:	2435      	movs	r4, #53	; 0x35
    6260:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6262:	220f      	movs	r2, #15
    6264:	4390      	bics	r0, r2
	tmp |= PORT_PMUX_PMUXE(data);
    6266:	4662      	mov	r2, ip
    6268:	4310      	orrs	r0, r2
    626a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    626c:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    626e:	2280      	movs	r2, #128	; 0x80
    6270:	0112      	lsls	r2, r2, #4
    6272:	4640      	mov	r0, r8
    6274:	6042      	str	r2, [r0, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6276:	4a14      	ldr	r2, [pc, #80]	; (62c8 <ADC_0_init+0x100>)
    6278:	629a      	str	r2, [r3, #40]	; 0x28
    627a:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    627c:	224b      	movs	r2, #75	; 0x4b
    627e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    6280:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6282:	4660      	mov	r0, ip
    6284:	4301      	orrs	r1, r0
    6286:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6288:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    628a:	5d1a      	ldrb	r2, [r3, r4]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    628c:	403a      	ands	r2, r7
	tmp |= PORT_PMUX_PMUXO(data);
    628e:	4332      	orrs	r2, r6
    6290:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6292:	551a      	strb	r2, [r3, r4]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA11, PINMUX_PA11B_ADC_AIN19);
}
    6294:	b005      	add	sp, #20
    6296:	bc0c      	pop	{r2, r3}
    6298:	4690      	mov	r8, r2
    629a:	4699      	mov	r9, r3
    629c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    629e:	46c0      	nop			; (mov r8, r8)
    62a0:	40000400 	.word	0x40000400
    62a4:	40001800 	.word	0x40001800
    62a8:	2000025c 	.word	0x2000025c
    62ac:	2000081c 	.word	0x2000081c
    62b0:	43000c00 	.word	0x43000c00
    62b4:	200007d8 	.word	0x200007d8
    62b8:	00008635 	.word	0x00008635
    62bc:	000086dd 	.word	0x000086dd
    62c0:	40002800 	.word	0x40002800
    62c4:	40000008 	.word	0x40000008
    62c8:	40000800 	.word	0x40000800

000062cc <CALENDAR_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    62cc:	4a03      	ldr	r2, [pc, #12]	; (62dc <CALENDAR_CLOCK_init+0x10>)
    62ce:	6951      	ldr	r1, [r2, #20]
    62d0:	2380      	movs	r3, #128	; 0x80
    62d2:	005b      	lsls	r3, r3, #1
    62d4:	430b      	orrs	r3, r1
    62d6:	6153      	str	r3, [r2, #20]

void CALENDAR_CLOCK_init(void)
{
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
}
    62d8:	4770      	bx	lr
    62da:	46c0      	nop			; (mov r8, r8)
    62dc:	40000400 	.word	0x40000400

000062e0 <CALENDAR_init>:

void CALENDAR_init(void)
{
    62e0:	b510      	push	{r4, lr}
	CALENDAR_CLOCK_init();
    62e2:	4b03      	ldr	r3, [pc, #12]	; (62f0 <CALENDAR_init+0x10>)
    62e4:	4798      	blx	r3
	calendar_init(&CALENDAR, RTC);
    62e6:	4903      	ldr	r1, [pc, #12]	; (62f4 <CALENDAR_init+0x14>)
    62e8:	4803      	ldr	r0, [pc, #12]	; (62f8 <CALENDAR_init+0x18>)
    62ea:	4b04      	ldr	r3, [pc, #16]	; (62fc <CALENDAR_init+0x1c>)
    62ec:	4798      	blx	r3
}
    62ee:	bd10      	pop	{r4, pc}
    62f0:	000062cd 	.word	0x000062cd
    62f4:	40002000 	.word	0x40002000
    62f8:	200007a0 	.word	0x200007a0
    62fc:	000087ad 	.word	0x000087ad

00006300 <EXT_FLASH_PORT_init>:

void EXT_FLASH_PORT_init(void)
{
    6300:	b5f0      	push	{r4, r5, r6, r7, lr}
    6302:	46c6      	mov	lr, r8
    6304:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6306:	24c0      	movs	r4, #192	; 0xc0
    6308:	05e4      	lsls	r4, r4, #23
    630a:	2310      	movs	r3, #16
    630c:	6063      	str	r3, [r4, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    630e:	4b23      	ldr	r3, [pc, #140]	; (639c <EXT_FLASH_PORT_init+0x9c>)
    6310:	4a23      	ldr	r2, [pc, #140]	; (63a0 <EXT_FLASH_PORT_init+0xa0>)
    6312:	629a      	str	r2, [r3, #40]	; 0x28
    6314:	4a23      	ldr	r2, [pc, #140]	; (63a4 <EXT_FLASH_PORT_init+0xa4>)
    6316:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6318:	2144      	movs	r1, #68	; 0x44
    631a:	5c5a      	ldrb	r2, [r3, r1]
    631c:	2004      	movs	r0, #4
    631e:	4382      	bics	r2, r0
    6320:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6322:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    6324:	2601      	movs	r6, #1
    6326:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6328:	2501      	movs	r5, #1
    632a:	432a      	orrs	r2, r5
    632c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    632e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6330:	3912      	subs	r1, #18
    6332:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6334:	300b      	adds	r0, #11
    6336:	4684      	mov	ip, r0
    6338:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
    633a:	2703      	movs	r7, #3
    633c:	433a      	orrs	r2, r7
    633e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6340:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6342:	2240      	movs	r2, #64	; 0x40
    6344:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6346:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6348:	4a17      	ldr	r2, [pc, #92]	; (63a8 <EXT_FLASH_PORT_init+0xa8>)
    634a:	629a      	str	r2, [r3, #40]	; 0x28
    634c:	22c0      	movs	r2, #192	; 0xc0
    634e:	0612      	lsls	r2, r2, #24
    6350:	4690      	mov	r8, r2
    6352:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6354:	3114      	adds	r1, #20
    6356:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    6358:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    635a:	4328      	orrs	r0, r5
    635c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    635e:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6360:	2033      	movs	r0, #51	; 0x33
    6362:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6364:	4662      	mov	r2, ip
    6366:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    6368:	4339      	orrs	r1, r7
    636a:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    636c:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    636e:	2180      	movs	r1, #128	; 0x80
    6370:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6372:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6374:	490d      	ldr	r1, [pc, #52]	; (63ac <EXT_FLASH_PORT_init+0xac>)
    6376:	6299      	str	r1, [r3, #40]	; 0x28
    6378:	4642      	mov	r2, r8
    637a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    637c:	2147      	movs	r1, #71	; 0x47
    637e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    6380:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6382:	432a      	orrs	r2, r5
    6384:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6386:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6388:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    638a:	3938      	subs	r1, #56	; 0x38
    638c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    638e:	3121      	adds	r1, #33	; 0x21
    6390:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6392:	541a      	strb	r2, [r3, r0]

	// Set pin direction to output
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA07, PINMUX_PA07D_SERCOM0_PAD3);
}
    6394:	bc04      	pop	{r2}
    6396:	4690      	mov	r8, r2
    6398:	bdf0      	pop	{r4, r5, r6, r7, pc}
    639a:	46c0      	nop			; (mov r8, r8)
    639c:	40002800 	.word	0x40002800
    63a0:	40020010 	.word	0x40020010
    63a4:	c0020000 	.word	0xc0020000
    63a8:	40000040 	.word	0x40000040
    63ac:	40000080 	.word	0x40000080

000063b0 <EXT_FLASH_CLOCK_init>:
    63b0:	4b06      	ldr	r3, [pc, #24]	; (63cc <EXT_FLASH_CLOCK_init+0x1c>)
    63b2:	2140      	movs	r1, #64	; 0x40
    63b4:	22c8      	movs	r2, #200	; 0xc8
    63b6:	5099      	str	r1, [r3, r2]
    63b8:	3103      	adds	r1, #3
    63ba:	3a04      	subs	r2, #4
    63bc:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
    63be:	4a04      	ldr	r2, [pc, #16]	; (63d0 <EXT_FLASH_CLOCK_init+0x20>)
    63c0:	69d3      	ldr	r3, [r2, #28]
    63c2:	3942      	subs	r1, #66	; 0x42
    63c4:	430b      	orrs	r3, r1
    63c6:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
}
    63c8:	4770      	bx	lr
    63ca:	46c0      	nop			; (mov r8, r8)
    63cc:	40001800 	.word	0x40001800
    63d0:	40000400 	.word	0x40000400

000063d4 <EXT_FLASH_init>:

void EXT_FLASH_init(void)
{
    63d4:	b510      	push	{r4, lr}
	EXT_FLASH_CLOCK_init();
    63d6:	4b05      	ldr	r3, [pc, #20]	; (63ec <EXT_FLASH_init+0x18>)
    63d8:	4798      	blx	r3
	spi_m_sync_init(&EXT_FLASH, SERCOM0);
    63da:	2184      	movs	r1, #132	; 0x84
    63dc:	05c9      	lsls	r1, r1, #23
    63de:	4804      	ldr	r0, [pc, #16]	; (63f0 <EXT_FLASH_init+0x1c>)
    63e0:	4b04      	ldr	r3, [pc, #16]	; (63f4 <EXT_FLASH_init+0x20>)
    63e2:	4798      	blx	r3
	EXT_FLASH_PORT_init();
    63e4:	4b04      	ldr	r3, [pc, #16]	; (63f8 <EXT_FLASH_init+0x24>)
    63e6:	4798      	blx	r3
}
    63e8:	bd10      	pop	{r4, pc}
    63ea:	46c0      	nop			; (mov r8, r8)
    63ec:	000063b1 	.word	0x000063b1
    63f0:	20000804 	.word	0x20000804
    63f4:	00008945 	.word	0x00008945
    63f8:	00006301 	.word	0x00006301

000063fc <Crypto_Interface_PORT_init>:

void Crypto_Interface_PORT_init(void)
{
    63fc:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    63fe:	4b12      	ldr	r3, [pc, #72]	; (6448 <Crypto_Interface_PORT_init+0x4c>)
    6400:	2048      	movs	r0, #72	; 0x48
    6402:	5c19      	ldrb	r1, [r3, r0]
    6404:	2204      	movs	r2, #4
    6406:	4391      	bics	r1, r2
    6408:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    640a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    640c:	2501      	movs	r5, #1
    640e:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6410:	2401      	movs	r4, #1
    6412:	4321      	orrs	r1, r4
    6414:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6416:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6418:	3814      	subs	r0, #20
    641a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    641c:	260f      	movs	r6, #15
    641e:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
    6420:	3e0c      	subs	r6, #12
    6422:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6424:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6426:	2149      	movs	r1, #73	; 0x49
    6428:	5c5e      	ldrb	r6, [r3, r1]
    642a:	4396      	bics	r6, r2
    642c:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    642e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    6430:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6432:	4322      	orrs	r2, r4
    6434:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6436:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6438:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    643a:	393a      	subs	r1, #58	; 0x3a
    643c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    643e:	3121      	adds	r1, #33	; 0x21
    6440:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6442:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09D_SERCOM2_PAD1);
}
    6444:	bd70      	pop	{r4, r5, r6, pc}
    6446:	46c0      	nop			; (mov r8, r8)
    6448:	40002800 	.word	0x40002800

0000644c <Crypto_Interface_CLOCK_init>:
    644c:	4b06      	ldr	r3, [pc, #24]	; (6468 <Crypto_Interface_CLOCK_init+0x1c>)
    644e:	2140      	movs	r1, #64	; 0x40
    6450:	22d0      	movs	r2, #208	; 0xd0
    6452:	5099      	str	r1, [r3, r2]
    6454:	3103      	adds	r1, #3
    6456:	3a0c      	subs	r2, #12
    6458:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM2;
    645a:	4a04      	ldr	r2, [pc, #16]	; (646c <Crypto_Interface_CLOCK_init+0x20>)
    645c:	69d3      	ldr	r3, [r2, #28]
    645e:	393f      	subs	r1, #63	; 0x3f
    6460:	430b      	orrs	r3, r1
    6462:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM2_bit(MCLK);
}
    6464:	4770      	bx	lr
    6466:	46c0      	nop			; (mov r8, r8)
    6468:	40001800 	.word	0x40001800
    646c:	40000400 	.word	0x40000400

00006470 <Crypto_Interface_init>:

void Crypto_Interface_init(void)
{
    6470:	b510      	push	{r4, lr}
	Crypto_Interface_CLOCK_init();
    6472:	4b04      	ldr	r3, [pc, #16]	; (6484 <Crypto_Interface_init+0x14>)
    6474:	4798      	blx	r3
	i2c_m_sync_init(&Crypto_Interface, SERCOM2);
    6476:	4904      	ldr	r1, [pc, #16]	; (6488 <Crypto_Interface_init+0x18>)
    6478:	4804      	ldr	r0, [pc, #16]	; (648c <Crypto_Interface_init+0x1c>)
    647a:	4b05      	ldr	r3, [pc, #20]	; (6490 <Crypto_Interface_init+0x20>)
    647c:	4798      	blx	r3
	Crypto_Interface_PORT_init();
    647e:	4b05      	ldr	r3, [pc, #20]	; (6494 <Crypto_Interface_init+0x24>)
    6480:	4798      	blx	r3
}
    6482:	bd10      	pop	{r4, pc}
    6484:	0000644d 	.word	0x0000644d
    6488:	42000800 	.word	0x42000800
    648c:	20000730 	.word	0x20000730
    6490:	00008875 	.word	0x00008875
    6494:	000063fd 	.word	0x000063fd

00006498 <debugUART_CLOCK_init>:
    6498:	4b06      	ldr	r3, [pc, #24]	; (64b4 <debugUART_CLOCK_init+0x1c>)
    649a:	2140      	movs	r1, #64	; 0x40
    649c:	22d4      	movs	r2, #212	; 0xd4
    649e:	5099      	str	r1, [r3, r2]
    64a0:	3103      	adds	r1, #3
    64a2:	3a10      	subs	r2, #16
    64a4:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
    64a6:	4a04      	ldr	r2, [pc, #16]	; (64b8 <debugUART_CLOCK_init+0x20>)
    64a8:	69d3      	ldr	r3, [r2, #28]
    64aa:	393b      	subs	r1, #59	; 0x3b
    64ac:	430b      	orrs	r3, r1
    64ae:	61d3      	str	r3, [r2, #28]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM3_bit(MCLK);
}
    64b0:	4770      	bx	lr
    64b2:	46c0      	nop			; (mov r8, r8)
    64b4:	40001800 	.word	0x40001800
    64b8:	40000400 	.word	0x40000400

000064bc <debugUART_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void debugUART_PORT_init()
{
    64bc:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    64be:	4b0e      	ldr	r3, [pc, #56]	; (64f8 <debugUART_PORT_init+0x3c>)
    64c0:	2256      	movs	r2, #86	; 0x56
    64c2:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    64c4:	2501      	movs	r5, #1
    64c6:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    64c8:	2401      	movs	r4, #1
    64ca:	4321      	orrs	r1, r4
    64cc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    64ce:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    64d0:	203b      	movs	r0, #59	; 0x3b
    64d2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    64d4:	3a47      	subs	r2, #71	; 0x47
    64d6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    64d8:	3a0d      	subs	r2, #13
    64da:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    64dc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    64de:	2157      	movs	r1, #87	; 0x57
    64e0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    64e2:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    64e4:	4322      	orrs	r2, r4
    64e6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    64e8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    64ea:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    64ec:	3948      	subs	r1, #72	; 0x48
    64ee:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    64f0:	3111      	adds	r1, #17
    64f2:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    64f4:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
}
    64f6:	bd30      	pop	{r4, r5, pc}
    64f8:	40002800 	.word	0x40002800

000064fc <debugUART_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void debugUART_init(void)
{
    64fc:	b510      	push	{r4, lr}
    64fe:	b082      	sub	sp, #8
	debugUART_CLOCK_init();
    6500:	4b07      	ldr	r3, [pc, #28]	; (6520 <debugUART_init+0x24>)
    6502:	4798      	blx	r3
	usart_async_init(&debugUART, SERCOM3, debugUART_buffer, DEBUGUART_BUFFER_SIZE, (void *)NULL);
    6504:	2300      	movs	r3, #0
    6506:	9300      	str	r3, [sp, #0]
    6508:	3310      	adds	r3, #16
    650a:	4a06      	ldr	r2, [pc, #24]	; (6524 <debugUART_init+0x28>)
    650c:	3214      	adds	r2, #20
    650e:	4906      	ldr	r1, [pc, #24]	; (6528 <debugUART_init+0x2c>)
    6510:	4806      	ldr	r0, [pc, #24]	; (652c <debugUART_init+0x30>)
    6512:	4c07      	ldr	r4, [pc, #28]	; (6530 <debugUART_init+0x34>)
    6514:	47a0      	blx	r4
	debugUART_PORT_init();
    6516:	4b07      	ldr	r3, [pc, #28]	; (6534 <debugUART_init+0x38>)
    6518:	4798      	blx	r3
}
    651a:	b002      	add	sp, #8
    651c:	bd10      	pop	{r4, pc}
    651e:	46c0      	nop			; (mov r8, r8)
    6520:	00006499 	.word	0x00006499
    6524:	2000025c 	.word	0x2000025c
    6528:	42000c00 	.word	0x42000c00
    652c:	20000854 	.word	0x20000854
    6530:	00008e45 	.word	0x00008e45
    6534:	000064bd 	.word	0x000064bd

00006538 <nbiotUART_CLOCK_init>:
    6538:	4b06      	ldr	r3, [pc, #24]	; (6554 <nbiotUART_CLOCK_init+0x1c>)
    653a:	2140      	movs	r1, #64	; 0x40
    653c:	22d8      	movs	r2, #216	; 0xd8
    653e:	5099      	str	r1, [r3, r2]
    6540:	3102      	adds	r1, #2
    6542:	3a14      	subs	r2, #20
    6544:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
    6546:	4a04      	ldr	r2, [pc, #16]	; (6558 <nbiotUART_CLOCK_init+0x20>)
    6548:	69d3      	ldr	r3, [r2, #28]
    654a:	3932      	subs	r1, #50	; 0x32
    654c:	430b      	orrs	r3, r1
    654e:	61d3      	str	r3, [r2, #28]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
    6550:	4770      	bx	lr
    6552:	46c0      	nop			; (mov r8, r8)
    6554:	40001800 	.word	0x40001800
    6558:	40000400 	.word	0x40000400

0000655c <nbiotUART_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void nbiotUART_PORT_init()
{
    655c:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    655e:	4b0e      	ldr	r3, [pc, #56]	; (6598 <nbiotUART_PORT_init+0x3c>)
    6560:	22c8      	movs	r2, #200	; 0xc8
    6562:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    6564:	2501      	movs	r5, #1
    6566:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6568:	2401      	movs	r4, #1
    656a:	4321      	orrs	r1, r4
    656c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    656e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6570:	20b4      	movs	r0, #180	; 0xb4
    6572:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    6574:	3ab9      	subs	r2, #185	; 0xb9
    6576:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    6578:	3a0c      	subs	r2, #12
    657a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    657c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    657e:	21c9      	movs	r1, #201	; 0xc9
    6580:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    6582:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    6584:	4322      	orrs	r2, r4
    6586:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6588:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    658a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    658c:	39ba      	subs	r1, #186	; 0xba
    658e:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    6590:	3121      	adds	r1, #33	; 0x21
    6592:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6594:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB08, PINMUX_PB08D_SERCOM4_PAD0);

	gpio_set_pin_function(PB09, PINMUX_PB09D_SERCOM4_PAD1);
}
    6596:	bd30      	pop	{r4, r5, pc}
    6598:	40002800 	.word	0x40002800

0000659c <nbiotUART_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void nbiotUART_init(void)
{
    659c:	b510      	push	{r4, lr}
    659e:	b082      	sub	sp, #8
	nbiotUART_CLOCK_init();
    65a0:	4b07      	ldr	r3, [pc, #28]	; (65c0 <nbiotUART_init+0x24>)
    65a2:	4798      	blx	r3
	usart_async_init(&nbiotUART, SERCOM4, nbiotUART_buffer, NBIOTUART_BUFFER_SIZE, (void *)NULL);
    65a4:	2300      	movs	r3, #0
    65a6:	9300      	str	r3, [sp, #0]
    65a8:	3310      	adds	r3, #16
    65aa:	4a06      	ldr	r2, [pc, #24]	; (65c4 <nbiotUART_init+0x28>)
    65ac:	3224      	adds	r2, #36	; 0x24
    65ae:	4906      	ldr	r1, [pc, #24]	; (65c8 <nbiotUART_init+0x2c>)
    65b0:	4806      	ldr	r0, [pc, #24]	; (65cc <nbiotUART_init+0x30>)
    65b2:	4c07      	ldr	r4, [pc, #28]	; (65d0 <nbiotUART_init+0x34>)
    65b4:	47a0      	blx	r4
	nbiotUART_PORT_init();
    65b6:	4b07      	ldr	r3, [pc, #28]	; (65d4 <nbiotUART_init+0x38>)
    65b8:	4798      	blx	r3
}
    65ba:	b002      	add	sp, #8
    65bc:	bd10      	pop	{r4, pc}
    65be:	46c0      	nop			; (mov r8, r8)
    65c0:	00006539 	.word	0x00006539
    65c4:	2000025c 	.word	0x2000025c
    65c8:	42001000 	.word	0x42001000
    65cc:	20000750 	.word	0x20000750
    65d0:	00008e45 	.word	0x00008e45
    65d4:	0000655d 	.word	0x0000655d

000065d8 <I2C_SENS_PORT_init>:

void I2C_SENS_PORT_init(void)
{
    65d8:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    65da:	4b12      	ldr	r3, [pc, #72]	; (6624 <I2C_SENS_PORT_init+0x4c>)
    65dc:	20de      	movs	r0, #222	; 0xde
    65de:	5c19      	ldrb	r1, [r3, r0]
    65e0:	2204      	movs	r2, #4
    65e2:	4391      	bics	r1, r2
    65e4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    65e6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    65e8:	2501      	movs	r5, #1
    65ea:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    65ec:	2401      	movs	r4, #1
    65ee:	4321      	orrs	r1, r4
    65f0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    65f2:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    65f4:	381f      	subs	r0, #31
    65f6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    65f8:	260f      	movs	r6, #15
    65fa:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
    65fc:	3e0c      	subs	r6, #12
    65fe:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    6600:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6602:	21df      	movs	r1, #223	; 0xdf
    6604:	5c5e      	ldrb	r6, [r3, r1]
    6606:	4396      	bics	r6, r2
    6608:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    660a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    660c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    660e:	4322      	orrs	r2, r4
    6610:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6612:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    6614:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    6616:	39d0      	subs	r1, #208	; 0xd0
    6618:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    661a:	3121      	adds	r1, #33	; 0x21
    661c:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    661e:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB31, PINMUX_PB31D_SERCOM5_PAD1);
}
    6620:	bd70      	pop	{r4, r5, r6, pc}
    6622:	46c0      	nop			; (mov r8, r8)
    6624:	40002800 	.word	0x40002800

00006628 <I2C_SENS_CLOCK_init>:
    6628:	4b06      	ldr	r3, [pc, #24]	; (6644 <I2C_SENS_CLOCK_init+0x1c>)
    662a:	2140      	movs	r1, #64	; 0x40
    662c:	22e0      	movs	r2, #224	; 0xe0
    662e:	5099      	str	r1, [r3, r2]
    6630:	3104      	adds	r1, #4
    6632:	3a04      	subs	r2, #4
    6634:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    6636:	4a04      	ldr	r2, [pc, #16]	; (6648 <I2C_SENS_CLOCK_init+0x20>)
    6638:	6a13      	ldr	r3, [r2, #32]
    663a:	3942      	subs	r1, #66	; 0x42
    663c:	430b      	orrs	r3, r1
    663e:	6213      	str	r3, [r2, #32]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}
    6640:	4770      	bx	lr
    6642:	46c0      	nop			; (mov r8, r8)
    6644:	40001800 	.word	0x40001800
    6648:	40000400 	.word	0x40000400

0000664c <I2C_SENS_init>:

void I2C_SENS_init(void)
{
    664c:	b510      	push	{r4, lr}
	I2C_SENS_CLOCK_init();
    664e:	4b04      	ldr	r3, [pc, #16]	; (6660 <I2C_SENS_init+0x14>)
    6650:	4798      	blx	r3
	i2c_m_sync_init(&I2C_SENS, SERCOM5);
    6652:	4904      	ldr	r1, [pc, #16]	; (6664 <I2C_SENS_init+0x18>)
    6654:	4804      	ldr	r0, [pc, #16]	; (6668 <I2C_SENS_init+0x1c>)
    6656:	4b05      	ldr	r3, [pc, #20]	; (666c <I2C_SENS_init+0x20>)
    6658:	4798      	blx	r3
	I2C_SENS_PORT_init();
    665a:	4b05      	ldr	r3, [pc, #20]	; (6670 <I2C_SENS_init+0x24>)
    665c:	4798      	blx	r3
}
    665e:	bd10      	pop	{r4, pc}
    6660:	00006629 	.word	0x00006629
    6664:	43000400 	.word	0x43000400
    6668:	20000834 	.word	0x20000834
    666c:	00008875 	.word	0x00008875
    6670:	000065d9 	.word	0x000065d9

00006674 <USB_DEVICE_INSTANCE_PORT_init>:

	timer_init(&TIMER_1ms, TC0, _tc_get_timer());
}

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    6674:	b5f0      	push	{r4, r5, r6, r7, lr}
    6676:	46c6      	mov	lr, r8
    6678:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    667a:	24c0      	movs	r4, #192	; 0xc0
    667c:	05e4      	lsls	r4, r4, #23
    667e:	2280      	movs	r2, #128	; 0x80
    6680:	0452      	lsls	r2, r2, #17
    6682:	60a2      	str	r2, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6684:	4b1a      	ldr	r3, [pc, #104]	; (66f0 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
    6686:	2780      	movs	r7, #128	; 0x80
    6688:	05ff      	lsls	r7, r7, #23
    668a:	629f      	str	r7, [r3, #40]	; 0x28
    668c:	4919      	ldr	r1, [pc, #100]	; (66f4 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
    668e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6690:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6692:	2058      	movs	r0, #88	; 0x58
    6694:	5c19      	ldrb	r1, [r3, r0]
    6696:	2204      	movs	r2, #4
    6698:	4690      	mov	r8, r2
    669a:	4391      	bics	r1, r2
    669c:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    669e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    66a0:	2601      	movs	r6, #1
    66a2:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    66a4:	2501      	movs	r5, #1
    66a6:	4329      	orrs	r1, r5
    66a8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    66aa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    66ac:	381c      	subs	r0, #28
    66ae:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    66b0:	320b      	adds	r2, #11
    66b2:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
    66b4:	3a09      	subs	r2, #9
    66b6:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    66b8:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    66ba:	2180      	movs	r1, #128	; 0x80
    66bc:	0489      	lsls	r1, r1, #18
    66be:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    66c0:	629f      	str	r7, [r3, #40]	; 0x28
    66c2:	4f0d      	ldr	r7, [pc, #52]	; (66f8 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    66c4:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    66c6:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    66c8:	2159      	movs	r1, #89	; 0x59
    66ca:	5c5c      	ldrb	r4, [r3, r1]
    66cc:	4642      	mov	r2, r8
    66ce:	4394      	bics	r4, r2
    66d0:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    66d2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    66d4:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    66d6:	432a      	orrs	r2, r5
    66d8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    66da:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    66dc:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    66de:	394a      	subs	r1, #74	; 0x4a
    66e0:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    66e2:	3151      	adds	r1, #81	; 0x51
    66e4:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    66e6:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      // <GPIO_PIN_FUNCTION_I"> I
	                      PINMUX_PA25G_USB_DP);
}
    66e8:	bc04      	pop	{r2}
    66ea:	4690      	mov	r8, r2
    66ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66ee:	46c0      	nop			; (mov r8, r8)
    66f0:	40002800 	.word	0x40002800
    66f4:	c0000100 	.word	0xc0000100
    66f8:	c0000200 	.word	0xc0000200

000066fc <USB_DEVICE_INSTANCE_CLOCK_init>:
    66fc:	2141      	movs	r1, #65	; 0x41
    66fe:	2390      	movs	r3, #144	; 0x90
    6700:	4a06      	ldr	r2, [pc, #24]	; (671c <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    6702:	50d1      	str	r1, [r2, r3]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    6704:	4b06      	ldr	r3, [pc, #24]	; (6720 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
    6706:	6919      	ldr	r1, [r3, #16]
    6708:	2280      	movs	r2, #128	; 0x80
    670a:	0152      	lsls	r2, r2, #5
    670c:	430a      	orrs	r2, r1
    670e:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    6710:	699a      	ldr	r2, [r3, #24]
    6712:	2101      	movs	r1, #1
    6714:	430a      	orrs	r2, r1
    6716:	619a      	str	r2, [r3, #24]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}
    6718:	4770      	bx	lr
    671a:	46c0      	nop			; (mov r8, r8)
    671c:	40001800 	.word	0x40001800
    6720:	40000400 	.word	0x40000400

00006724 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    6724:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    6726:	4b03      	ldr	r3, [pc, #12]	; (6734 <USB_DEVICE_INSTANCE_init+0x10>)
    6728:	4798      	blx	r3
	usb_d_init();
    672a:	4b03      	ldr	r3, [pc, #12]	; (6738 <USB_DEVICE_INSTANCE_init+0x14>)
    672c:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    672e:	4b03      	ldr	r3, [pc, #12]	; (673c <USB_DEVICE_INSTANCE_init+0x18>)
    6730:	4798      	blx	r3
}
    6732:	bd10      	pop	{r4, pc}
    6734:	000066fd 	.word	0x000066fd
    6738:	00009249 	.word	0x00009249
    673c:	00006675 	.word	0x00006675

00006740 <system_init>:

void system_init(void)
{
    6740:	b5f0      	push	{r4, r5, r6, r7, lr}
    6742:	46d6      	mov	lr, sl
    6744:	464f      	mov	r7, r9
    6746:	4646      	mov	r6, r8
    6748:	b5c0      	push	{r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    674a:	4b49      	ldr	r3, [pc, #292]	; (6870 <system_init+0x130>)
    674c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    674e:	22c0      	movs	r2, #192	; 0xc0
    6750:	05d2      	lsls	r2, r2, #23
    6752:	2320      	movs	r3, #32
    6754:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6756:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6758:	4b46      	ldr	r3, [pc, #280]	; (6874 <system_init+0x134>)
    675a:	4947      	ldr	r1, [pc, #284]	; (6878 <system_init+0x138>)
    675c:	6299      	str	r1, [r3, #40]	; 0x28
    675e:	24c0      	movs	r4, #192	; 0xc0
    6760:	0624      	lsls	r4, r4, #24
    6762:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6764:	2545      	movs	r5, #69	; 0x45
    6766:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    6768:	2001      	movs	r0, #1
    676a:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    676c:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    676e:	2180      	movs	r1, #128	; 0x80
    6770:	0149      	lsls	r1, r1, #5
    6772:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    6774:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    6776:	4941      	ldr	r1, [pc, #260]	; (687c <system_init+0x13c>)
    6778:	6299      	str	r1, [r3, #40]	; 0x28
    677a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    677c:	3507      	adds	r5, #7
    677e:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    6780:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6782:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6784:	2180      	movs	r1, #128	; 0x80
    6786:	0509      	lsls	r1, r1, #20
    6788:	6191      	str	r1, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    678a:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    678c:	2180      	movs	r1, #128	; 0x80
    678e:	05c9      	lsls	r1, r1, #23
    6790:	6299      	str	r1, [r3, #40]	; 0x28
    6792:	493b      	ldr	r1, [pc, #236]	; (6880 <system_init+0x140>)
    6794:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    6796:	350f      	adds	r5, #15
    6798:	5d59      	ldrb	r1, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    679a:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    679c:	5559      	strb	r1, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    679e:	2198      	movs	r1, #152	; 0x98
    67a0:	468c      	mov	ip, r1
    67a2:	3994      	subs	r1, #148	; 0x94
    67a4:	4689      	mov	r9, r1
    67a6:	4661      	mov	r1, ip
    67a8:	464d      	mov	r5, r9
    67aa:	5055      	str	r5, [r2, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    67ac:	2788      	movs	r7, #136	; 0x88
    67ae:	4649      	mov	r1, r9
    67b0:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    67b2:	31a4      	adds	r1, #164	; 0xa4
    67b4:	4d33      	ldr	r5, [pc, #204]	; (6884 <system_init+0x144>)
    67b6:	505d      	str	r5, [r3, r1]
    67b8:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    67ba:	25c2      	movs	r5, #194	; 0xc2
    67bc:	46a8      	mov	r8, r5
    67be:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    67c0:	4385      	bics	r5, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    67c2:	4646      	mov	r6, r8
    67c4:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    67c6:	2540      	movs	r5, #64	; 0x40
    67c8:	46aa      	mov	sl, r5
    67ca:	4666      	mov	r6, ip
    67cc:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    67ce:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    67d0:	4e2d      	ldr	r6, [pc, #180]	; (6888 <system_init+0x148>)
    67d2:	505e      	str	r6, [r3, r1]
    67d4:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    67d6:	26c6      	movs	r6, #198	; 0xc6
    67d8:	46b0      	mov	r8, r6
    67da:	5d9e      	ldrb	r6, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    67dc:	4386      	bics	r6, r0
    67de:	46b4      	mov	ip, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    67e0:	4646      	mov	r6, r8
    67e2:	4665      	mov	r5, ip
    67e4:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    67e6:	2580      	movs	r5, #128	; 0x80
    67e8:	01ed      	lsls	r5, r5, #7
    67ea:	46ac      	mov	ip, r5
    67ec:	2594      	movs	r5, #148	; 0x94
    67ee:	4666      	mov	r6, ip
    67f0:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    67f2:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    67f4:	4f25      	ldr	r7, [pc, #148]	; (688c <system_init+0x14c>)
    67f6:	505f      	str	r7, [r3, r1]
    67f8:	505c      	str	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    67fa:	27ce      	movs	r7, #206	; 0xce
    67fc:	5ddc      	ldrb	r4, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    67fe:	4384      	bics	r4, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6800:	55dc      	strb	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    6802:	2780      	movs	r7, #128	; 0x80
    6804:	043f      	lsls	r7, r7, #16
    6806:	2484      	movs	r4, #132	; 0x84
    6808:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    680a:	4a21      	ldr	r2, [pc, #132]	; (6890 <system_init+0x150>)
    680c:	505a      	str	r2, [r3, r1]
    680e:	4a21      	ldr	r2, [pc, #132]	; (6894 <system_init+0x154>)
    6810:	505a      	str	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    6812:	22d7      	movs	r2, #215	; 0xd7
    6814:	5c99      	ldrb	r1, [r3, r2]
    6816:	464c      	mov	r4, r9
    6818:	43a1      	bics	r1, r4
    681a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    681c:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    681e:	4381      	bics	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    6820:	5499      	strb	r1, [r3, r2]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(BUTTON, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
    6822:	4b1d      	ldr	r3, [pc, #116]	; (6898 <system_init+0x158>)
    6824:	4798      	blx	r3

	CALENDAR_init();
    6826:	4b1d      	ldr	r3, [pc, #116]	; (689c <system_init+0x15c>)
    6828:	4798      	blx	r3

	EXT_FLASH_init();
    682a:	4b1d      	ldr	r3, [pc, #116]	; (68a0 <system_init+0x160>)
    682c:	4798      	blx	r3

	Crypto_Interface_init();
    682e:	4b1d      	ldr	r3, [pc, #116]	; (68a4 <system_init+0x164>)
    6830:	4798      	blx	r3
	debugUART_init();
    6832:	4b1d      	ldr	r3, [pc, #116]	; (68a8 <system_init+0x168>)
    6834:	4798      	blx	r3
	nbiotUART_init();
    6836:	4b1d      	ldr	r3, [pc, #116]	; (68ac <system_init+0x16c>)
    6838:	4798      	blx	r3

	I2C_SENS_init();
    683a:	4b1d      	ldr	r3, [pc, #116]	; (68b0 <system_init+0x170>)
    683c:	4798      	blx	r3
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
    683e:	4a1d      	ldr	r2, [pc, #116]	; (68b4 <system_init+0x174>)
    6840:	69d1      	ldr	r1, [r2, #28]
    6842:	2380      	movs	r3, #128	; 0x80
    6844:	005b      	lsls	r3, r3, #1
    6846:	430b      	orrs	r3, r1
    6848:	61d3      	str	r3, [r2, #28]
    684a:	23ec      	movs	r3, #236	; 0xec
    684c:	4a1a      	ldr	r2, [pc, #104]	; (68b8 <system_init+0x178>)
    684e:	4651      	mov	r1, sl
    6850:	50d1      	str	r1, [r2, r3]
	timer_init(&TIMER_1ms, TC0, _tc_get_timer());
    6852:	4b1a      	ldr	r3, [pc, #104]	; (68bc <system_init+0x17c>)
    6854:	4798      	blx	r3
    6856:	0002      	movs	r2, r0
    6858:	4919      	ldr	r1, [pc, #100]	; (68c0 <system_init+0x180>)
    685a:	481a      	ldr	r0, [pc, #104]	; (68c4 <system_init+0x184>)
    685c:	4b1a      	ldr	r3, [pc, #104]	; (68c8 <system_init+0x188>)
    685e:	4798      	blx	r3

	TIMER_1ms_init();
	USB_DEVICE_INSTANCE_init();
    6860:	4b1a      	ldr	r3, [pc, #104]	; (68cc <system_init+0x18c>)
    6862:	4798      	blx	r3
}
    6864:	bc1c      	pop	{r2, r3, r4}
    6866:	4690      	mov	r8, r2
    6868:	4699      	mov	r9, r3
    686a:	46a2      	mov	sl, r4
    686c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    686e:	46c0      	nop			; (mov r8, r8)
    6870:	00009a01 	.word	0x00009a01
    6874:	40002800 	.word	0x40002800
    6878:	40000020 	.word	0x40000020
    687c:	40001000 	.word	0x40001000
    6880:	c0000800 	.word	0xc0000800
    6884:	40000004 	.word	0x40000004
    6888:	40000040 	.word	0x40000040
    688c:	40004000 	.word	0x40004000
    6890:	40020000 	.word	0x40020000
    6894:	c0020080 	.word	0xc0020080
    6898:	000061c9 	.word	0x000061c9
    689c:	000062e1 	.word	0x000062e1
    68a0:	000063d5 	.word	0x000063d5
    68a4:	00006471 	.word	0x00006471
    68a8:	000064fd 	.word	0x000064fd
    68ac:	0000659d 	.word	0x0000659d
    68b0:	0000664d 	.word	0x0000664d
    68b4:	40000400 	.word	0x40000400
    68b8:	40001800 	.word	0x40001800
    68bc:	0000aafb 	.word	0x0000aafb
    68c0:	42002000 	.word	0x42002000
    68c4:	200007bc 	.word	0x200007bc
    68c8:	00008b55 	.word	0x00008b55
    68cc:	00006725 	.word	0x00006725

000068d0 <BH1750FVI_GetLightIntensity>:
  delay(10);
  BH1750FVI_I2CWrite(m_DeviceMode);
}

uint16_t BH1750FVI_GetLightIntensity(void)
{
    68d0:	b510      	push	{r4, lr}
    68d2:	b082      	sub	sp, #8
  uint8_t data[2];
  i2c_m_sync_set_slaveaddr(&I2C_SENS, BH1750FVI_I2C_ADDR, I2C_M_SEVEN);
    68d4:	2280      	movs	r2, #128	; 0x80
    68d6:	0112      	lsls	r2, r2, #4
    68d8:	2123      	movs	r1, #35	; 0x23
    68da:	4808      	ldr	r0, [pc, #32]	; (68fc <BH1750FVI_GetLightIntensity+0x2c>)
    68dc:	4b08      	ldr	r3, [pc, #32]	; (6900 <BH1750FVI_GetLightIntensity+0x30>)
    68de:	4798      	blx	r3
  io_read(I2C_sens_io, data, 2);
    68e0:	ac01      	add	r4, sp, #4
    68e2:	4b08      	ldr	r3, [pc, #32]	; (6904 <BH1750FVI_GetLightIntensity+0x34>)
    68e4:	6818      	ldr	r0, [r3, #0]
    68e6:	2202      	movs	r2, #2
    68e8:	0021      	movs	r1, r4
    68ea:	4b07      	ldr	r3, [pc, #28]	; (6908 <BH1750FVI_GetLightIntensity+0x38>)
    68ec:	4798      	blx	r3

	return data[0] << 8 | data[1];
    68ee:	7823      	ldrb	r3, [r4, #0]
    68f0:	021b      	lsls	r3, r3, #8
    68f2:	7860      	ldrb	r0, [r4, #1]
    68f4:	4318      	orrs	r0, r3
}
    68f6:	b002      	add	sp, #8
    68f8:	bd10      	pop	{r4, pc}
    68fa:	46c0      	nop			; (mov r8, r8)
    68fc:	20000834 	.word	0x20000834
    6900:	000088c1 	.word	0x000088c1
    6904:	200008a4 	.word	0x200008a4
    6908:	00008911 	.word	0x00008911

0000690c <BH1750FVI_I2CWrite>:

void BH1750FVI_I2CWrite(uint8_t Data)
{
    690c:	b510      	push	{r4, lr}
    690e:	b082      	sub	sp, #8
	uint8_t data = Data;
    6910:	466b      	mov	r3, sp
    6912:	1ddc      	adds	r4, r3, #7
    6914:	71d8      	strb	r0, [r3, #7]
	i2c_m_sync_set_slaveaddr(&I2C_SENS, BH1750FVI_I2C_ADDR, I2C_M_SEVEN);
    6916:	2280      	movs	r2, #128	; 0x80
    6918:	0112      	lsls	r2, r2, #4
    691a:	2123      	movs	r1, #35	; 0x23
    691c:	4805      	ldr	r0, [pc, #20]	; (6934 <BH1750FVI_I2CWrite+0x28>)
    691e:	4b06      	ldr	r3, [pc, #24]	; (6938 <BH1750FVI_I2CWrite+0x2c>)
    6920:	4798      	blx	r3
	io_write(I2C_sens_io, &data, 1);
    6922:	4b06      	ldr	r3, [pc, #24]	; (693c <BH1750FVI_I2CWrite+0x30>)
    6924:	6818      	ldr	r0, [r3, #0]
    6926:	2201      	movs	r2, #1
    6928:	0021      	movs	r1, r4
    692a:	4b05      	ldr	r3, [pc, #20]	; (6940 <BH1750FVI_I2CWrite+0x34>)
    692c:	4798      	blx	r3
}
    692e:	b002      	add	sp, #8
    6930:	bd10      	pop	{r4, pc}
    6932:	46c0      	nop			; (mov r8, r8)
    6934:	20000834 	.word	0x20000834
    6938:	000088c1 	.word	0x000088c1
    693c:	200008a4 	.word	0x200008a4
    6940:	000088dd 	.word	0x000088dd

00006944 <BH1750FVI_SetMode>:
{
    6944:	b510      	push	{r4, lr}
  m_DeviceMode = DeviceMode;
    6946:	4c04      	ldr	r4, [pc, #16]	; (6958 <BH1750FVI_SetMode+0x14>)
    6948:	7020      	strb	r0, [r4, #0]
  delay(10);
    694a:	200a      	movs	r0, #10
    694c:	4b03      	ldr	r3, [pc, #12]	; (695c <BH1750FVI_SetMode+0x18>)
    694e:	4798      	blx	r3
  BH1750FVI_I2CWrite(m_DeviceMode);
    6950:	7820      	ldrb	r0, [r4, #0]
    6952:	4b03      	ldr	r3, [pc, #12]	; (6960 <BH1750FVI_SetMode+0x1c>)
    6954:	4798      	blx	r3
}
    6956:	bd10      	pop	{r4, pc}
    6958:	20000000 	.word	0x20000000
    695c:	0000843d 	.word	0x0000843d
    6960:	0000690d 	.word	0x0000690d

00006964 <BH1750FVI_begin>:
{
    6964:	b510      	push	{r4, lr}
    6966:	b082      	sub	sp, #8
	I2C_SENS_init();
    6968:	4b0e      	ldr	r3, [pc, #56]	; (69a4 <BH1750FVI_begin+0x40>)
    696a:	4798      	blx	r3
	i2c_m_sync_get_io_descriptor(&I2C_SENS, &I2C_sens_io);
    696c:	4c0e      	ldr	r4, [pc, #56]	; (69a8 <BH1750FVI_begin+0x44>)
    696e:	a901      	add	r1, sp, #4
    6970:	0020      	movs	r0, r4
    6972:	4b0e      	ldr	r3, [pc, #56]	; (69ac <BH1750FVI_begin+0x48>)
    6974:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_SENS);
    6976:	0020      	movs	r0, r4
    6978:	4b0d      	ldr	r3, [pc, #52]	; (69b0 <BH1750FVI_begin+0x4c>)
    697a:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C_SENS, BH1750FVI_I2C_ADDR, I2C_M_SEVEN);
    697c:	2280      	movs	r2, #128	; 0x80
    697e:	0112      	lsls	r2, r2, #4
    6980:	2123      	movs	r1, #35	; 0x23
    6982:	0020      	movs	r0, r4
    6984:	4b0b      	ldr	r3, [pc, #44]	; (69b4 <BH1750FVI_begin+0x50>)
    6986:	4798      	blx	r3
	BH1750FVI_I2CWrite(k_DevStatePowerUp);      // Turn it On 
    6988:	2001      	movs	r0, #1
    698a:	4b0b      	ldr	r3, [pc, #44]	; (69b8 <BH1750FVI_begin+0x54>)
    698c:	4798      	blx	r3
	BH1750FVI_SetMode(m_DeviceMode);            // Set the mode
    698e:	4b0b      	ldr	r3, [pc, #44]	; (69bc <BH1750FVI_begin+0x58>)
    6990:	7818      	ldrb	r0, [r3, #0]
    6992:	4b0b      	ldr	r3, [pc, #44]	; (69c0 <BH1750FVI_begin+0x5c>)
    6994:	4798      	blx	r3
	delay(1000);
    6996:	20fa      	movs	r0, #250	; 0xfa
    6998:	0080      	lsls	r0, r0, #2
    699a:	4b0a      	ldr	r3, [pc, #40]	; (69c4 <BH1750FVI_begin+0x60>)
    699c:	4798      	blx	r3
}
    699e:	b002      	add	sp, #8
    69a0:	bd10      	pop	{r4, pc}
    69a2:	46c0      	nop			; (mov r8, r8)
    69a4:	0000664d 	.word	0x0000664d
    69a8:	20000834 	.word	0x20000834
    69ac:	000088d3 	.word	0x000088d3
    69b0:	000088b5 	.word	0x000088b5
    69b4:	000088c1 	.word	0x000088c1
    69b8:	0000690d 	.word	0x0000690d
    69bc:	20000000 	.word	0x20000000
    69c0:	00006945 	.word	0x00006945
    69c4:	0000843d 	.word	0x0000843d

000069c8 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
    69c8:	2800      	cmp	r0, #0
    69ca:	d00a      	beq.n	69e2 <null_ptr_check+0x1a>
    69cc:	6843      	ldr	r3, [r0, #4]
    69ce:	2b00      	cmp	r3, #0
    69d0:	d00a      	beq.n	69e8 <null_ptr_check+0x20>
    69d2:	6883      	ldr	r3, [r0, #8]
    69d4:	2b00      	cmp	r3, #0
    69d6:	d00a      	beq.n	69ee <null_ptr_check+0x26>
    69d8:	68c3      	ldr	r3, [r0, #12]
    69da:	4258      	negs	r0, r3
    69dc:	4158      	adcs	r0, r3
    69de:	4240      	negs	r0, r0
    {
        rslt = BMP280_OK;
    }

    return rslt;
}
    69e0:	4770      	bx	lr
        rslt = BMP280_E_NULL_PTR;
    69e2:	2001      	movs	r0, #1
    69e4:	4240      	negs	r0, r0
    69e6:	e7fb      	b.n	69e0 <null_ptr_check+0x18>
    69e8:	2001      	movs	r0, #1
    69ea:	4240      	negs	r0, r0
    69ec:	e7f8      	b.n	69e0 <null_ptr_check+0x18>
    69ee:	2001      	movs	r0, #1
    69f0:	4240      	negs	r0, r0
    69f2:	e7f5      	b.n	69e0 <null_ptr_check+0x18>

000069f4 <BMP280_i2c_reg_write>:
{
    69f4:	b530      	push	{r4, r5, lr}
    69f6:	b0c1      	sub	sp, #260	; 0x104
	for (uint16_t i = 0; i < length; i++)
    69f8:	2b00      	cmp	r3, #0
    69fa:	d00b      	beq.n	6a14 <BMP280_i2c_reg_write+0x20>
    69fc:	4668      	mov	r0, sp
    69fe:	18cd      	adds	r5, r1, r3
    6a00:	b2ed      	uxtb	r5, r5
		buff[i * 2] = reg_addr + i;
    6a02:	7001      	strb	r1, [r0, #0]
		buff[i * 2 + 1] = reg_data[i];
    6a04:	7814      	ldrb	r4, [r2, #0]
    6a06:	7044      	strb	r4, [r0, #1]
    6a08:	3101      	adds	r1, #1
    6a0a:	b2c9      	uxtb	r1, r1
    6a0c:	3002      	adds	r0, #2
    6a0e:	3201      	adds	r2, #1
	for (uint16_t i = 0; i < length; i++)
    6a10:	42a9      	cmp	r1, r5
    6a12:	d1f6      	bne.n	6a02 <BMP280_i2c_reg_write+0xe>
	io_write(I2C_sens_io, buff, length * 2);
    6a14:	005b      	lsls	r3, r3, #1
    6a16:	b29a      	uxth	r2, r3
    6a18:	4b03      	ldr	r3, [pc, #12]	; (6a28 <BMP280_i2c_reg_write+0x34>)
    6a1a:	6818      	ldr	r0, [r3, #0]
    6a1c:	4669      	mov	r1, sp
    6a1e:	4b03      	ldr	r3, [pc, #12]	; (6a2c <BMP280_i2c_reg_write+0x38>)
    6a20:	4798      	blx	r3
}
    6a22:	2000      	movs	r0, #0
    6a24:	b041      	add	sp, #260	; 0x104
    6a26:	bd30      	pop	{r4, r5, pc}
    6a28:	200008a4 	.word	0x200008a4
    6a2c:	000088dd 	.word	0x000088dd

00006a30 <BMP280_i2c_reg_read>:
{
    6a30:	b570      	push	{r4, r5, r6, lr}
    6a32:	b082      	sub	sp, #8
    6a34:	0015      	movs	r5, r2
    6a36:	001e      	movs	r6, r3
    6a38:	466b      	mov	r3, sp
    6a3a:	71d9      	strb	r1, [r3, #7]
    6a3c:	3307      	adds	r3, #7
	io_write(I2C_sens_io, &reg_addr, 1);
    6a3e:	4c07      	ldr	r4, [pc, #28]	; (6a5c <BMP280_i2c_reg_read+0x2c>)
    6a40:	2201      	movs	r2, #1
    6a42:	0019      	movs	r1, r3
    6a44:	6820      	ldr	r0, [r4, #0]
    6a46:	4b06      	ldr	r3, [pc, #24]	; (6a60 <BMP280_i2c_reg_read+0x30>)
    6a48:	4798      	blx	r3
	io_read(I2C_sens_io, reg_data, length);
    6a4a:	6820      	ldr	r0, [r4, #0]
    6a4c:	0032      	movs	r2, r6
    6a4e:	0029      	movs	r1, r5
    6a50:	4b04      	ldr	r3, [pc, #16]	; (6a64 <BMP280_i2c_reg_read+0x34>)
    6a52:	4798      	blx	r3
}
    6a54:	2000      	movs	r0, #0
    6a56:	b002      	add	sp, #8
    6a58:	bd70      	pop	{r4, r5, r6, pc}
    6a5a:	46c0      	nop			; (mov r8, r8)
    6a5c:	200008a4 	.word	0x200008a4
    6a60:	000088dd 	.word	0x000088dd
    6a64:	00008911 	.word	0x00008911

00006a68 <bmp280_get_regs>:
{
    6a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a6a:	0007      	movs	r7, r0
    6a6c:	000e      	movs	r6, r1
    6a6e:	0015      	movs	r5, r2
    6a70:	001c      	movs	r4, r3
    rslt = null_ptr_check(dev);
    6a72:	0018      	movs	r0, r3
    6a74:	4b0e      	ldr	r3, [pc, #56]	; (6ab0 <bmp280_get_regs+0x48>)
    6a76:	4798      	blx	r3
    if ((rslt == BMP280_OK) && (reg_data != NULL))
    6a78:	2800      	cmp	r0, #0
    6a7a:	d112      	bne.n	6aa2 <bmp280_get_regs+0x3a>
    6a7c:	2e00      	cmp	r6, #0
    6a7e:	d013      	beq.n	6aa8 <bmp280_get_regs+0x40>
        if (dev->intf == BMP280_SPI_INTF)
    6a80:	78a3      	ldrb	r3, [r4, #2]
    6a82:	2b00      	cmp	r3, #0
    6a84:	d101      	bne.n	6a8a <bmp280_get_regs+0x22>
            reg_addr = reg_addr | 0x80;
    6a86:	3380      	adds	r3, #128	; 0x80
    6a88:	431f      	orrs	r7, r3
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
    6a8a:	b2ab      	uxth	r3, r5
    6a8c:	7860      	ldrb	r0, [r4, #1]
    6a8e:	6864      	ldr	r4, [r4, #4]
    6a90:	0032      	movs	r2, r6
    6a92:	0039      	movs	r1, r7
    6a94:	47a0      	blx	r4
        if (rslt != BMP280_OK)
    6a96:	2800      	cmp	r0, #0
    6a98:	d100      	bne.n	6a9c <bmp280_get_regs+0x34>
}
    6a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rslt = BMP280_E_COMM_FAIL;
    6a9c:	2004      	movs	r0, #4
    6a9e:	4240      	negs	r0, r0
    6aa0:	e7fb      	b.n	6a9a <bmp280_get_regs+0x32>
        rslt = BMP280_E_NULL_PTR;
    6aa2:	2001      	movs	r0, #1
    6aa4:	4240      	negs	r0, r0
    6aa6:	e7f8      	b.n	6a9a <bmp280_get_regs+0x32>
    6aa8:	2001      	movs	r0, #1
    6aaa:	4240      	negs	r0, r0
    6aac:	e7f5      	b.n	6a9a <bmp280_get_regs+0x32>
    6aae:	46c0      	nop			; (mov r8, r8)
    6ab0:	000069c9 	.word	0x000069c9

00006ab4 <bmp280_set_regs>:
{
    6ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ab6:	b083      	sub	sp, #12
    6ab8:	0005      	movs	r5, r0
    6aba:	000e      	movs	r6, r1
    6abc:	001f      	movs	r7, r3
    6abe:	1c14      	adds	r4, r2, #0
    6ac0:	2a04      	cmp	r2, #4
    6ac2:	d900      	bls.n	6ac6 <bmp280_set_regs+0x12>
    6ac4:	2404      	movs	r4, #4
    6ac6:	b2e4      	uxtb	r4, r4
    rslt = null_ptr_check(dev);
    6ac8:	0038      	movs	r0, r7
    6aca:	4b23      	ldr	r3, [pc, #140]	; (6b58 <bmp280_set_regs+0xa4>)
    6acc:	4798      	blx	r3
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
    6ace:	2800      	cmp	r0, #0
    6ad0:	d135      	bne.n	6b3e <bmp280_set_regs+0x8a>
    6ad2:	2d00      	cmp	r5, #0
    6ad4:	d036      	beq.n	6b44 <bmp280_set_regs+0x90>
    6ad6:	2e00      	cmp	r6, #0
    6ad8:	d037      	beq.n	6b4a <bmp280_set_regs+0x96>
        if (len != 0)
    6ada:	2c00      	cmp	r4, #0
    6adc:	d038      	beq.n	6b50 <bmp280_set_regs+0x9c>
            temp_buff[0] = reg_data[0];
    6ade:	7833      	ldrb	r3, [r6, #0]
    6ae0:	466a      	mov	r2, sp
    6ae2:	7013      	strb	r3, [r2, #0]
            if (dev->intf == BMP280_SPI_INTF)
    6ae4:	78bb      	ldrb	r3, [r7, #2]
    6ae6:	2b00      	cmp	r3, #0
    6ae8:	d10b      	bne.n	6b02 <bmp280_set_regs+0x4e>
    6aea:	002a      	movs	r2, r5
    6aec:	1e63      	subs	r3, r4, #1
    6aee:	b2db      	uxtb	r3, r3
    6af0:	3301      	adds	r3, #1
    6af2:	18eb      	adds	r3, r5, r3
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
    6af4:	307f      	adds	r0, #127	; 0x7f
    6af6:	7811      	ldrb	r1, [r2, #0]
    6af8:	4001      	ands	r1, r0
    6afa:	7011      	strb	r1, [r2, #0]
    6afc:	3201      	adds	r2, #1
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
    6afe:	429a      	cmp	r2, r3
    6b00:	d1f9      	bne.n	6af6 <bmp280_set_regs+0x42>
            if (len > 1)
    6b02:	2c01      	cmp	r4, #1
    6b04:	d916      	bls.n	6b34 <bmp280_set_regs+0x80>
    6b06:	4669      	mov	r1, sp
    6b08:	2201      	movs	r2, #1
{
    uint8_t index;

    for (index = 1; index < len; index++)
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
    6b0a:	5cab      	ldrb	r3, [r5, r2]
    6b0c:	704b      	strb	r3, [r1, #1]
        temp_buff[index * 2] = reg_data[index];
    6b0e:	5cb3      	ldrb	r3, [r6, r2]
    6b10:	708b      	strb	r3, [r1, #2]
    6b12:	3102      	adds	r1, #2
    6b14:	3201      	adds	r2, #1
    for (index = 1; index < len; index++)
    6b16:	b2d3      	uxtb	r3, r2
    6b18:	429c      	cmp	r4, r3
    6b1a:	d8f6      	bhi.n	6b0a <bmp280_set_regs+0x56>
                temp_len = ((len * 2) - 1);
    6b1c:	0064      	lsls	r4, r4, #1
    6b1e:	3c01      	subs	r4, #1
    6b20:	b2a3      	uxth	r3, r4
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
    6b22:	7829      	ldrb	r1, [r5, #0]
    6b24:	7878      	ldrb	r0, [r7, #1]
    6b26:	68bc      	ldr	r4, [r7, #8]
    6b28:	466a      	mov	r2, sp
    6b2a:	47a0      	blx	r4
            if (rslt != BMP280_OK)
    6b2c:	2800      	cmp	r0, #0
    6b2e:	d103      	bne.n	6b38 <bmp280_set_regs+0x84>
}
    6b30:	b003      	add	sp, #12
    6b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
                temp_len = len;
    6b34:	b2a3      	uxth	r3, r4
    6b36:	e7f4      	b.n	6b22 <bmp280_set_regs+0x6e>
                rslt = BMP280_E_COMM_FAIL;
    6b38:	2004      	movs	r0, #4
    6b3a:	4240      	negs	r0, r0
    6b3c:	e7f8      	b.n	6b30 <bmp280_set_regs+0x7c>
        rslt = BMP280_E_NULL_PTR;
    6b3e:	2001      	movs	r0, #1
    6b40:	4240      	negs	r0, r0
    6b42:	e7f5      	b.n	6b30 <bmp280_set_regs+0x7c>
    6b44:	2001      	movs	r0, #1
    6b46:	4240      	negs	r0, r0
    6b48:	e7f2      	b.n	6b30 <bmp280_set_regs+0x7c>
    6b4a:	2001      	movs	r0, #1
    6b4c:	4240      	negs	r0, r0
    6b4e:	e7ef      	b.n	6b30 <bmp280_set_regs+0x7c>
            rslt = BMP280_E_INVALID_LEN;
    6b50:	2003      	movs	r0, #3
    6b52:	4240      	negs	r0, r0
    6b54:	e7ec      	b.n	6b30 <bmp280_set_regs+0x7c>
    6b56:	46c0      	nop			; (mov r8, r8)
    6b58:	000069c9 	.word	0x000069c9

00006b5c <bmp280_soft_reset>:
{
    6b5c:	b530      	push	{r4, r5, lr}
    6b5e:	b083      	sub	sp, #12
    6b60:	0005      	movs	r5, r0
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
    6b62:	22e0      	movs	r2, #224	; 0xe0
    6b64:	466b      	mov	r3, sp
    6b66:	71da      	strb	r2, [r3, #7]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
    6b68:	3a2a      	subs	r2, #42	; 0x2a
    6b6a:	466b      	mov	r3, sp
    6b6c:	719a      	strb	r2, [r3, #6]
    rslt = null_ptr_check(dev);
    6b6e:	4b0a      	ldr	r3, [pc, #40]	; (6b98 <bmp280_soft_reset+0x3c>)
    6b70:	4798      	blx	r3
    6b72:	1e04      	subs	r4, r0, #0
    if (rslt == BMP280_OK)
    6b74:	d002      	beq.n	6b7c <bmp280_soft_reset+0x20>
}
    6b76:	0020      	movs	r0, r4
    6b78:	b003      	add	sp, #12
    6b7a:	bd30      	pop	{r4, r5, pc}
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
    6b7c:	002b      	movs	r3, r5
    6b7e:	2201      	movs	r2, #1
    6b80:	4669      	mov	r1, sp
    6b82:	3106      	adds	r1, #6
    6b84:	4668      	mov	r0, sp
    6b86:	3007      	adds	r0, #7
    6b88:	4c04      	ldr	r4, [pc, #16]	; (6b9c <bmp280_soft_reset+0x40>)
    6b8a:	47a0      	blx	r4
    6b8c:	0004      	movs	r4, r0
        dev->delay_ms(2);
    6b8e:	68eb      	ldr	r3, [r5, #12]
    6b90:	2002      	movs	r0, #2
    6b92:	4798      	blx	r3
    6b94:	e7ef      	b.n	6b76 <bmp280_soft_reset+0x1a>
    6b96:	46c0      	nop			; (mov r8, r8)
    6b98:	000069c9 	.word	0x000069c9
    6b9c:	00006ab5 	.word	0x00006ab5

00006ba0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
    6ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ba2:	b083      	sub	sp, #12
    6ba4:	0006      	movs	r6, r0
    6ba6:	000f      	movs	r7, r1
    6ba8:	0015      	movs	r5, r2
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
    6baa:	ab01      	add	r3, sp, #4
    6bac:	2200      	movs	r2, #0
    6bae:	701a      	strb	r2, [r3, #0]
    6bb0:	705a      	strb	r2, [r3, #1]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
    6bb2:	4b2f      	ldr	r3, [pc, #188]	; (6c70 <conf_sensor+0xd0>)
    6bb4:	881b      	ldrh	r3, [r3, #0]
    6bb6:	466a      	mov	r2, sp
    6bb8:	8013      	strh	r3, [r2, #0]

    rslt = null_ptr_check(dev);
    6bba:	0028      	movs	r0, r5
    6bbc:	4b2d      	ldr	r3, [pc, #180]	; (6c74 <conf_sensor+0xd4>)
    6bbe:	4798      	blx	r3
    if ((rslt == BMP280_OK) && (conf != NULL))
    6bc0:	2800      	cmp	r0, #0
    6bc2:	d14f      	bne.n	6c64 <conf_sensor+0xc4>
    6bc4:	2f00      	cmp	r7, #0
    6bc6:	d050      	beq.n	6c6a <conf_sensor+0xca>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
    6bc8:	002b      	movs	r3, r5
    6bca:	2202      	movs	r2, #2
    6bcc:	a901      	add	r1, sp, #4
    6bce:	30f4      	adds	r0, #244	; 0xf4
    6bd0:	4c29      	ldr	r4, [pc, #164]	; (6c78 <conf_sensor+0xd8>)
    6bd2:	47a0      	blx	r4
    6bd4:	1e04      	subs	r4, r0, #0
        if (rslt == BMP280_OK)
    6bd6:	d002      	beq.n	6bde <conf_sensor+0x3e>
    {
        rslt = BMP280_E_NULL_PTR;
    }

    return rslt;
}
    6bd8:	0020      	movs	r0, r4
    6bda:	b003      	add	sp, #12
    6bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = bmp280_soft_reset(dev);
    6bde:	0028      	movs	r0, r5
    6be0:	4b26      	ldr	r3, [pc, #152]	; (6c7c <conf_sensor+0xdc>)
    6be2:	4798      	blx	r3
    6be4:	1e04      	subs	r4, r0, #0
            if (rslt == BMP280_OK)
    6be6:	d1f7      	bne.n	6bd8 <conf_sensor+0x38>
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
    6be8:	a901      	add	r1, sp, #4
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
    6bea:	780a      	ldrb	r2, [r1, #0]
    6bec:	231f      	movs	r3, #31
    6bee:	401a      	ands	r2, r3
    6bf0:	7838      	ldrb	r0, [r7, #0]
    6bf2:	0140      	lsls	r0, r0, #5
    6bf4:	4302      	orrs	r2, r0
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
    6bf6:	201c      	movs	r0, #28
    6bf8:	4684      	mov	ip, r0
    6bfa:	4382      	bics	r2, r0
    6bfc:	7878      	ldrb	r0, [r7, #1]
    6bfe:	0080      	lsls	r0, r0, #2
    6c00:	341c      	adds	r4, #28
    6c02:	4020      	ands	r0, r4
    6c04:	4302      	orrs	r2, r0
    6c06:	700a      	strb	r2, [r1, #0]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
    6c08:	784a      	ldrb	r2, [r1, #1]
    6c0a:	4013      	ands	r3, r2
    6c0c:	78ba      	ldrb	r2, [r7, #2]
    6c0e:	0152      	lsls	r2, r2, #5
    6c10:	4313      	orrs	r3, r2
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
    6c12:	4662      	mov	r2, ip
    6c14:	4393      	bics	r3, r2
    6c16:	78fa      	ldrb	r2, [r7, #3]
    6c18:	0092      	lsls	r2, r2, #2
    6c1a:	4014      	ands	r4, r2
    6c1c:	4323      	orrs	r3, r4
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
    6c1e:	2201      	movs	r2, #1
    6c20:	4393      	bics	r3, r2
    6c22:	7938      	ldrb	r0, [r7, #4]
    6c24:	4002      	ands	r2, r0
    6c26:	4313      	orrs	r3, r2
    6c28:	704b      	strb	r3, [r1, #1]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
    6c2a:	002b      	movs	r3, r5
    6c2c:	2202      	movs	r2, #2
    6c2e:	4668      	mov	r0, sp
    6c30:	4c13      	ldr	r4, [pc, #76]	; (6c80 <conf_sensor+0xe0>)
    6c32:	47a0      	blx	r4
    6c34:	1e04      	subs	r4, r0, #0
                if (rslt == BMP280_OK)
    6c36:	d1cf      	bne.n	6bd8 <conf_sensor+0x38>
                    dev->conf = *conf;
    6c38:	0028      	movs	r0, r5
    6c3a:	302c      	adds	r0, #44	; 0x2c
    6c3c:	2205      	movs	r2, #5
    6c3e:	0039      	movs	r1, r7
    6c40:	4b10      	ldr	r3, [pc, #64]	; (6c84 <conf_sensor+0xe4>)
    6c42:	4798      	blx	r3
                    if (mode != BMP280_SLEEP_MODE)
    6c44:	2e00      	cmp	r6, #0
    6c46:	d0c7      	beq.n	6bd8 <conf_sensor+0x38>
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
    6c48:	a901      	add	r1, sp, #4
    6c4a:	780b      	ldrb	r3, [r1, #0]
    6c4c:	2203      	movs	r2, #3
    6c4e:	4393      	bics	r3, r2
    6c50:	4016      	ands	r6, r2
    6c52:	431e      	orrs	r6, r3
    6c54:	700e      	strb	r6, [r1, #0]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
    6c56:	002b      	movs	r3, r5
    6c58:	3a02      	subs	r2, #2
    6c5a:	4668      	mov	r0, sp
    6c5c:	4c08      	ldr	r4, [pc, #32]	; (6c80 <conf_sensor+0xe0>)
    6c5e:	47a0      	blx	r4
    6c60:	0004      	movs	r4, r0
    6c62:	e7b9      	b.n	6bd8 <conf_sensor+0x38>
        rslt = BMP280_E_NULL_PTR;
    6c64:	2401      	movs	r4, #1
    6c66:	4264      	negs	r4, r4
    6c68:	e7b6      	b.n	6bd8 <conf_sensor+0x38>
    6c6a:	2401      	movs	r4, #1
    6c6c:	4264      	negs	r4, r4
    6c6e:	e7b3      	b.n	6bd8 <conf_sensor+0x38>
    6c70:	0000e530 	.word	0x0000e530
    6c74:	000069c9 	.word	0x000069c9
    6c78:	00006a69 	.word	0x00006a69
    6c7c:	00006b5d 	.word	0x00006b5d
    6c80:	00006ab5 	.word	0x00006ab5
    6c84:	0000db25 	.word	0x0000db25

00006c88 <bmp280_get_config>:
{
    6c88:	b570      	push	{r4, r5, r6, lr}
    6c8a:	b082      	sub	sp, #8
    6c8c:	0004      	movs	r4, r0
    6c8e:	000e      	movs	r6, r1
    uint8_t temp[2] = { 0, 0 };
    6c90:	ab01      	add	r3, sp, #4
    6c92:	2200      	movs	r2, #0
    6c94:	701a      	strb	r2, [r3, #0]
    6c96:	705a      	strb	r2, [r3, #1]
    rslt = null_ptr_check(dev);
    6c98:	0008      	movs	r0, r1
    6c9a:	4b17      	ldr	r3, [pc, #92]	; (6cf8 <bmp280_get_config+0x70>)
    6c9c:	4798      	blx	r3
    if ((rslt == BMP280_OK) && (conf != NULL))
    6c9e:	2800      	cmp	r0, #0
    6ca0:	d123      	bne.n	6cea <bmp280_get_config+0x62>
    6ca2:	2c00      	cmp	r4, #0
    6ca4:	d024      	beq.n	6cf0 <bmp280_get_config+0x68>
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
    6ca6:	0033      	movs	r3, r6
    6ca8:	2202      	movs	r2, #2
    6caa:	a901      	add	r1, sp, #4
    6cac:	30f4      	adds	r0, #244	; 0xf4
    6cae:	4d13      	ldr	r5, [pc, #76]	; (6cfc <bmp280_get_config+0x74>)
    6cb0:	47a8      	blx	r5
    6cb2:	1e05      	subs	r5, r0, #0
        if (rslt == BMP280_OK)
    6cb4:	d116      	bne.n	6ce4 <bmp280_get_config+0x5c>
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
    6cb6:	a901      	add	r1, sp, #4
    6cb8:	780b      	ldrb	r3, [r1, #0]
    6cba:	095a      	lsrs	r2, r3, #5
    6cbc:	7022      	strb	r2, [r4, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
    6cbe:	109b      	asrs	r3, r3, #2
    6cc0:	2207      	movs	r2, #7
    6cc2:	4013      	ands	r3, r2
    6cc4:	7063      	strb	r3, [r4, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
    6cc6:	7849      	ldrb	r1, [r1, #1]
    6cc8:	094b      	lsrs	r3, r1, #5
    6cca:	70a3      	strb	r3, [r4, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
    6ccc:	108b      	asrs	r3, r1, #2
    6cce:	401a      	ands	r2, r3
    6cd0:	70e2      	strb	r2, [r4, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
    6cd2:	2301      	movs	r3, #1
    6cd4:	400b      	ands	r3, r1
    6cd6:	7123      	strb	r3, [r4, #4]
            dev->conf = *conf;
    6cd8:	0030      	movs	r0, r6
    6cda:	302c      	adds	r0, #44	; 0x2c
    6cdc:	2205      	movs	r2, #5
    6cde:	0021      	movs	r1, r4
    6ce0:	4b07      	ldr	r3, [pc, #28]	; (6d00 <bmp280_get_config+0x78>)
    6ce2:	4798      	blx	r3
}
    6ce4:	0028      	movs	r0, r5
    6ce6:	b002      	add	sp, #8
    6ce8:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BMP280_E_NULL_PTR;
    6cea:	2501      	movs	r5, #1
    6cec:	426d      	negs	r5, r5
    6cee:	e7f9      	b.n	6ce4 <bmp280_get_config+0x5c>
    6cf0:	2501      	movs	r5, #1
    6cf2:	426d      	negs	r5, r5
    6cf4:	e7f6      	b.n	6ce4 <bmp280_get_config+0x5c>
    6cf6:	46c0      	nop			; (mov r8, r8)
    6cf8:	000069c9 	.word	0x000069c9
    6cfc:	00006a69 	.word	0x00006a69
    6d00:	0000db25 	.word	0x0000db25

00006d04 <bmp280_set_config>:
{
    6d04:	b510      	push	{r4, lr}
    6d06:	000a      	movs	r2, r1
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
    6d08:	0001      	movs	r1, r0
    6d0a:	2000      	movs	r0, #0
    6d0c:	4b01      	ldr	r3, [pc, #4]	; (6d14 <bmp280_set_config+0x10>)
    6d0e:	4798      	blx	r3
}
    6d10:	bd10      	pop	{r4, pc}
    6d12:	46c0      	nop			; (mov r8, r8)
    6d14:	00006ba1 	.word	0x00006ba1

00006d18 <bmp280_set_power_mode>:
{
    6d18:	b570      	push	{r4, r5, r6, lr}
    6d1a:	0005      	movs	r5, r0
    6d1c:	000c      	movs	r4, r1
    rslt = null_ptr_check(dev);
    6d1e:	0008      	movs	r0, r1
    6d20:	4b05      	ldr	r3, [pc, #20]	; (6d38 <bmp280_set_power_mode+0x20>)
    6d22:	4798      	blx	r3
    if (rslt == BMP280_OK)
    6d24:	2800      	cmp	r0, #0
    6d26:	d000      	beq.n	6d2a <bmp280_set_power_mode+0x12>
}
    6d28:	bd70      	pop	{r4, r5, r6, pc}
        rslt = conf_sensor(mode, &dev->conf, dev);
    6d2a:	0021      	movs	r1, r4
    6d2c:	312c      	adds	r1, #44	; 0x2c
    6d2e:	0022      	movs	r2, r4
    6d30:	0028      	movs	r0, r5
    6d32:	4b02      	ldr	r3, [pc, #8]	; (6d3c <bmp280_set_power_mode+0x24>)
    6d34:	4798      	blx	r3
    6d36:	e7f7      	b.n	6d28 <bmp280_set_power_mode+0x10>
    6d38:	000069c9 	.word	0x000069c9
    6d3c:	00006ba1 	.word	0x00006ba1

00006d40 <bmp280_get_uncomp_data>:
{
    6d40:	b530      	push	{r4, r5, lr}
    6d42:	b083      	sub	sp, #12
    6d44:	0004      	movs	r4, r0
    6d46:	000d      	movs	r5, r1
    uint8_t temp[6] = { 0 };
    6d48:	2206      	movs	r2, #6
    6d4a:	2100      	movs	r1, #0
    6d4c:	4668      	mov	r0, sp
    6d4e:	4b23      	ldr	r3, [pc, #140]	; (6ddc <bmp280_get_uncomp_data+0x9c>)
    6d50:	4798      	blx	r3
    rslt = null_ptr_check(dev);
    6d52:	0028      	movs	r0, r5
    6d54:	4b22      	ldr	r3, [pc, #136]	; (6de0 <bmp280_get_uncomp_data+0xa0>)
    6d56:	4798      	blx	r3
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
    6d58:	2800      	cmp	r0, #0
    6d5a:	d130      	bne.n	6dbe <bmp280_get_uncomp_data+0x7e>
    6d5c:	2c00      	cmp	r4, #0
    6d5e:	d031      	beq.n	6dc4 <bmp280_get_uncomp_data+0x84>
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
    6d60:	002b      	movs	r3, r5
    6d62:	2206      	movs	r2, #6
    6d64:	4669      	mov	r1, sp
    6d66:	30f7      	adds	r0, #247	; 0xf7
    6d68:	4d1e      	ldr	r5, [pc, #120]	; (6de4 <bmp280_get_uncomp_data+0xa4>)
    6d6a:	47a8      	blx	r5
        if (rslt == BMP280_OK)
    6d6c:	2800      	cmp	r0, #0
    6d6e:	d12c      	bne.n	6dca <bmp280_get_uncomp_data+0x8a>
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
    6d70:	466b      	mov	r3, sp
    6d72:	781b      	ldrb	r3, [r3, #0]
    6d74:	031b      	lsls	r3, r3, #12
    6d76:	466a      	mov	r2, sp
    6d78:	7852      	ldrb	r2, [r2, #1]
    6d7a:	0112      	lsls	r2, r2, #4
    6d7c:	4313      	orrs	r3, r2
    6d7e:	466a      	mov	r2, sp
    6d80:	7892      	ldrb	r2, [r2, #2]
    6d82:	0912      	lsrs	r2, r2, #4
    6d84:	4313      	orrs	r3, r2
            uncomp_data->uncomp_press =
    6d86:	6063      	str	r3, [r4, #4]
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
    6d88:	466a      	mov	r2, sp
    6d8a:	78d2      	ldrb	r2, [r2, #3]
    6d8c:	0312      	lsls	r2, r2, #12
    6d8e:	4669      	mov	r1, sp
    6d90:	7909      	ldrb	r1, [r1, #4]
    6d92:	0109      	lsls	r1, r1, #4
    6d94:	430a      	orrs	r2, r1
    6d96:	4669      	mov	r1, sp
    6d98:	7949      	ldrb	r1, [r1, #5]
    6d9a:	0909      	lsrs	r1, r1, #4
    6d9c:	430a      	orrs	r2, r1
            uncomp_data->uncomp_temp =
    6d9e:	6022      	str	r2, [r4, #0]
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
    int8_t rslt = 0;

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
    6da0:	3a01      	subs	r2, #1
    6da2:	4911      	ldr	r1, [pc, #68]	; (6de8 <bmp280_get_uncomp_data+0xa8>)
    6da4:	428a      	cmp	r2, r1
    6da6:	d904      	bls.n	6db2 <bmp280_get_uncomp_data+0x72>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
    6da8:	3b01      	subs	r3, #1
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
    6daa:	428b      	cmp	r3, r1
    6dac:	d810      	bhi.n	6dd0 <bmp280_get_uncomp_data+0x90>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
    6dae:	380a      	subs	r0, #10
    6db0:	e003      	b.n	6dba <bmp280_get_uncomp_data+0x7a>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
    6db2:	3b01      	subs	r3, #1
    6db4:	4a0c      	ldr	r2, [pc, #48]	; (6de8 <bmp280_get_uncomp_data+0xa8>)
    6db6:	4293      	cmp	r3, r2
    6db8:	d80d      	bhi.n	6dd6 <bmp280_get_uncomp_data+0x96>
}
    6dba:	b003      	add	sp, #12
    6dbc:	bd30      	pop	{r4, r5, pc}
        rslt = BMP280_E_NULL_PTR;
    6dbe:	2001      	movs	r0, #1
    6dc0:	4240      	negs	r0, r0
    6dc2:	e7fa      	b.n	6dba <bmp280_get_uncomp_data+0x7a>
    6dc4:	2001      	movs	r0, #1
    6dc6:	4240      	negs	r0, r0
    6dc8:	e7f7      	b.n	6dba <bmp280_get_uncomp_data+0x7a>
            rslt = BMP280_E_UNCOMP_DATA_CALC;
    6dca:	200d      	movs	r0, #13
    6dcc:	4240      	negs	r0, r0
    6dce:	e7f4      	b.n	6dba <bmp280_get_uncomp_data+0x7a>
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
    6dd0:	200c      	movs	r0, #12
    6dd2:	4240      	negs	r0, r0
    6dd4:	e7f1      	b.n	6dba <bmp280_get_uncomp_data+0x7a>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
    6dd6:	200b      	movs	r0, #11
    6dd8:	4240      	negs	r0, r0
    6dda:	e7ee      	b.n	6dba <bmp280_get_uncomp_data+0x7a>
    6ddc:	0000db5b 	.word	0x0000db5b
    6de0:	000069c9 	.word	0x000069c9
    6de4:	00006a69 	.word	0x00006a69
    6de8:	000fffee 	.word	0x000fffee

00006dec <bmp280_init>:
{
    6dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dee:	b089      	sub	sp, #36	; 0x24
	bmp.delay_ms = delay;
    6df0:	4c61      	ldr	r4, [pc, #388]	; (6f78 <bmp280_init+0x18c>)
    6df2:	4b62      	ldr	r3, [pc, #392]	; (6f7c <bmp280_init+0x190>)
    6df4:	60e3      	str	r3, [r4, #12]
	bmp.dev_id = BMP280_I2C_ADDR_PRIM;
    6df6:	2376      	movs	r3, #118	; 0x76
    6df8:	7063      	strb	r3, [r4, #1]
	bmp.intf = BMP280_I2C_INTF;
    6dfa:	3b75      	subs	r3, #117	; 0x75
    6dfc:	70a3      	strb	r3, [r4, #2]
	bmp.read = BMP280_i2c_reg_read;
    6dfe:	4b60      	ldr	r3, [pc, #384]	; (6f80 <bmp280_init+0x194>)
    6e00:	6063      	str	r3, [r4, #4]
	bmp.write = BMP280_i2c_reg_write;
    6e02:	4b60      	ldr	r3, [pc, #384]	; (6f84 <bmp280_init+0x198>)
    6e04:	60a3      	str	r3, [r4, #8]
	I2C_SENS_init();
    6e06:	4b60      	ldr	r3, [pc, #384]	; (6f88 <bmp280_init+0x19c>)
    6e08:	4798      	blx	r3
	i2c_m_sync_get_io_descriptor(&I2C_SENS, &I2C_sens_io);
    6e0a:	4d60      	ldr	r5, [pc, #384]	; (6f8c <bmp280_init+0x1a0>)
    6e0c:	a907      	add	r1, sp, #28
    6e0e:	0028      	movs	r0, r5
    6e10:	4b5f      	ldr	r3, [pc, #380]	; (6f90 <bmp280_init+0x1a4>)
    6e12:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_SENS);
    6e14:	0028      	movs	r0, r5
    6e16:	4b5f      	ldr	r3, [pc, #380]	; (6f94 <bmp280_init+0x1a8>)
    6e18:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C_SENS, BMP280_I2C_ADDR_PRIM, I2C_M_SEVEN);
    6e1a:	2280      	movs	r2, #128	; 0x80
    6e1c:	0112      	lsls	r2, r2, #4
    6e1e:	2176      	movs	r1, #118	; 0x76
    6e20:	0028      	movs	r0, r5
    6e22:	4b5d      	ldr	r3, [pc, #372]	; (6f98 <bmp280_init+0x1ac>)
    6e24:	4798      	blx	r3
    rslt = null_ptr_check(dev);
    6e26:	0020      	movs	r0, r4
    6e28:	4b5c      	ldr	r3, [pc, #368]	; (6f9c <bmp280_init+0x1b0>)
    6e2a:	4798      	blx	r3
    6e2c:	1e05      	subs	r5, r0, #0
    if (rslt == BMP280_OK)
    6e2e:	d000      	beq.n	6e32 <bmp280_init+0x46>
    6e30:	e080      	b.n	6f34 <bmp280_init+0x148>
    6e32:	2405      	movs	r4, #5
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
    6e34:	4d50      	ldr	r5, [pc, #320]	; (6f78 <bmp280_init+0x18c>)
    6e36:	4f5a      	ldr	r7, [pc, #360]	; (6fa0 <bmp280_init+0x1b4>)
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
    6e38:	002e      	movs	r6, r5
    6e3a:	e058      	b.n	6eee <bmp280_init+0x102>
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
    6e3c:	2218      	movs	r2, #24
    6e3e:	2100      	movs	r1, #0
    6e40:	a801      	add	r0, sp, #4
    6e42:	4b58      	ldr	r3, [pc, #352]	; (6fa4 <bmp280_init+0x1b8>)
    6e44:	4798      	blx	r3
    rslt = null_ptr_check(dev);
    6e46:	484c      	ldr	r0, [pc, #304]	; (6f78 <bmp280_init+0x18c>)
    6e48:	4b54      	ldr	r3, [pc, #336]	; (6f9c <bmp280_init+0x1b0>)
    6e4a:	4798      	blx	r3
    6e4c:	1e05      	subs	r5, r0, #0
    if (rslt == BMP280_OK)
    6e4e:	d15e      	bne.n	6f0e <bmp280_init+0x122>
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
    6e50:	4b49      	ldr	r3, [pc, #292]	; (6f78 <bmp280_init+0x18c>)
    6e52:	2218      	movs	r2, #24
    6e54:	a901      	add	r1, sp, #4
    6e56:	2088      	movs	r0, #136	; 0x88
    6e58:	4d51      	ldr	r5, [pc, #324]	; (6fa0 <bmp280_init+0x1b4>)
    6e5a:	47a8      	blx	r5
    6e5c:	1e05      	subs	r5, r0, #0
        if (rslt == BMP280_OK)
    6e5e:	d156      	bne.n	6f0e <bmp280_init+0x122>
            dev->calib_param.dig_t1 =
    6e60:	4a45      	ldr	r2, [pc, #276]	; (6f78 <bmp280_init+0x18c>)
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
    6e62:	ab01      	add	r3, sp, #4
    6e64:	7858      	ldrb	r0, [r3, #1]
    6e66:	0200      	lsls	r0, r0, #8
    6e68:	7819      	ldrb	r1, [r3, #0]
    6e6a:	4301      	orrs	r1, r0
            dev->calib_param.dig_t1 =
    6e6c:	8211      	strh	r1, [r2, #16]
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
    6e6e:	78d8      	ldrb	r0, [r3, #3]
    6e70:	0200      	lsls	r0, r0, #8
    6e72:	7899      	ldrb	r1, [r3, #2]
    6e74:	4301      	orrs	r1, r0
            dev->calib_param.dig_t2 =
    6e76:	8251      	strh	r1, [r2, #18]
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
    6e78:	7958      	ldrb	r0, [r3, #5]
    6e7a:	0200      	lsls	r0, r0, #8
    6e7c:	7919      	ldrb	r1, [r3, #4]
    6e7e:	4301      	orrs	r1, r0
            dev->calib_param.dig_t3 =
    6e80:	8291      	strh	r1, [r2, #20]
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
    6e82:	79d8      	ldrb	r0, [r3, #7]
    6e84:	0200      	lsls	r0, r0, #8
    6e86:	7999      	ldrb	r1, [r3, #6]
    6e88:	4301      	orrs	r1, r0
            dev->calib_param.dig_p1 =
    6e8a:	82d1      	strh	r1, [r2, #22]
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
    6e8c:	7a58      	ldrb	r0, [r3, #9]
    6e8e:	0200      	lsls	r0, r0, #8
    6e90:	7a19      	ldrb	r1, [r3, #8]
    6e92:	4301      	orrs	r1, r0
            dev->calib_param.dig_p2 =
    6e94:	8311      	strh	r1, [r2, #24]
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
    6e96:	7ad8      	ldrb	r0, [r3, #11]
    6e98:	0200      	lsls	r0, r0, #8
    6e9a:	7a99      	ldrb	r1, [r3, #10]
    6e9c:	4301      	orrs	r1, r0
            dev->calib_param.dig_p3 =
    6e9e:	8351      	strh	r1, [r2, #26]
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
    6ea0:	7b58      	ldrb	r0, [r3, #13]
    6ea2:	0200      	lsls	r0, r0, #8
    6ea4:	7b19      	ldrb	r1, [r3, #12]
    6ea6:	4301      	orrs	r1, r0
            dev->calib_param.dig_p4 =
    6ea8:	8391      	strh	r1, [r2, #28]
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
    6eaa:	7bd8      	ldrb	r0, [r3, #15]
    6eac:	0200      	lsls	r0, r0, #8
    6eae:	7b99      	ldrb	r1, [r3, #14]
    6eb0:	4301      	orrs	r1, r0
            dev->calib_param.dig_p5 =
    6eb2:	83d1      	strh	r1, [r2, #30]
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
    6eb4:	7c58      	ldrb	r0, [r3, #17]
    6eb6:	0200      	lsls	r0, r0, #8
    6eb8:	7c19      	ldrb	r1, [r3, #16]
    6eba:	4301      	orrs	r1, r0
            dev->calib_param.dig_p6 =
    6ebc:	8411      	strh	r1, [r2, #32]
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
    6ebe:	7cd8      	ldrb	r0, [r3, #19]
    6ec0:	0200      	lsls	r0, r0, #8
    6ec2:	7c99      	ldrb	r1, [r3, #18]
    6ec4:	4301      	orrs	r1, r0
            dev->calib_param.dig_p7 =
    6ec6:	8451      	strh	r1, [r2, #34]	; 0x22
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
    6ec8:	7d58      	ldrb	r0, [r3, #21]
    6eca:	0200      	lsls	r0, r0, #8
    6ecc:	7d19      	ldrb	r1, [r3, #20]
    6ece:	4301      	orrs	r1, r0
            dev->calib_param.dig_p8 =
    6ed0:	8491      	strh	r1, [r2, #36]	; 0x24
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
    6ed2:	7dd9      	ldrb	r1, [r3, #23]
    6ed4:	0209      	lsls	r1, r1, #8
    6ed6:	7d9b      	ldrb	r3, [r3, #22]
    6ed8:	430b      	orrs	r3, r1
            dev->calib_param.dig_p9 =
    6eda:	84d3      	strh	r3, [r2, #38]	; 0x26
    6edc:	e017      	b.n	6f0e <bmp280_init+0x122>
            dev->delay_ms(10);
    6ede:	4b26      	ldr	r3, [pc, #152]	; (6f78 <bmp280_init+0x18c>)
    6ee0:	68db      	ldr	r3, [r3, #12]
    6ee2:	200a      	movs	r0, #10
    6ee4:	4798      	blx	r3
    6ee6:	3c01      	subs	r4, #1
    6ee8:	b2e4      	uxtb	r4, r4
        while (try_count)
    6eea:	2c00      	cmp	r4, #0
    6eec:	d020      	beq.n	6f30 <bmp280_init+0x144>
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
    6eee:	002b      	movs	r3, r5
    6ef0:	2201      	movs	r2, #1
    6ef2:	0029      	movs	r1, r5
    6ef4:	20d0      	movs	r0, #208	; 0xd0
    6ef6:	47b8      	blx	r7
            if ((rslt == BMP280_OK) &&
    6ef8:	2800      	cmp	r0, #0
    6efa:	d1f0      	bne.n	6ede <bmp280_init+0xf2>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
    6efc:	7833      	ldrb	r3, [r6, #0]
            if ((rslt == BMP280_OK) &&
    6efe:	3b56      	subs	r3, #86	; 0x56
    6f00:	2b02      	cmp	r3, #2
    6f02:	d8ec      	bhi.n	6ede <bmp280_init+0xf2>
                rslt = bmp280_soft_reset(dev);
    6f04:	481c      	ldr	r0, [pc, #112]	; (6f78 <bmp280_init+0x18c>)
    6f06:	4b28      	ldr	r3, [pc, #160]	; (6fa8 <bmp280_init+0x1bc>)
    6f08:	4798      	blx	r3
    6f0a:	1e05      	subs	r5, r0, #0
                if (rslt == BMP280_OK)
    6f0c:	d096      	beq.n	6e3c <bmp280_init+0x50>
        if (!try_count)
    6f0e:	2c00      	cmp	r4, #0
    6f10:	d02f      	beq.n	6f72 <bmp280_init+0x186>
        if (rslt == BMP280_OK)
    6f12:	2d00      	cmp	r5, #0
    6f14:	d10e      	bne.n	6f34 <bmp280_init+0x148>
            dev->conf.filter = BMP280_FILTER_OFF;
    6f16:	4b18      	ldr	r3, [pc, #96]	; (6f78 <bmp280_init+0x18c>)
    6f18:	2200      	movs	r2, #0
    6f1a:	212f      	movs	r1, #47	; 0x2f
    6f1c:	545a      	strb	r2, [r3, r1]
            dev->conf.os_pres = BMP280_OS_NONE;
    6f1e:	3902      	subs	r1, #2
    6f20:	545a      	strb	r2, [r3, r1]
            dev->conf.os_temp = BMP280_OS_NONE;
    6f22:	3901      	subs	r1, #1
    6f24:	545a      	strb	r2, [r3, r1]
            dev->conf.odr = BMP280_ODR_0_5_MS;
    6f26:	3102      	adds	r1, #2
    6f28:	545a      	strb	r2, [r3, r1]
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
    6f2a:	3102      	adds	r1, #2
    6f2c:	545a      	strb	r2, [r3, r1]
    6f2e:	e001      	b.n	6f34 <bmp280_init+0x148>
            rslt = BMP280_E_DEV_NOT_FOUND;
    6f30:	2502      	movs	r5, #2
    6f32:	426d      	negs	r5, r5
	bmp280_get_config(&conf, &bmp);
    6f34:	4e10      	ldr	r6, [pc, #64]	; (6f78 <bmp280_init+0x18c>)
    6f36:	4c1d      	ldr	r4, [pc, #116]	; (6fac <bmp280_init+0x1c0>)
    6f38:	0031      	movs	r1, r6
    6f3a:	0020      	movs	r0, r4
    6f3c:	4b1c      	ldr	r3, [pc, #112]	; (6fb0 <bmp280_init+0x1c4>)
    6f3e:	4798      	blx	r3
	conf.filter = BMP280_FILTER_COEFF_2;
    6f40:	2301      	movs	r3, #1
    6f42:	70e3      	strb	r3, [r4, #3]
	conf.os_temp = BMP280_OS_4X;
    6f44:	3302      	adds	r3, #2
    6f46:	7023      	strb	r3, [r4, #0]
	conf.os_pres = BMP280_OS_4X;
    6f48:	7063      	strb	r3, [r4, #1]
	conf.odr = BMP280_ODR_1000_MS;
    6f4a:	3302      	adds	r3, #2
    6f4c:	70a3      	strb	r3, [r4, #2]
	bmp280_set_config(&conf, &bmp);
    6f4e:	0031      	movs	r1, r6
    6f50:	0020      	movs	r0, r4
    6f52:	4b18      	ldr	r3, [pc, #96]	; (6fb4 <bmp280_init+0x1c8>)
    6f54:	4798      	blx	r3
	bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
    6f56:	0031      	movs	r1, r6
    6f58:	2003      	movs	r0, #3
    6f5a:	4b17      	ldr	r3, [pc, #92]	; (6fb8 <bmp280_init+0x1cc>)
    6f5c:	4798      	blx	r3
	bmp280_get_uncomp_data(&ucomp_data, &bmp);
    6f5e:	0031      	movs	r1, r6
    6f60:	4816      	ldr	r0, [pc, #88]	; (6fbc <bmp280_init+0x1d0>)
    6f62:	4b17      	ldr	r3, [pc, #92]	; (6fc0 <bmp280_init+0x1d4>)
    6f64:	4798      	blx	r3
	bmp.delay_ms(100);
    6f66:	68f3      	ldr	r3, [r6, #12]
    6f68:	2064      	movs	r0, #100	; 0x64
    6f6a:	4798      	blx	r3
}
    6f6c:	0028      	movs	r0, r5
    6f6e:	b009      	add	sp, #36	; 0x24
    6f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = BMP280_E_DEV_NOT_FOUND;
    6f72:	2502      	movs	r5, #2
    6f74:	426d      	negs	r5, r5
    6f76:	e7dd      	b.n	6f34 <bmp280_init+0x148>
    6f78:	200008b0 	.word	0x200008b0
    6f7c:	0000843d 	.word	0x0000843d
    6f80:	00006a31 	.word	0x00006a31
    6f84:	000069f5 	.word	0x000069f5
    6f88:	0000664d 	.word	0x0000664d
    6f8c:	20000834 	.word	0x20000834
    6f90:	000088d3 	.word	0x000088d3
    6f94:	000088b5 	.word	0x000088b5
    6f98:	000088c1 	.word	0x000088c1
    6f9c:	000069c9 	.word	0x000069c9
    6fa0:	00006a69 	.word	0x00006a69
    6fa4:	0000db5b 	.word	0x0000db5b
    6fa8:	00006b5d 	.word	0x00006b5d
    6fac:	200008a8 	.word	0x200008a8
    6fb0:	00006c89 	.word	0x00006c89
    6fb4:	00006d05 	.word	0x00006d05
    6fb8:	00006d19 	.word	0x00006d19
    6fbc:	200008e4 	.word	0x200008e4
    6fc0:	00006d41 	.word	0x00006d41

00006fc4 <bmp280_get_comp_temp_32bit>:
{
    6fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fc6:	0005      	movs	r5, r0
    6fc8:	000e      	movs	r6, r1
    6fca:	0014      	movs	r4, r2
    rslt = null_ptr_check(dev);
    6fcc:	0010      	movs	r0, r2
    6fce:	4b1c      	ldr	r3, [pc, #112]	; (7040 <bmp280_get_comp_temp_32bit+0x7c>)
    6fd0:	4798      	blx	r3
    if (rslt == BMP280_OK)
    6fd2:	2800      	cmp	r0, #0
    6fd4:	d12f      	bne.n	7036 <bmp280_get_comp_temp_32bit+0x72>
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
    6fd6:	8a23      	ldrh	r3, [r4, #16]
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
    6fd8:	17f7      	asrs	r7, r6, #31
    6fda:	220f      	movs	r2, #15
    6fdc:	403a      	ands	r2, r7
    6fde:	1992      	adds	r2, r2, r6
    6fe0:	1112      	asrs	r2, r2, #4
    6fe2:	1ad2      	subs	r2, r2, r3
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
    6fe4:	2107      	movs	r1, #7
    6fe6:	4039      	ands	r1, r7
    6fe8:	1989      	adds	r1, r1, r6
    6fea:	10c9      	asrs	r1, r1, #3
    6fec:	005b      	lsls	r3, r3, #1
    6fee:	1acb      	subs	r3, r1, r3
    6ff0:	2612      	movs	r6, #18
    6ff2:	5fa1      	ldrsh	r1, [r4, r6]
    6ff4:	4359      	muls	r1, r3
        var1 =
    6ff6:	17cb      	asrs	r3, r1, #31
    6ff8:	055b      	lsls	r3, r3, #21
    6ffa:	0d5b      	lsrs	r3, r3, #21
    6ffc:	185b      	adds	r3, r3, r1
    6ffe:	12db      	asrs	r3, r3, #11
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
    7000:	4352      	muls	r2, r2
    7002:	0011      	movs	r1, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
    7004:	17d2      	asrs	r2, r2, #31
    7006:	0512      	lsls	r2, r2, #20
    7008:	0d12      	lsrs	r2, r2, #20
    700a:	1852      	adds	r2, r2, r1
    700c:	1312      	asrs	r2, r2, #12
             ((int32_t) dev->calib_param.dig_t3)) /
    700e:	2614      	movs	r6, #20
    7010:	5fa1      	ldrsh	r1, [r4, r6]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
    7012:	4351      	muls	r1, r2
        var2 =
    7014:	17ca      	asrs	r2, r1, #31
    7016:	0492      	lsls	r2, r2, #18
    7018:	0c92      	lsrs	r2, r2, #18
    701a:	1852      	adds	r2, r2, r1
    701c:	1392      	asrs	r2, r2, #14
        dev->calib_param.t_fine = var1 + var2;
    701e:	189b      	adds	r3, r3, r2
    7020:	62a3      	str	r3, [r4, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
    7022:	009a      	lsls	r2, r3, #2
    7024:	18d2      	adds	r2, r2, r3
    7026:	3280      	adds	r2, #128	; 0x80
    7028:	17d1      	asrs	r1, r2, #31
    702a:	23ff      	movs	r3, #255	; 0xff
    702c:	400b      	ands	r3, r1
    702e:	189b      	adds	r3, r3, r2
    7030:	121b      	asrs	r3, r3, #8
    7032:	602b      	str	r3, [r5, #0]
}
    7034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *comp_temp = 0;
    7036:	2300      	movs	r3, #0
    7038:	602b      	str	r3, [r5, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
    703a:	200e      	movs	r0, #14
    703c:	4240      	negs	r0, r0
    703e:	e7f9      	b.n	7034 <bmp280_get_comp_temp_32bit+0x70>
    7040:	000069c9 	.word	0x000069c9

00007044 <bmp280_get_comp_pres_32bit>:
{
    7044:	b5f0      	push	{r4, r5, r6, r7, lr}
    7046:	46ce      	mov	lr, r9
    7048:	4647      	mov	r7, r8
    704a:	b580      	push	{r7, lr}
    704c:	b083      	sub	sp, #12
    704e:	0005      	movs	r5, r0
    7050:	9101      	str	r1, [sp, #4]
    7052:	0016      	movs	r6, r2
    rslt = null_ptr_check(dev);
    7054:	0010      	movs	r0, r2
    7056:	4b4e      	ldr	r3, [pc, #312]	; (7190 <bmp280_get_comp_pres_32bit+0x14c>)
    7058:	4798      	blx	r3
    705a:	1e04      	subs	r4, r0, #0
    if (rslt == BMP280_OK)
    705c:	d000      	beq.n	7060 <bmp280_get_comp_pres_32bit+0x1c>
    705e:	e086      	b.n	716e <bmp280_get_comp_pres_32bit+0x12a>
        var1 = (((int32_t) dev->calib_param.t_fine) / 2) - (int32_t) 64000;
    7060:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    7062:	0fd3      	lsrs	r3, r2, #31
    7064:	189b      	adds	r3, r3, r2
    7066:	105b      	asrs	r3, r3, #1
    7068:	4a4a      	ldr	r2, [pc, #296]	; (7194 <bmp280_get_comp_pres_32bit+0x150>)
    706a:	4694      	mov	ip, r2
    706c:	4463      	add	r3, ip
        var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t) dev->calib_param.dig_p6);
    706e:	17da      	asrs	r2, r3, #31
    7070:	2003      	movs	r0, #3
    7072:	4680      	mov	r8, r0
    7074:	4002      	ands	r2, r0
    7076:	18d2      	adds	r2, r2, r3
    7078:	1090      	asrs	r0, r2, #2
    707a:	4340      	muls	r0, r0
    707c:	17c1      	asrs	r1, r0, #31
    707e:	054a      	lsls	r2, r1, #21
    7080:	0d52      	lsrs	r2, r2, #21
    7082:	1812      	adds	r2, r2, r0
    7084:	12d2      	asrs	r2, r2, #11
    7086:	4691      	mov	r9, r2
    7088:	2220      	movs	r2, #32
    708a:	5eb7      	ldrsh	r7, [r6, r2]
    708c:	464a      	mov	r2, r9
    708e:	4357      	muls	r7, r2
    7090:	46bc      	mov	ip, r7
        var2 = var2 + ((var1 * ((int32_t) dev->calib_param.dig_p5)) * 2);
    7092:	271e      	movs	r7, #30
    7094:	5ff2      	ldrsh	r2, [r6, r7]
    7096:	435a      	muls	r2, r3
    7098:	0052      	lsls	r2, r2, #1
    709a:	4462      	add	r2, ip
    709c:	4691      	mov	r9, r2
        var2 = (var2 / 4) + (((int32_t) dev->calib_param.dig_p4) * 65536);
    709e:	17d7      	asrs	r7, r2, #31
    70a0:	4642      	mov	r2, r8
    70a2:	4017      	ands	r7, r2
    70a4:	46bc      	mov	ip, r7
    70a6:	464a      	mov	r2, r9
    70a8:	4462      	add	r2, ip
    70aa:	1092      	asrs	r2, r2, #2
    70ac:	4694      	mov	ip, r2
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
    70ae:	271a      	movs	r7, #26
    70b0:	5ff2      	ldrsh	r2, [r6, r7]
    70b2:	4690      	mov	r8, r2
    70b4:	04ca      	lsls	r2, r1, #19
    70b6:	0cd2      	lsrs	r2, r2, #19
    70b8:	1812      	adds	r2, r2, r0
    70ba:	1352      	asrs	r2, r2, #13
    70bc:	4640      	mov	r0, r8
    70be:	4342      	muls	r2, r0
    70c0:	17d0      	asrs	r0, r2, #31
    70c2:	2107      	movs	r1, #7
    70c4:	4001      	ands	r1, r0
    70c6:	1889      	adds	r1, r1, r2
    70c8:	10c9      	asrs	r1, r1, #3
             ((((int32_t) dev->calib_param.dig_p2) * var1) / 2)) / 262144;
    70ca:	2018      	movs	r0, #24
    70cc:	5e32      	ldrsh	r2, [r6, r0]
    70ce:	4353      	muls	r3, r2
    70d0:	0fda      	lsrs	r2, r3, #31
    70d2:	18d2      	adds	r2, r2, r3
    70d4:	1052      	asrs	r2, r2, #1
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
    70d6:	188a      	adds	r2, r1, r2
        var1 =
    70d8:	17d1      	asrs	r1, r2, #31
    70da:	0389      	lsls	r1, r1, #14
    70dc:	0b89      	lsrs	r1, r1, #14
    70de:	1889      	adds	r1, r1, r2
    70e0:	1489      	asrs	r1, r1, #18
        var1 = ((((32768 + var1)) * ((int32_t) dev->calib_param.dig_p1)) / 32768);
    70e2:	2280      	movs	r2, #128	; 0x80
    70e4:	0212      	lsls	r2, r2, #8
    70e6:	4690      	mov	r8, r2
    70e8:	4441      	add	r1, r8
    70ea:	8af2      	ldrh	r2, [r6, #22]
    70ec:	434a      	muls	r2, r1
    70ee:	17d1      	asrs	r1, r2, #31
    70f0:	0449      	lsls	r1, r1, #17
    70f2:	0c49      	lsrs	r1, r1, #17
    70f4:	1889      	adds	r1, r1, r2
    70f6:	13c9      	asrs	r1, r1, #15
        var2 = (var2 / 4) + (((int32_t) dev->calib_param.dig_p4) * 65536);
    70f8:	221c      	movs	r2, #28
    70fa:	5eb0      	ldrsh	r0, [r6, r2]
    70fc:	0400      	lsls	r0, r0, #16
    70fe:	4460      	add	r0, ip
    7100:	0003      	movs	r3, r0
        *comp_pres = (uint32_t)(((int32_t)(1048576 - uncomp_pres) - (var2 / 4096)) * 3125);
    7102:	17c0      	asrs	r0, r0, #31
    7104:	0500      	lsls	r0, r0, #20
    7106:	0d00      	lsrs	r0, r0, #20
    7108:	18c0      	adds	r0, r0, r3
    710a:	1300      	asrs	r0, r0, #12
    710c:	4240      	negs	r0, r0
    710e:	9b01      	ldr	r3, [sp, #4]
    7110:	1ac0      	subs	r0, r0, r3
    7112:	4f21      	ldr	r7, [pc, #132]	; (7198 <bmp280_get_comp_pres_32bit+0x154>)
    7114:	4378      	muls	r0, r7
    7116:	4b21      	ldr	r3, [pc, #132]	; (719c <bmp280_get_comp_pres_32bit+0x158>)
    7118:	469c      	mov	ip, r3
    711a:	4460      	add	r0, ip
    711c:	6028      	str	r0, [r5, #0]
        if (var1 != 0)
    711e:	2900      	cmp	r1, #0
    7120:	d030      	beq.n	7184 <bmp280_get_comp_pres_32bit+0x140>
            if (*comp_pres < 0x80000000)
    7122:	2800      	cmp	r0, #0
    7124:	db29      	blt.n	717a <bmp280_get_comp_pres_32bit+0x136>
                *comp_pres = (*comp_pres << 1) / ((uint32_t) var1);
    7126:	0040      	lsls	r0, r0, #1
    7128:	4b1d      	ldr	r3, [pc, #116]	; (71a0 <bmp280_get_comp_pres_32bit+0x15c>)
    712a:	4798      	blx	r3
    712c:	6028      	str	r0, [r5, #0]
            var1 = (((int32_t) dev->calib_param.dig_p9) * ((int32_t) (((*comp_pres / 8) * (*comp_pres / 8)) / 8192))) /
    712e:	682a      	ldr	r2, [r5, #0]
    7130:	08d3      	lsrs	r3, r2, #3
    7132:	435b      	muls	r3, r3
    7134:	0b5b      	lsrs	r3, r3, #13
    7136:	2026      	movs	r0, #38	; 0x26
    7138:	5e31      	ldrsh	r1, [r6, r0]
    713a:	4359      	muls	r1, r3
    713c:	17cb      	asrs	r3, r1, #31
    713e:	051b      	lsls	r3, r3, #20
    7140:	0d1b      	lsrs	r3, r3, #20
    7142:	185b      	adds	r3, r3, r1
    7144:	131b      	asrs	r3, r3, #12
            var2 = (((int32_t) (*comp_pres / 4)) * ((int32_t) dev->calib_param.dig_p8)) / 8192;
    7146:	0890      	lsrs	r0, r2, #2
    7148:	2724      	movs	r7, #36	; 0x24
    714a:	5ff1      	ldrsh	r1, [r6, r7]
    714c:	4348      	muls	r0, r1
    714e:	17c1      	asrs	r1, r0, #31
    7150:	04c9      	lsls	r1, r1, #19
    7152:	0cc9      	lsrs	r1, r1, #19
    7154:	1809      	adds	r1, r1, r0
    7156:	1349      	asrs	r1, r1, #13
            *comp_pres = (uint32_t) ((int32_t) *comp_pres + ((var1 + var2 + dev->calib_param.dig_p7) / 16));
    7158:	185b      	adds	r3, r3, r1
    715a:	2022      	movs	r0, #34	; 0x22
    715c:	5e31      	ldrsh	r1, [r6, r0]
    715e:	185b      	adds	r3, r3, r1
    7160:	17d8      	asrs	r0, r3, #31
    7162:	210f      	movs	r1, #15
    7164:	4001      	ands	r1, r0
    7166:	18cb      	adds	r3, r1, r3
    7168:	111b      	asrs	r3, r3, #4
    716a:	189a      	adds	r2, r3, r2
    716c:	602a      	str	r2, [r5, #0]
}
    716e:	0020      	movs	r0, r4
    7170:	b003      	add	sp, #12
    7172:	bc0c      	pop	{r2, r3}
    7174:	4690      	mov	r8, r2
    7176:	4699      	mov	r9, r3
    7178:	bdf0      	pop	{r4, r5, r6, r7, pc}
                *comp_pres = (*comp_pres / (uint32_t) var1) * 2;
    717a:	4b09      	ldr	r3, [pc, #36]	; (71a0 <bmp280_get_comp_pres_32bit+0x15c>)
    717c:	4798      	blx	r3
    717e:	0040      	lsls	r0, r0, #1
    7180:	6028      	str	r0, [r5, #0]
    7182:	e7d4      	b.n	712e <bmp280_get_comp_pres_32bit+0xea>
            *comp_pres = 0;
    7184:	2300      	movs	r3, #0
    7186:	602b      	str	r3, [r5, #0]
            rslt = BMP280_E_32BIT_COMP_PRESS;
    7188:	240f      	movs	r4, #15
    718a:	4264      	negs	r4, r4
    718c:	e7ef      	b.n	716e <bmp280_get_comp_pres_32bit+0x12a>
    718e:	46c0      	nop			; (mov r8, r8)
    7190:	000069c9 	.word	0x000069c9
    7194:	ffff0600 	.word	0xffff0600
    7198:	00000c35 	.word	0x00000c35
    719c:	c3500000 	.word	0xc3500000
    71a0:	0000cce1 	.word	0x0000cce1

000071a4 <bmp280_measure>:

    return rslt;
}

void bmp280_measure(uint32_t *temp, uint32_t *pres)
{
    71a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71a6:	0007      	movs	r7, r0
    71a8:	000e      	movs	r6, r1
	i2c_m_sync_set_slaveaddr(&I2C_SENS, BMP280_I2C_ADDR_PRIM, I2C_M_SEVEN);
    71aa:	2280      	movs	r2, #128	; 0x80
    71ac:	0112      	lsls	r2, r2, #4
    71ae:	2176      	movs	r1, #118	; 0x76
    71b0:	4809      	ldr	r0, [pc, #36]	; (71d8 <bmp280_measure+0x34>)
    71b2:	4b0a      	ldr	r3, [pc, #40]	; (71dc <bmp280_measure+0x38>)
    71b4:	4798      	blx	r3
	bmp280_get_uncomp_data(&ucomp_data, &bmp);
    71b6:	4c0a      	ldr	r4, [pc, #40]	; (71e0 <bmp280_measure+0x3c>)
    71b8:	4d0a      	ldr	r5, [pc, #40]	; (71e4 <bmp280_measure+0x40>)
    71ba:	0021      	movs	r1, r4
    71bc:	0028      	movs	r0, r5
    71be:	4b0a      	ldr	r3, [pc, #40]	; (71e8 <bmp280_measure+0x44>)
    71c0:	4798      	blx	r3
	bmp280_get_comp_temp_32bit(temp, ucomp_data.uncomp_temp, &bmp);
    71c2:	0022      	movs	r2, r4
    71c4:	6829      	ldr	r1, [r5, #0]
    71c6:	0038      	movs	r0, r7
    71c8:	4b08      	ldr	r3, [pc, #32]	; (71ec <bmp280_measure+0x48>)
    71ca:	4798      	blx	r3
	bmp280_get_comp_pres_32bit(pres, ucomp_data.uncomp_press, &bmp);
    71cc:	6869      	ldr	r1, [r5, #4]
    71ce:	0022      	movs	r2, r4
    71d0:	0030      	movs	r0, r6
    71d2:	4b07      	ldr	r3, [pc, #28]	; (71f0 <bmp280_measure+0x4c>)
    71d4:	4798      	blx	r3
    71d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71d8:	20000834 	.word	0x20000834
    71dc:	000088c1 	.word	0x000088c1
    71e0:	200008b0 	.word	0x200008b0
    71e4:	200008e4 	.word	0x200008e4
    71e8:	00006d41 	.word	0x00006d41
    71ec:	00006fc5 	.word	0x00006fc5
    71f0:	00007045 	.word	0x00007045

000071f4 <tx_cb_debugUART>:
		debugRxBufferSize++;						//inkrement brojaca primljenih karaktera
}

static void tx_cb_debugUART(const struct usart_async_descriptor *const io_descr)
{
	debugTxDone = true;
    71f4:	2201      	movs	r2, #1
    71f6:	4b01      	ldr	r3, [pc, #4]	; (71fc <tx_cb_debugUART+0x8>)
    71f8:	701a      	strb	r2, [r3, #0]
}
    71fa:	4770      	bx	lr
    71fc:	20000001 	.word	0x20000001

00007200 <rx_cb_debugUART>:
{
    7200:	b530      	push	{r4, r5, lr}
    7202:	b083      	sub	sp, #12
	io_read(debug_io, &c, 1);
    7204:	466b      	mov	r3, sp
    7206:	1ddd      	adds	r5, r3, #7
    7208:	4c0b      	ldr	r4, [pc, #44]	; (7238 <rx_cb_debugUART+0x38>)
    720a:	2201      	movs	r2, #1
    720c:	0029      	movs	r1, r5
    720e:	6820      	ldr	r0, [r4, #0]
    7210:	4b0a      	ldr	r3, [pc, #40]	; (723c <rx_cb_debugUART+0x3c>)
    7212:	4798      	blx	r3
	debugRxBuffer[debugRxBufferLast++] = c;			//ucitavanje primljenog karaktera
    7214:	7923      	ldrb	r3, [r4, #4]
    7216:	b2db      	uxtb	r3, r3
    7218:	1c5a      	adds	r2, r3, #1
    721a:	b2d2      	uxtb	r2, r2
    721c:	7122      	strb	r2, [r4, #4]
    721e:	7829      	ldrb	r1, [r5, #0]
    7220:	4a07      	ldr	r2, [pc, #28]	; (7240 <rx_cb_debugUART+0x40>)
    7222:	54d1      	strb	r1, [r2, r3]
	debugRxBufferLast &= DEBUG_USART_RX_BUFFER_SIZE - 1;	//povratak na pocetak u slucaju prekoracenja
    7224:	7923      	ldrb	r3, [r4, #4]
    7226:	b2db      	uxtb	r3, r3
    7228:	7123      	strb	r3, [r4, #4]
	if (debugRxBufferSize < DEBUG_USART_RX_BUFFER_SIZE)
    722a:	7963      	ldrb	r3, [r4, #5]
		debugRxBufferSize++;						//inkrement brojaca primljenih karaktera
    722c:	7963      	ldrb	r3, [r4, #5]
    722e:	3301      	adds	r3, #1
    7230:	b2db      	uxtb	r3, r3
    7232:	7163      	strb	r3, [r4, #5]
}
    7234:	b003      	add	sp, #12
    7236:	bd30      	pop	{r4, r5, pc}
    7238:	20000290 	.word	0x20000290
    723c:	00008911 	.word	0x00008911
    7240:	200008ec 	.word	0x200008ec

00007244 <debugUARTdriverInit>:

void debugUARTdriverInit(void)
{
    7244:	b570      	push	{r4, r5, r6, lr}
	usart_async_register_callback(&debugUART, USART_ASYNC_RXC_CB, rx_cb_debugUART);
    7246:	4c09      	ldr	r4, [pc, #36]	; (726c <debugUARTdriverInit+0x28>)
    7248:	4a09      	ldr	r2, [pc, #36]	; (7270 <debugUARTdriverInit+0x2c>)
    724a:	2100      	movs	r1, #0
    724c:	0020      	movs	r0, r4
    724e:	4d09      	ldr	r5, [pc, #36]	; (7274 <debugUARTdriverInit+0x30>)
    7250:	47a8      	blx	r5
	usart_async_register_callback(&debugUART, USART_ASYNC_TXC_CB, tx_cb_debugUART);
    7252:	4a09      	ldr	r2, [pc, #36]	; (7278 <debugUARTdriverInit+0x34>)
    7254:	2101      	movs	r1, #1
    7256:	0020      	movs	r0, r4
    7258:	47a8      	blx	r5
	usart_async_get_io_descriptor(&debugUART, &debug_io);
    725a:	4908      	ldr	r1, [pc, #32]	; (727c <debugUARTdriverInit+0x38>)
    725c:	0020      	movs	r0, r4
    725e:	4b08      	ldr	r3, [pc, #32]	; (7280 <debugUARTdriverInit+0x3c>)
    7260:	4798      	blx	r3
	usart_async_enable(&debugUART);
    7262:	0020      	movs	r0, r4
    7264:	4b07      	ldr	r3, [pc, #28]	; (7284 <debugUARTdriverInit+0x40>)
    7266:	4798      	blx	r3
}
    7268:	bd70      	pop	{r4, r5, r6, pc}
    726a:	46c0      	nop			; (mov r8, r8)
    726c:	20000854 	.word	0x20000854
    7270:	00007201 	.word	0x00007201
    7274:	00008f35 	.word	0x00008f35
    7278:	000071f5 	.word	0x000071f5
    727c:	20000290 	.word	0x20000290
    7280:	00008f09 	.word	0x00008f09
    7284:	00008edd 	.word	0x00008edd

00007288 <debugUARTputChar>:
{
	return debugRxBufferSize;
}

void debugUARTputChar(char c)
{
    7288:	b500      	push	{lr}
    728a:	b083      	sub	sp, #12
    728c:	466b      	mov	r3, sp
    728e:	1dd9      	adds	r1, r3, #7
    7290:	7008      	strb	r0, [r1, #0]
	debugTxDone = false;
    7292:	2200      	movs	r2, #0
    7294:	4b06      	ldr	r3, [pc, #24]	; (72b0 <debugUARTputChar+0x28>)
    7296:	701a      	strb	r2, [r3, #0]
	io_write(debug_io, &c, 1);
    7298:	4b06      	ldr	r3, [pc, #24]	; (72b4 <debugUARTputChar+0x2c>)
    729a:	6818      	ldr	r0, [r3, #0]
    729c:	3201      	adds	r2, #1
    729e:	4b06      	ldr	r3, [pc, #24]	; (72b8 <debugUARTputChar+0x30>)
    72a0:	4798      	blx	r3
	while(!debugTxDone);
    72a2:	4a03      	ldr	r2, [pc, #12]	; (72b0 <debugUARTputChar+0x28>)
    72a4:	7813      	ldrb	r3, [r2, #0]
    72a6:	2b00      	cmp	r3, #0
    72a8:	d0fc      	beq.n	72a4 <debugUARTputChar+0x1c>
}
    72aa:	b003      	add	sp, #12
    72ac:	bd00      	pop	{pc}
    72ae:	46c0      	nop			; (mov r8, r8)
    72b0:	20000001 	.word	0x20000001
    72b4:	20000290 	.word	0x20000290
    72b8:	000088dd 	.word	0x000088dd

000072bc <debugUARTputString>:
	io_write(debug_io, str, strlen(str));
	while(!debugTxDone);
}

void debugUARTputString(char *str)
{
    72bc:	b510      	push	{r4, lr}
    72be:	0004      	movs	r4, r0
	debugTxDone = false;
    72c0:	2200      	movs	r2, #0
    72c2:	4b07      	ldr	r3, [pc, #28]	; (72e0 <debugUARTputString+0x24>)
    72c4:	701a      	strb	r2, [r3, #0]
 	io_write(debug_io, str, strlen(str));
    72c6:	4b07      	ldr	r3, [pc, #28]	; (72e4 <debugUARTputString+0x28>)
    72c8:	4798      	blx	r3
    72ca:	b282      	uxth	r2, r0
    72cc:	4b06      	ldr	r3, [pc, #24]	; (72e8 <debugUARTputString+0x2c>)
    72ce:	6818      	ldr	r0, [r3, #0]
    72d0:	0021      	movs	r1, r4
    72d2:	4b06      	ldr	r3, [pc, #24]	; (72ec <debugUARTputString+0x30>)
    72d4:	4798      	blx	r3
	while(!debugTxDone);
    72d6:	4a02      	ldr	r2, [pc, #8]	; (72e0 <debugUARTputString+0x24>)
    72d8:	7813      	ldrb	r3, [r2, #0]
    72da:	2b00      	cmp	r3, #0
    72dc:	d0fc      	beq.n	72d8 <debugUARTputString+0x1c>
}
    72de:	bd10      	pop	{r4, pc}
    72e0:	20000001 	.word	0x20000001
    72e4:	0000dd25 	.word	0x0000dd25
    72e8:	20000290 	.word	0x20000290
    72ec:	000088dd 	.word	0x000088dd

000072f0 <i2c_read_byte>:
#define LIS2DE12_ADDR	0x19

struct io_descriptor *I2C_sens_io;

void i2c_read_byte(uint8_t i2cSlaveAddr, uint8_t regAddr, uint8_t *value)
{
    72f0:	b530      	push	{r4, r5, lr}
    72f2:	b083      	sub	sp, #12
    72f4:	0015      	movs	r5, r2
    72f6:	466b      	mov	r3, sp
    72f8:	71d9      	strb	r1, [r3, #7]
    72fa:	3307      	adds	r3, #7
	io_write(I2C_sens_io, &regAddr, 1);
    72fc:	4c06      	ldr	r4, [pc, #24]	; (7318 <i2c_read_byte+0x28>)
    72fe:	2201      	movs	r2, #1
    7300:	0019      	movs	r1, r3
    7302:	6820      	ldr	r0, [r4, #0]
    7304:	4b05      	ldr	r3, [pc, #20]	; (731c <i2c_read_byte+0x2c>)
    7306:	4798      	blx	r3
	io_read(I2C_sens_io, value, 1);
    7308:	6820      	ldr	r0, [r4, #0]
    730a:	2201      	movs	r2, #1
    730c:	0029      	movs	r1, r5
    730e:	4b04      	ldr	r3, [pc, #16]	; (7320 <i2c_read_byte+0x30>)
    7310:	4798      	blx	r3
}
    7312:	b003      	add	sp, #12
    7314:	bd30      	pop	{r4, r5, pc}
    7316:	46c0      	nop			; (mov r8, r8)
    7318:	200008a4 	.word	0x200008a4
    731c:	000088dd 	.word	0x000088dd
    7320:	00008911 	.word	0x00008911

00007324 <i2c_write_byte>:

i2c_write_byte(uint8_t i2cSlaveAddr,  uint8_t regAddr, uint8_t value)
{
    7324:	b500      	push	{lr}
    7326:	b083      	sub	sp, #12
	uint8_t buff[2];
	buff[0] = regAddr; buff[1] = value;
    7328:	ab01      	add	r3, sp, #4
    732a:	7019      	strb	r1, [r3, #0]
    732c:	705a      	strb	r2, [r3, #1]
	io_write(I2C_sens_io, buff, 2);
    732e:	4a04      	ldr	r2, [pc, #16]	; (7340 <i2c_write_byte+0x1c>)
    7330:	6810      	ldr	r0, [r2, #0]
    7332:	2202      	movs	r2, #2
    7334:	0019      	movs	r1, r3
    7336:	4b03      	ldr	r3, [pc, #12]	; (7344 <i2c_write_byte+0x20>)
    7338:	4798      	blx	r3
}
    733a:	b003      	add	sp, #12
    733c:	bd00      	pop	{pc}
    733e:	46c0      	nop			; (mov r8, r8)
    7340:	200008a4 	.word	0x200008a4
    7344:	000088dd 	.word	0x000088dd

00007348 <LIS2DE12_init>:
	io_write(I2C_sens_io, &regAddr, 1);
	io_read(I2C_sens_io, buff, length);
}

bool LIS2DE12_init(void)
{
    7348:	b510      	push	{r4, lr}
    734a:	b082      	sub	sp, #8
	debugUARTputString("Accelerometer init... ");
    734c:	4818      	ldr	r0, [pc, #96]	; (73b0 <LIS2DE12_init+0x68>)
    734e:	4b19      	ldr	r3, [pc, #100]	; (73b4 <LIS2DE12_init+0x6c>)
    7350:	4798      	blx	r3
	
	//I2C initialization
	I2C_SENS_init();
    7352:	4b19      	ldr	r3, [pc, #100]	; (73b8 <LIS2DE12_init+0x70>)
    7354:	4798      	blx	r3
	i2c_m_sync_get_io_descriptor(&I2C_SENS, &I2C_sens_io);
    7356:	4c19      	ldr	r4, [pc, #100]	; (73bc <LIS2DE12_init+0x74>)
    7358:	4919      	ldr	r1, [pc, #100]	; (73c0 <LIS2DE12_init+0x78>)
    735a:	0020      	movs	r0, r4
    735c:	4b19      	ldr	r3, [pc, #100]	; (73c4 <LIS2DE12_init+0x7c>)
    735e:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_SENS);
    7360:	0020      	movs	r0, r4
    7362:	4b19      	ldr	r3, [pc, #100]	; (73c8 <LIS2DE12_init+0x80>)
    7364:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C_SENS, LIS2DE12_ADDR, I2C_M_SEVEN);
    7366:	2280      	movs	r2, #128	; 0x80
    7368:	0112      	lsls	r2, r2, #4
    736a:	2119      	movs	r1, #25
    736c:	0020      	movs	r0, r4
    736e:	4b17      	ldr	r3, [pc, #92]	; (73cc <LIS2DE12_init+0x84>)
    7370:	4798      	blx	r3

	uint8_t accel_ID;
	i2c_read_byte(LIS2DE12_ADDR, ACCEL_WHO_AM_I, &accel_ID);
    7372:	466b      	mov	r3, sp
    7374:	1ddc      	adds	r4, r3, #7
    7376:	0022      	movs	r2, r4
    7378:	210f      	movs	r1, #15
    737a:	2019      	movs	r0, #25
    737c:	4b14      	ldr	r3, [pc, #80]	; (73d0 <LIS2DE12_init+0x88>)
    737e:	4798      	blx	r3
	
	if (accel_ID != 0x33)	//pre-programmed fixed value 0x33
    7380:	7823      	ldrb	r3, [r4, #0]
    7382:	2b33      	cmp	r3, #51	; 0x33
    7384:	d005      	beq.n	7392 <LIS2DE12_init+0x4a>
	{
		debugUARTputString("FAIL!\r\n");
    7386:	4813      	ldr	r0, [pc, #76]	; (73d4 <LIS2DE12_init+0x8c>)
    7388:	4b0a      	ldr	r3, [pc, #40]	; (73b4 <LIS2DE12_init+0x6c>)
    738a:	4798      	blx	r3
		return false;
    738c:	2000      	movs	r0, #0
	
	i2c_write_byte(LIS2DE12_ADDR, ACCEL_CTRL_REG1, LIS2DE12_ODR_400Hz | 0x0F);	//ODR = 1Hz
	i2c_write_byte(LIS2DE12_ADDR, ACCEL_CTRL_REG6, 0x02);						//INT pin polarity active-low

	return true;
}
    738e:	b002      	add	sp, #8
    7390:	bd10      	pop	{r4, pc}
	debugUARTputString("OK!\r\n");
    7392:	4811      	ldr	r0, [pc, #68]	; (73d8 <LIS2DE12_init+0x90>)
    7394:	4b07      	ldr	r3, [pc, #28]	; (73b4 <LIS2DE12_init+0x6c>)
    7396:	4798      	blx	r3
	i2c_write_byte(LIS2DE12_ADDR, ACCEL_CTRL_REG1, LIS2DE12_ODR_400Hz | 0x0F);	//ODR = 1Hz
    7398:	227f      	movs	r2, #127	; 0x7f
    739a:	2120      	movs	r1, #32
    739c:	2019      	movs	r0, #25
    739e:	4c0f      	ldr	r4, [pc, #60]	; (73dc <LIS2DE12_init+0x94>)
    73a0:	47a0      	blx	r4
	i2c_write_byte(LIS2DE12_ADDR, ACCEL_CTRL_REG6, 0x02);						//INT pin polarity active-low
    73a2:	2202      	movs	r2, #2
    73a4:	2125      	movs	r1, #37	; 0x25
    73a6:	2019      	movs	r0, #25
    73a8:	47a0      	blx	r4
	return true;
    73aa:	2001      	movs	r0, #1
    73ac:	e7ef      	b.n	738e <LIS2DE12_init+0x46>
    73ae:	46c0      	nop			; (mov r8, r8)
    73b0:	0000e534 	.word	0x0000e534
    73b4:	000072bd 	.word	0x000072bd
    73b8:	0000664d 	.word	0x0000664d
    73bc:	20000834 	.word	0x20000834
    73c0:	200008a4 	.word	0x200008a4
    73c4:	000088d3 	.word	0x000088d3
    73c8:	000088b5 	.word	0x000088b5
    73cc:	000088c1 	.word	0x000088c1
    73d0:	000072f1 	.word	0x000072f1
    73d4:	0000e54c 	.word	0x0000e54c
    73d8:	0000e848 	.word	0x0000e848
    73dc:	00007325 	.word	0x00007325

000073e0 <tx_cb_nbiotUART>:
	}
}

static void tx_cb_nbiotUART(const struct usart_async_descriptor *const io_descr)
{
	nbiotTxDone = true;
    73e0:	2201      	movs	r2, #1
    73e2:	4b01      	ldr	r3, [pc, #4]	; (73e8 <tx_cb_nbiotUART+0x8>)
    73e4:	701a      	strb	r2, [r3, #0]
}
    73e6:	4770      	bx	lr
    73e8:	20000002 	.word	0x20000002

000073ec <rx_cb_nbiotUART>:
{
    73ec:	b570      	push	{r4, r5, r6, lr}
    73ee:	b082      	sub	sp, #8
	while (io_read(nbiot_io, &c, 1))
    73f0:	4e0e      	ldr	r6, [pc, #56]	; (742c <rx_cb_nbiotUART+0x40>)
    73f2:	4d0f      	ldr	r5, [pc, #60]	; (7430 <rx_cb_nbiotUART+0x44>)
		nbiotRxBuffer[nbiotRxBufferLast++] = c;			//ucitavanje primljenog karaktera
    73f4:	0034      	movs	r4, r6
	while (io_read(nbiot_io, &c, 1))
    73f6:	e010      	b.n	741a <rx_cb_nbiotUART+0x2e>
		nbiotRxBuffer[nbiotRxBufferLast++] = c;			//ucitavanje primljenog karaktera
    73f8:	7823      	ldrb	r3, [r4, #0]
    73fa:	b2db      	uxtb	r3, r3
    73fc:	1c5a      	adds	r2, r3, #1
    73fe:	b2d2      	uxtb	r2, r2
    7400:	7022      	strb	r2, [r4, #0]
    7402:	466a      	mov	r2, sp
    7404:	79d1      	ldrb	r1, [r2, #7]
    7406:	4a0b      	ldr	r2, [pc, #44]	; (7434 <rx_cb_nbiotUART+0x48>)
    7408:	54d1      	strb	r1, [r2, r3]
		nbiotRxBufferLast &= NBIOT_USART_RX_BUFFER_SIZE - 1;	//povratak na pocetak u slucaju prekoracenja
    740a:	7823      	ldrb	r3, [r4, #0]
    740c:	b2db      	uxtb	r3, r3
    740e:	7023      	strb	r3, [r4, #0]
		if (nbiotRxBufferSize < NBIOT_USART_RX_BUFFER_SIZE)
    7410:	7863      	ldrb	r3, [r4, #1]
			nbiotRxBufferSize++;						//inkrement brojaca primljenih karaktera
    7412:	7863      	ldrb	r3, [r4, #1]
    7414:	3301      	adds	r3, #1
    7416:	b2db      	uxtb	r3, r3
    7418:	7063      	strb	r3, [r4, #1]
	while (io_read(nbiot_io, &c, 1))
    741a:	2201      	movs	r2, #1
    741c:	466b      	mov	r3, sp
    741e:	1dd9      	adds	r1, r3, #7
    7420:	6870      	ldr	r0, [r6, #4]
    7422:	47a8      	blx	r5
    7424:	2800      	cmp	r0, #0
    7426:	d1e7      	bne.n	73f8 <rx_cb_nbiotUART+0xc>
}
    7428:	b002      	add	sp, #8
    742a:	bd70      	pop	{r4, r5, r6, pc}
    742c:	20000298 	.word	0x20000298
    7430:	00008911 	.word	0x00008911
    7434:	20000cec 	.word	0x20000cec

00007438 <nbiotUARTinit>:

void nbiotUARTinit(void)
{
    7438:	b570      	push	{r4, r5, r6, lr}
	usart_async_register_callback(&nbiotUART, USART_ASYNC_RXC_CB, rx_cb_nbiotUART);
    743a:	4c09      	ldr	r4, [pc, #36]	; (7460 <nbiotUARTinit+0x28>)
    743c:	4a09      	ldr	r2, [pc, #36]	; (7464 <nbiotUARTinit+0x2c>)
    743e:	2100      	movs	r1, #0
    7440:	0020      	movs	r0, r4
    7442:	4d09      	ldr	r5, [pc, #36]	; (7468 <nbiotUARTinit+0x30>)
    7444:	47a8      	blx	r5
	usart_async_register_callback(&nbiotUART, USART_ASYNC_TXC_CB, tx_cb_nbiotUART);
    7446:	4a09      	ldr	r2, [pc, #36]	; (746c <nbiotUARTinit+0x34>)
    7448:	2101      	movs	r1, #1
    744a:	0020      	movs	r0, r4
    744c:	47a8      	blx	r5
	usart_async_get_io_descriptor(&nbiotUART, &nbiot_io);
    744e:	4908      	ldr	r1, [pc, #32]	; (7470 <nbiotUARTinit+0x38>)
    7450:	3104      	adds	r1, #4
    7452:	0020      	movs	r0, r4
    7454:	4b07      	ldr	r3, [pc, #28]	; (7474 <nbiotUARTinit+0x3c>)
    7456:	4798      	blx	r3
	usart_async_enable(&nbiotUART);
    7458:	0020      	movs	r0, r4
    745a:	4b07      	ldr	r3, [pc, #28]	; (7478 <nbiotUARTinit+0x40>)
    745c:	4798      	blx	r3
}
    745e:	bd70      	pop	{r4, r5, r6, pc}
    7460:	20000750 	.word	0x20000750
    7464:	000073ed 	.word	0x000073ed
    7468:	00008f35 	.word	0x00008f35
    746c:	000073e1 	.word	0x000073e1
    7470:	20000298 	.word	0x20000298
    7474:	00008f09 	.word	0x00008f09
    7478:	00008edd 	.word	0x00008edd

0000747c <nbiotUARTavailable>:

uint16_t nbiotUARTavailable(void)
{
	return nbiotRxBufferSize;		//ocitavanje broja karaktera u prijemnom baferu
    747c:	4b01      	ldr	r3, [pc, #4]	; (7484 <nbiotUARTavailable+0x8>)
    747e:	7858      	ldrb	r0, [r3, #1]
    7480:	b2c0      	uxtb	r0, r0
}
    7482:	4770      	bx	lr
    7484:	20000298 	.word	0x20000298

00007488 <nbiotUARTputChar>:

void nbiotUARTputChar(char c)
{
    7488:	b500      	push	{lr}
    748a:	b083      	sub	sp, #12
    748c:	466b      	mov	r3, sp
    748e:	1dd9      	adds	r1, r3, #7
    7490:	7008      	strb	r0, [r1, #0]
	nbiotTxDone = false;
    7492:	2200      	movs	r2, #0
    7494:	4b06      	ldr	r3, [pc, #24]	; (74b0 <nbiotUARTputChar+0x28>)
    7496:	701a      	strb	r2, [r3, #0]
	io_write(nbiot_io, &c, 1);
    7498:	4b06      	ldr	r3, [pc, #24]	; (74b4 <nbiotUARTputChar+0x2c>)
    749a:	6858      	ldr	r0, [r3, #4]
    749c:	3201      	adds	r2, #1
    749e:	4b06      	ldr	r3, [pc, #24]	; (74b8 <nbiotUARTputChar+0x30>)
    74a0:	4798      	blx	r3
	while (!nbiotTxDone);
    74a2:	4a03      	ldr	r2, [pc, #12]	; (74b0 <nbiotUARTputChar+0x28>)
    74a4:	7813      	ldrb	r3, [r2, #0]
    74a6:	2b00      	cmp	r3, #0
    74a8:	d0fc      	beq.n	74a4 <nbiotUARTputChar+0x1c>
}
    74aa:	b003      	add	sp, #12
    74ac:	bd00      	pop	{pc}
    74ae:	46c0      	nop			; (mov r8, r8)
    74b0:	20000002 	.word	0x20000002
    74b4:	20000298 	.word	0x20000298
    74b8:	000088dd 	.word	0x000088dd

000074bc <nbiotUARTputString>:

void nbiotUARTputString(char *str)
{
    74bc:	b510      	push	{r4, lr}
    74be:	0004      	movs	r4, r0
	nbiotTxDone = false;
    74c0:	2200      	movs	r2, #0
    74c2:	4b07      	ldr	r3, [pc, #28]	; (74e0 <nbiotUARTputString+0x24>)
    74c4:	701a      	strb	r2, [r3, #0]
 	io_write(nbiot_io, str, strlen(str));
    74c6:	4b07      	ldr	r3, [pc, #28]	; (74e4 <nbiotUARTputString+0x28>)
    74c8:	4798      	blx	r3
    74ca:	b282      	uxth	r2, r0
    74cc:	4b06      	ldr	r3, [pc, #24]	; (74e8 <nbiotUARTputString+0x2c>)
    74ce:	6858      	ldr	r0, [r3, #4]
    74d0:	0021      	movs	r1, r4
    74d2:	4b06      	ldr	r3, [pc, #24]	; (74ec <nbiotUARTputString+0x30>)
    74d4:	4798      	blx	r3
 	while (!nbiotTxDone);
    74d6:	4a02      	ldr	r2, [pc, #8]	; (74e0 <nbiotUARTputString+0x24>)
    74d8:	7813      	ldrb	r3, [r2, #0]
    74da:	2b00      	cmp	r3, #0
    74dc:	d0fc      	beq.n	74d8 <nbiotUARTputString+0x1c>
}
    74de:	bd10      	pop	{r4, pc}
    74e0:	20000002 	.word	0x20000002
    74e4:	0000dd25 	.word	0x0000dd25
    74e8:	20000298 	.word	0x20000298
    74ec:	000088dd 	.word	0x000088dd

000074f0 <nbiotUARTgetChar>:

char nbiotUARTgetChar(void)
{
	char c;

	if (!nbiotRxBufferSize)							//bafer je prazan?
    74f0:	4b0a      	ldr	r3, [pc, #40]	; (751c <nbiotUARTgetChar+0x2c>)
    74f2:	785b      	ldrb	r3, [r3, #1]
		return -1;
    74f4:	20ff      	movs	r0, #255	; 0xff
	if (!nbiotRxBufferSize)							//bafer je prazan?
    74f6:	2b00      	cmp	r3, #0
    74f8:	d100      	bne.n	74fc <nbiotUARTgetChar+0xc>
	c = nbiotRxBuffer[nbiotRxBufferFirst++];				//citanje karaktera iz prijemnog bafera
	nbiotRxBufferFirst &= NBIOT_USART_RX_BUFFER_SIZE - 1;	//povratak na pocetak u slucaju prekoracenja
	nbiotRxBufferSize--;								//dekrement brojaca karaktera u prijemnom baferu

	return c;
}
    74fa:	4770      	bx	lr
	c = nbiotRxBuffer[nbiotRxBufferFirst++];				//citanje karaktera iz prijemnog bafera
    74fc:	4b07      	ldr	r3, [pc, #28]	; (751c <nbiotUARTgetChar+0x2c>)
    74fe:	7a1a      	ldrb	r2, [r3, #8]
    7500:	b2d2      	uxtb	r2, r2
    7502:	1c51      	adds	r1, r2, #1
    7504:	b2c9      	uxtb	r1, r1
    7506:	7219      	strb	r1, [r3, #8]
    7508:	4905      	ldr	r1, [pc, #20]	; (7520 <nbiotUARTgetChar+0x30>)
    750a:	5c88      	ldrb	r0, [r1, r2]
	nbiotRxBufferFirst &= NBIOT_USART_RX_BUFFER_SIZE - 1;	//povratak na pocetak u slucaju prekoracenja
    750c:	7a1a      	ldrb	r2, [r3, #8]
    750e:	b2d2      	uxtb	r2, r2
    7510:	721a      	strb	r2, [r3, #8]
	nbiotRxBufferSize--;								//dekrement brojaca karaktera u prijemnom baferu
    7512:	785a      	ldrb	r2, [r3, #1]
    7514:	3a01      	subs	r2, #1
    7516:	b2d2      	uxtb	r2, r2
    7518:	705a      	strb	r2, [r3, #1]
	return c;
    751a:	e7ee      	b.n	74fa <nbiotUARTgetChar+0xa>
    751c:	20000298 	.word	0x20000298
    7520:	20000cec 	.word	0x20000cec

00007524 <nbiotUARTflush>:
	nbiotUARTputChar(hi < 10 ? hi + '0' : hi + 'A' - 10);
	nbiotUARTputChar(lo < 10 ? lo + '0' : lo + 'A' - 10);
}

void nbiotUARTflush(void)
{
    7524:	b510      	push	{r4, lr}
	usart_async_flush_rx_buffer(&nbiotUART);
    7526:	4804      	ldr	r0, [pc, #16]	; (7538 <nbiotUARTflush+0x14>)
    7528:	4b04      	ldr	r3, [pc, #16]	; (753c <nbiotUARTflush+0x18>)
    752a:	4798      	blx	r3
	nbiotRxBufferSize = nbiotRxBufferFirst = nbiotRxBufferLast = 0;
    752c:	4b04      	ldr	r3, [pc, #16]	; (7540 <nbiotUARTflush+0x1c>)
    752e:	2200      	movs	r2, #0
    7530:	701a      	strb	r2, [r3, #0]
    7532:	721a      	strb	r2, [r3, #8]
    7534:	705a      	strb	r2, [r3, #1]
    7536:	bd10      	pop	{r4, pc}
    7538:	20000750 	.word	0x20000750
    753c:	00008fad 	.word	0x00008fad
    7540:	20000298 	.word	0x20000298

00007544 <printDebugString>:

//function prototypes:
bool getBC68response(uint8_t* command, uint8_t* exp_response, uint8_t* response, uint32_t timeout);

void printDebugString(char debug_str[])
{
    7544:	b510      	push	{r4, lr}
	if (DEBUG_ENABLED)
    7546:	4b07      	ldr	r3, [pc, #28]	; (7564 <printDebugString+0x20>)
    7548:	781b      	ldrb	r3, [r3, #0]
    754a:	2b00      	cmp	r3, #0
    754c:	d005      	beq.n	755a <printDebugString+0x16>
	{
		if (DEBUG_INTERFACE == DEBUG_USB)
    754e:	4b06      	ldr	r3, [pc, #24]	; (7568 <printDebugString+0x24>)
    7550:	781b      	ldrb	r3, [r3, #0]
    7552:	2b00      	cmp	r3, #0
    7554:	d002      	beq.n	755c <printDebugString+0x18>
			usbUARTputString(debug_str);
		else
			debugUARTputString(debug_str);
    7556:	4b05      	ldr	r3, [pc, #20]	; (756c <printDebugString+0x28>)
    7558:	4798      	blx	r3
	}
}
    755a:	bd10      	pop	{r4, pc}
			usbUARTputString(debug_str);
    755c:	4b04      	ldr	r3, [pc, #16]	; (7570 <printDebugString+0x2c>)
    755e:	4798      	blx	r3
    7560:	e7fb      	b.n	755a <printDebugString+0x16>
    7562:	46c0      	nop			; (mov r8, r8)
    7564:	20000003 	.word	0x20000003
    7568:	200002a4 	.word	0x200002a4
    756c:	000072bd 	.word	0x000072bd
    7570:	00008489 	.word	0x00008489

00007574 <printDebugChar>:

void printDebugChar(char c)
{
    7574:	b500      	push	{lr}
    7576:	b083      	sub	sp, #12
	if (DEBUG_ENABLED)
    7578:	4b0a      	ldr	r3, [pc, #40]	; (75a4 <printDebugChar+0x30>)
    757a:	781b      	ldrb	r3, [r3, #0]
    757c:	2b00      	cmp	r3, #0
    757e:	d005      	beq.n	758c <printDebugChar+0x18>
	{
		if (DEBUG_INTERFACE == DEBUG_USB)
    7580:	4b09      	ldr	r3, [pc, #36]	; (75a8 <printDebugChar+0x34>)
    7582:	781b      	ldrb	r3, [r3, #0]
    7584:	2b00      	cmp	r3, #0
    7586:	d003      	beq.n	7590 <printDebugChar+0x1c>
			char str[8];
			sprintf(str, "%c", c);
			usbUARTputString(str);
		}
		else
			debugUARTputChar(c);
    7588:	4b08      	ldr	r3, [pc, #32]	; (75ac <printDebugChar+0x38>)
    758a:	4798      	blx	r3
	}
}
    758c:	b003      	add	sp, #12
    758e:	bd00      	pop	{pc}
			sprintf(str, "%c", c);
    7590:	0002      	movs	r2, r0
    7592:	4907      	ldr	r1, [pc, #28]	; (75b0 <printDebugChar+0x3c>)
    7594:	4668      	mov	r0, sp
    7596:	4b07      	ldr	r3, [pc, #28]	; (75b4 <printDebugChar+0x40>)
    7598:	4798      	blx	r3
			usbUARTputString(str);
    759a:	4668      	mov	r0, sp
    759c:	4b06      	ldr	r3, [pc, #24]	; (75b8 <printDebugChar+0x44>)
    759e:	4798      	blx	r3
    75a0:	e7f4      	b.n	758c <printDebugChar+0x18>
    75a2:	46c0      	nop			; (mov r8, r8)
    75a4:	20000003 	.word	0x20000003
    75a8:	200002a4 	.word	0x200002a4
    75ac:	00007289 	.word	0x00007289
    75b0:	0000e584 	.word	0x0000e584
    75b4:	0000dce1 	.word	0x0000dce1
    75b8:	00008489 	.word	0x00008489

000075bc <BC68_reset>:

void BC68_reset(void)
{
    75bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    75be:	46ce      	mov	lr, r9
    75c0:	b500      	push	{lr}
    75c2:	b08a      	sub	sp, #40	; 0x28
	char str[32];
	char response[2] = {'\0', '\0'};
	
	sprintf(str, "BC68 reset... ");
    75c4:	ac02      	add	r4, sp, #8
    75c6:	4b29      	ldr	r3, [pc, #164]	; (766c <BC68_reset+0xb0>)
    75c8:	0022      	movs	r2, r4
    75ca:	cb23      	ldmia	r3!, {r0, r1, r5}
    75cc:	c223      	stmia	r2!, {r0, r1, r5}
    75ce:	8819      	ldrh	r1, [r3, #0]
    75d0:	8011      	strh	r1, [r2, #0]
    75d2:	789b      	ldrb	r3, [r3, #2]
    75d4:	7093      	strb	r3, [r2, #2]
	printDebugString(str);
    75d6:	0020      	movs	r0, r4
    75d8:	4d25      	ldr	r5, [pc, #148]	; (7670 <BC68_reset+0xb4>)
    75da:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    75dc:	27c0      	movs	r7, #192	; 0xc0
    75de:	05ff      	lsls	r7, r7, #23
    75e0:	2340      	movs	r3, #64	; 0x40
    75e2:	4699      	mov	r9, r3
    75e4:	3358      	adds	r3, #88	; 0x58
    75e6:	464a      	mov	r2, r9
    75e8:	50fa      	str	r2, [r7, r3]
	gpio_set_pin_level(NBIOT_RST, true);
	delay(1000);
    75ea:	20fa      	movs	r0, #250	; 0xfa
    75ec:	0080      	lsls	r0, r0, #2
    75ee:	4e21      	ldr	r6, [pc, #132]	; (7674 <BC68_reset+0xb8>)
    75f0:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    75f2:	2394      	movs	r3, #148	; 0x94
    75f4:	464a      	mov	r2, r9
    75f6:	50fa      	str	r2, [r7, r3]
	gpio_set_pin_level(NBIOT_RST, false);
	delay(1000);
    75f8:	20fa      	movs	r0, #250	; 0xfa
    75fa:	0080      	lsls	r0, r0, #2
    75fc:	47b0      	blx	r6
	sprintf(str, "OK!\r\n");
    75fe:	4b1e      	ldr	r3, [pc, #120]	; (7678 <BC68_reset+0xbc>)
    7600:	681a      	ldr	r2, [r3, #0]
    7602:	9202      	str	r2, [sp, #8]
    7604:	889b      	ldrh	r3, [r3, #4]
    7606:	80a3      	strh	r3, [r4, #4]
	printDebugString(str);
    7608:	0020      	movs	r0, r4
    760a:	47a8      	blx	r5
	
	uint32_t t0 = millis();
    760c:	4b1b      	ldr	r3, [pc, #108]	; (767c <BC68_reset+0xc0>)
    760e:	4798      	blx	r3
    7610:	0005      	movs	r5, r0
	char response[2] = {'\0', '\0'};
    7612:	2300      	movs	r3, #0
    7614:	9300      	str	r3, [sp, #0]
    7616:	2400      	movs	r4, #0
	while(millis() - t0 < 20000)
    7618:	4e18      	ldr	r6, [pc, #96]	; (767c <BC68_reset+0xc0>)
	{	
		if (nbiotUARTavailable())
    761a:	4f19      	ldr	r7, [pc, #100]	; (7680 <BC68_reset+0xc4>)
	while(millis() - t0 < 20000)
    761c:	e001      	b.n	7622 <BC68_reset+0x66>
			response[0] = response[1];
			response[1] = nbiotUARTgetChar();
			printDebugChar(response[1]);
		}
		
		if (response[0] == 'O' && response[1] == 'K')		
    761e:	2c4f      	cmp	r4, #79	; 0x4f
    7620:	d010      	beq.n	7644 <BC68_reset+0x88>
	while(millis() - t0 < 20000)
    7622:	47b0      	blx	r6
    7624:	1b40      	subs	r0, r0, r5
    7626:	4b17      	ldr	r3, [pc, #92]	; (7684 <BC68_reset+0xc8>)
    7628:	4298      	cmp	r0, r3
    762a:	d80e      	bhi.n	764a <BC68_reset+0x8e>
		if (nbiotUARTavailable())
    762c:	47b8      	blx	r7
    762e:	2800      	cmp	r0, #0
    7630:	d0f5      	beq.n	761e <BC68_reset+0x62>
			response[1] = nbiotUARTgetChar();
    7632:	4b15      	ldr	r3, [pc, #84]	; (7688 <BC68_reset+0xcc>)
    7634:	4798      	blx	r3
			printDebugChar(response[1]);
    7636:	9001      	str	r0, [sp, #4]
    7638:	4b14      	ldr	r3, [pc, #80]	; (768c <BC68_reset+0xd0>)
    763a:	4798      	blx	r3
			response[0] = response[1];
    763c:	9c00      	ldr	r4, [sp, #0]
			response[1] = nbiotUARTgetChar();
    763e:	9b01      	ldr	r3, [sp, #4]
    7640:	9300      	str	r3, [sp, #0]
    7642:	e7ec      	b.n	761e <BC68_reset+0x62>
		if (response[0] == 'O' && response[1] == 'K')		
    7644:	9b00      	ldr	r3, [sp, #0]
    7646:	2b4b      	cmp	r3, #75	; 0x4b
    7648:	d1eb      	bne.n	7622 <BC68_reset+0x66>
			break;
	}
	delay(100);
    764a:	2064      	movs	r0, #100	; 0x64
    764c:	4b09      	ldr	r3, [pc, #36]	; (7674 <BC68_reset+0xb8>)
    764e:	4798      	blx	r3
	while (nbiotUARTavailable())
    7650:	4c0b      	ldr	r4, [pc, #44]	; (7680 <BC68_reset+0xc4>)
	{
		char c = nbiotUARTgetChar();
    7652:	4e0d      	ldr	r6, [pc, #52]	; (7688 <BC68_reset+0xcc>)
		printDebugChar(c);
    7654:	4d0d      	ldr	r5, [pc, #52]	; (768c <BC68_reset+0xd0>)
	while (nbiotUARTavailable())
    7656:	e001      	b.n	765c <BC68_reset+0xa0>
		char c = nbiotUARTgetChar();
    7658:	47b0      	blx	r6
		printDebugChar(c);
    765a:	47a8      	blx	r5
	while (nbiotUARTavailable())
    765c:	47a0      	blx	r4
    765e:	2800      	cmp	r0, #0
    7660:	d1fa      	bne.n	7658 <BC68_reset+0x9c>
	}
	//nbiotUARTflush();
}
    7662:	b00a      	add	sp, #40	; 0x28
    7664:	bc04      	pop	{r2}
    7666:	4691      	mov	r9, r2
    7668:	bdf0      	pop	{r4, r5, r6, r7, pc}
    766a:	46c0      	nop			; (mov r8, r8)
    766c:	0000e588 	.word	0x0000e588
    7670:	00007545 	.word	0x00007545
    7674:	0000843d 	.word	0x0000843d
    7678:	0000e848 	.word	0x0000e848
    767c:	00008431 	.word	0x00008431
    7680:	0000747d 	.word	0x0000747d
    7684:	00004e1f 	.word	0x00004e1f
    7688:	000074f1 	.word	0x000074f1
    768c:	00007575 	.word	0x00007575

00007690 <getBC68response>:

	return true;
}

bool getBC68response(uint8_t* command, uint8_t* exp_response, uint8_t* response, uint32_t timeout)
{
    7690:	b5f0      	push	{r4, r5, r6, r7, lr}
    7692:	46de      	mov	lr, fp
    7694:	4657      	mov	r7, sl
    7696:	464e      	mov	r6, r9
    7698:	4645      	mov	r5, r8
    769a:	b5e0      	push	{r5, r6, r7, lr}
    769c:	b08b      	sub	sp, #44	; 0x2c
    769e:	0004      	movs	r4, r0
    76a0:	9101      	str	r1, [sp, #4]
    76a2:	0015      	movs	r5, r2
    76a4:	4699      	mov	r9, r3
	char str[32];
	uint16_t count = 0;
	bool resp_OK = false;

	response[0] = '\0';
    76a6:	2300      	movs	r3, #0
    76a8:	7013      	strb	r3, [r2, #0]
	sprintf(str, "NB-IoT CMD -> ");
    76aa:	a802      	add	r0, sp, #8
    76ac:	4b2f      	ldr	r3, [pc, #188]	; (776c <getBC68response+0xdc>)
    76ae:	0002      	movs	r2, r0
    76b0:	cbc2      	ldmia	r3!, {r1, r6, r7}
    76b2:	c2c2      	stmia	r2!, {r1, r6, r7}
    76b4:	8819      	ldrh	r1, [r3, #0]
    76b6:	8011      	strh	r1, [r2, #0]
    76b8:	789b      	ldrb	r3, [r3, #2]
    76ba:	7093      	strb	r3, [r2, #2]
	printDebugString(str);
    76bc:	4b2c      	ldr	r3, [pc, #176]	; (7770 <getBC68response+0xe0>)
    76be:	4798      	blx	r3
	for (char *tmp = command; *tmp != '\0'; tmp++)
    76c0:	7820      	ldrb	r0, [r4, #0]
    76c2:	2800      	cmp	r0, #0
    76c4:	d00c      	beq.n	76e0 <getBC68response+0x50>
	{
		printDebugChar(*tmp);
    76c6:	4b2b      	ldr	r3, [pc, #172]	; (7774 <getBC68response+0xe4>)
    76c8:	469a      	mov	sl, r3
		nbiotUARTputChar(*tmp);
    76ca:	4f2b      	ldr	r7, [pc, #172]	; (7778 <getBC68response+0xe8>)
		delay(5);
    76cc:	4e2b      	ldr	r6, [pc, #172]	; (777c <getBC68response+0xec>)
		printDebugChar(*tmp);
    76ce:	47d0      	blx	sl
		nbiotUARTputChar(*tmp);
    76d0:	7820      	ldrb	r0, [r4, #0]
    76d2:	47b8      	blx	r7
		delay(5);
    76d4:	2005      	movs	r0, #5
    76d6:	47b0      	blx	r6
	for (char *tmp = command; *tmp != '\0'; tmp++)
    76d8:	3401      	adds	r4, #1
    76da:	7820      	ldrb	r0, [r4, #0]
    76dc:	2800      	cmp	r0, #0
    76de:	d1f6      	bne.n	76ce <getBC68response+0x3e>
	}
	//nbiotUARTputString(command);
	
	uint32_t t0 = millis();
    76e0:	4b27      	ldr	r3, [pc, #156]	; (7780 <getBC68response+0xf0>)
    76e2:	4798      	blx	r3
    76e4:	4680      	mov	r8, r0
	uint16_t count = 0;
    76e6:	2400      	movs	r4, #0
	while ((millis() - t0) < timeout)
    76e8:	4e25      	ldr	r6, [pc, #148]	; (7780 <getBC68response+0xf0>)
	{
		if (nbiotUARTavailable())
    76ea:	4f26      	ldr	r7, [pc, #152]	; (7784 <getBC68response+0xf4>)
	while ((millis() - t0) < timeout)
    76ec:	e005      	b.n	76fa <getBC68response+0x6a>
		{
			response[count] = nbiotUARTgetChar();
			printDebugChar(response[count]);
			response[++count] = '\0';
		}
		if (strstr(response, exp_response))
    76ee:	9901      	ldr	r1, [sp, #4]
    76f0:	0028      	movs	r0, r5
    76f2:	4b25      	ldr	r3, [pc, #148]	; (7788 <getBC68response+0xf8>)
    76f4:	4798      	blx	r3
    76f6:	2800      	cmp	r0, #0
    76f8:	d11f      	bne.n	773a <getBC68response+0xaa>
	while ((millis() - t0) < timeout)
    76fa:	47b0      	blx	r6
    76fc:	4643      	mov	r3, r8
    76fe:	1ac0      	subs	r0, r0, r3
    7700:	4548      	cmp	r0, r9
    7702:	d20f      	bcs.n	7724 <getBC68response+0x94>
		if (nbiotUARTavailable())
    7704:	47b8      	blx	r7
    7706:	2800      	cmp	r0, #0
    7708:	d0f1      	beq.n	76ee <getBC68response+0x5e>
			response[count] = nbiotUARTgetChar();
    770a:	192b      	adds	r3, r5, r4
    770c:	469b      	mov	fp, r3
    770e:	4b1f      	ldr	r3, [pc, #124]	; (778c <getBC68response+0xfc>)
    7710:	4798      	blx	r3
    7712:	465b      	mov	r3, fp
    7714:	7018      	strb	r0, [r3, #0]
			printDebugChar(response[count]);
    7716:	4b17      	ldr	r3, [pc, #92]	; (7774 <getBC68response+0xe4>)
    7718:	4798      	blx	r3
			response[++count] = '\0';
    771a:	3401      	adds	r4, #1
    771c:	b2a4      	uxth	r4, r4
    771e:	2300      	movs	r3, #0
    7720:	552b      	strb	r3, [r5, r4]
    7722:	e7e4      	b.n	76ee <getBC68response+0x5e>
	bool resp_OK = false;
    7724:	2300      	movs	r3, #0
    7726:	9301      	str	r3, [sp, #4]
			resp_OK = true;
			break;
		}
	}

	delay(10);
    7728:	200a      	movs	r0, #10
    772a:	4b14      	ldr	r3, [pc, #80]	; (777c <getBC68response+0xec>)
    772c:	4798      	blx	r3
	while (nbiotUARTavailable())
    772e:	4f15      	ldr	r7, [pc, #84]	; (7784 <getBC68response+0xf4>)
	{
		response[count] = nbiotUARTgetChar();
    7730:	4b16      	ldr	r3, [pc, #88]	; (778c <getBC68response+0xfc>)
    7732:	4699      	mov	r9, r3
		printDebugChar(response[count]);
    7734:	4b0f      	ldr	r3, [pc, #60]	; (7774 <getBC68response+0xe4>)
    7736:	4698      	mov	r8, r3
	while (nbiotUARTavailable())
    7738:	e00a      	b.n	7750 <getBC68response+0xc0>
			resp_OK = true;
    773a:	2301      	movs	r3, #1
    773c:	9301      	str	r3, [sp, #4]
    773e:	e7f3      	b.n	7728 <getBC68response+0x98>
		response[count] = nbiotUARTgetChar();
    7740:	192e      	adds	r6, r5, r4
    7742:	47c8      	blx	r9
    7744:	7030      	strb	r0, [r6, #0]
		printDebugChar(response[count]);
    7746:	47c0      	blx	r8
		response[++count] = '\0';
    7748:	3401      	adds	r4, #1
    774a:	b2a4      	uxth	r4, r4
    774c:	2300      	movs	r3, #0
    774e:	552b      	strb	r3, [r5, r4]
	while (nbiotUARTavailable())
    7750:	47b8      	blx	r7
    7752:	2800      	cmp	r0, #0
    7754:	d1f4      	bne.n	7740 <getBC68response+0xb0>
	}

	nbiotUARTflush();
    7756:	4b0e      	ldr	r3, [pc, #56]	; (7790 <getBC68response+0x100>)
    7758:	4798      	blx	r3
	return resp_OK;
}
    775a:	9801      	ldr	r0, [sp, #4]
    775c:	b00b      	add	sp, #44	; 0x2c
    775e:	bc3c      	pop	{r2, r3, r4, r5}
    7760:	4690      	mov	r8, r2
    7762:	4699      	mov	r9, r3
    7764:	46a2      	mov	sl, r4
    7766:	46ab      	mov	fp, r5
    7768:	bdf0      	pop	{r4, r5, r6, r7, pc}
    776a:	46c0      	nop			; (mov r8, r8)
    776c:	0000e598 	.word	0x0000e598
    7770:	00007545 	.word	0x00007545
    7774:	00007575 	.word	0x00007575
    7778:	00007489 	.word	0x00007489
    777c:	0000843d 	.word	0x0000843d
    7780:	00008431 	.word	0x00008431
    7784:	0000747d 	.word	0x0000747d
    7788:	0000dd33 	.word	0x0000dd33
    778c:	000074f1 	.word	0x000074f1
    7790:	00007525 	.word	0x00007525

00007794 <BC68_openSocket>:
{
    7794:	b570      	push	{r4, r5, r6, lr}
    7796:	b0a0      	sub	sp, #128	; 0x80
    7798:	0006      	movs	r6, r0
    779a:	000c      	movs	r4, r1
	getBC68response("AT+CSQ\r\n", "OK", response, 3000);
    779c:	4b28      	ldr	r3, [pc, #160]	; (7840 <BC68_openSocket+0xac>)
    779e:	466a      	mov	r2, sp
    77a0:	4928      	ldr	r1, [pc, #160]	; (7844 <BC68_openSocket+0xb0>)
    77a2:	4829      	ldr	r0, [pc, #164]	; (7848 <BC68_openSocket+0xb4>)
    77a4:	4d29      	ldr	r5, [pc, #164]	; (784c <BC68_openSocket+0xb8>)
    77a6:	47a8      	blx	r5
	if (protocol == UDP)
    77a8:	2c11      	cmp	r4, #17
    77aa:	d029      	beq.n	7800 <BC68_openSocket+0x6c>
		sprintf(cmd, "AT+NSOCR=STREAM,6,%d,1\r\n", listening_port);
    77ac:	0032      	movs	r2, r6
    77ae:	4928      	ldr	r1, [pc, #160]	; (7850 <BC68_openSocket+0xbc>)
    77b0:	a810      	add	r0, sp, #64	; 0x40
    77b2:	4b28      	ldr	r3, [pc, #160]	; (7854 <BC68_openSocket+0xc0>)
    77b4:	4798      	blx	r3
 	if (!getBC68response(cmd, "OK", response, 3000))
    77b6:	4b22      	ldr	r3, [pc, #136]	; (7840 <BC68_openSocket+0xac>)
    77b8:	466a      	mov	r2, sp
    77ba:	4922      	ldr	r1, [pc, #136]	; (7844 <BC68_openSocket+0xb0>)
    77bc:	a810      	add	r0, sp, #64	; 0x40
    77be:	4c23      	ldr	r4, [pc, #140]	; (784c <BC68_openSocket+0xb8>)
    77c0:	47a0      	blx	r4
    77c2:	2800      	cmp	r0, #0
    77c4:	d022      	beq.n	780c <BC68_openSocket+0x78>
	uint8_t len = strlen(response);
    77c6:	4668      	mov	r0, sp
    77c8:	4b23      	ldr	r3, [pc, #140]	; (7858 <BC68_openSocket+0xc4>)
    77ca:	4798      	blx	r3
    77cc:	b2c0      	uxtb	r0, r0
	while(!(response[i] >= '0' && response[i] < '7') && (i < len))
    77ce:	466b      	mov	r3, sp
    77d0:	781c      	ldrb	r4, [r3, #0]
    77d2:	0023      	movs	r3, r4
    77d4:	3b30      	subs	r3, #48	; 0x30
    77d6:	2b06      	cmp	r3, #6
    77d8:	d92d      	bls.n	7836 <BC68_openSocket+0xa2>
    77da:	2800      	cmp	r0, #0
    77dc:	d029      	beq.n	7832 <BC68_openSocket+0x9e>
    77de:	466b      	mov	r3, sp
    77e0:	1c5a      	adds	r2, r3, #1
    77e2:	2300      	movs	r3, #0
		i++;
    77e4:	3301      	adds	r3, #1
    77e6:	b2db      	uxtb	r3, r3
	while(!(response[i] >= '0' && response[i] < '7') && (i < len))
    77e8:	7814      	ldrb	r4, [r2, #0]
    77ea:	0021      	movs	r1, r4
    77ec:	3930      	subs	r1, #48	; 0x30
    77ee:	2906      	cmp	r1, #6
    77f0:	d922      	bls.n	7838 <BC68_openSocket+0xa4>
    77f2:	3201      	adds	r2, #1
    77f4:	4298      	cmp	r0, r3
    77f6:	d1f5      	bne.n	77e4 <BC68_openSocket+0x50>
		return -1;
    77f8:	24ff      	movs	r4, #255	; 0xff
}
    77fa:	0020      	movs	r0, r4
    77fc:	b020      	add	sp, #128	; 0x80
    77fe:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(cmd, "AT+NSOCR=DGRAM,17,%d,1\r\n", listening_port);
    7800:	0032      	movs	r2, r6
    7802:	4916      	ldr	r1, [pc, #88]	; (785c <BC68_openSocket+0xc8>)
    7804:	a810      	add	r0, sp, #64	; 0x40
    7806:	4b13      	ldr	r3, [pc, #76]	; (7854 <BC68_openSocket+0xc0>)
    7808:	4798      	blx	r3
    780a:	e7d4      	b.n	77b6 <BC68_openSocket+0x22>
 		if (!getBC68response(cmd, "OK", response, 3000))
    780c:	4b0c      	ldr	r3, [pc, #48]	; (7840 <BC68_openSocket+0xac>)
    780e:	466a      	mov	r2, sp
    7810:	490c      	ldr	r1, [pc, #48]	; (7844 <BC68_openSocket+0xb0>)
    7812:	a810      	add	r0, sp, #64	; 0x40
    7814:	4c0d      	ldr	r4, [pc, #52]	; (784c <BC68_openSocket+0xb8>)
    7816:	47a0      	blx	r4
 			return -1;
    7818:	24ff      	movs	r4, #255	; 0xff
 		if (!getBC68response(cmd, "OK", response, 3000))
    781a:	2800      	cmp	r0, #0
    781c:	d0ed      	beq.n	77fa <BC68_openSocket+0x66>
    781e:	e7d2      	b.n	77c6 <BC68_openSocket+0x32>
	sprintf(cmd, "Socket #%c\r\n", socket);
    7820:	0022      	movs	r2, r4
    7822:	490f      	ldr	r1, [pc, #60]	; (7860 <BC68_openSocket+0xcc>)
    7824:	a810      	add	r0, sp, #64	; 0x40
    7826:	4b0b      	ldr	r3, [pc, #44]	; (7854 <BC68_openSocket+0xc0>)
    7828:	4798      	blx	r3
	printDebugString(cmd);
    782a:	a810      	add	r0, sp, #64	; 0x40
    782c:	4b0d      	ldr	r3, [pc, #52]	; (7864 <BC68_openSocket+0xd0>)
    782e:	4798      	blx	r3
	return socket;
    7830:	e7e3      	b.n	77fa <BC68_openSocket+0x66>
		return -1;
    7832:	24ff      	movs	r4, #255	; 0xff
    7834:	e7e1      	b.n	77fa <BC68_openSocket+0x66>
	uint8_t i = 0;
    7836:	2300      	movs	r3, #0
	if (i==len)
    7838:	4298      	cmp	r0, r3
    783a:	d1f1      	bne.n	7820 <BC68_openSocket+0x8c>
		return -1;
    783c:	24ff      	movs	r4, #255	; 0xff
    783e:	e7dc      	b.n	77fa <BC68_openSocket+0x66>
    7840:	00000bb8 	.word	0x00000bb8
    7844:	0000e5a8 	.word	0x0000e5a8
    7848:	0000e5ac 	.word	0x0000e5ac
    784c:	00007691 	.word	0x00007691
    7850:	0000e5d4 	.word	0x0000e5d4
    7854:	0000dce1 	.word	0x0000dce1
    7858:	0000dd25 	.word	0x0000dd25
    785c:	0000e5b8 	.word	0x0000e5b8
    7860:	0000e5f0 	.word	0x0000e5f0
    7864:	00007545 	.word	0x00007545

00007868 <BC68_closeSocket>:
{
    7868:	b510      	push	{r4, lr}
    786a:	b090      	sub	sp, #64	; 0x40
    786c:	0002      	movs	r2, r0
	sprintf(cmd, "AT+NSOCL=%c\r\n", socket);
    786e:	4906      	ldr	r1, [pc, #24]	; (7888 <BC68_closeSocket+0x20>)
    7870:	4668      	mov	r0, sp
    7872:	4b06      	ldr	r3, [pc, #24]	; (788c <BC68_closeSocket+0x24>)
    7874:	4798      	blx	r3
	return getBC68response(cmd, "OK", response, 1000);
    7876:	23fa      	movs	r3, #250	; 0xfa
    7878:	009b      	lsls	r3, r3, #2
    787a:	aa08      	add	r2, sp, #32
    787c:	4904      	ldr	r1, [pc, #16]	; (7890 <BC68_closeSocket+0x28>)
    787e:	4668      	mov	r0, sp
    7880:	4c04      	ldr	r4, [pc, #16]	; (7894 <BC68_closeSocket+0x2c>)
    7882:	47a0      	blx	r4
}
    7884:	b010      	add	sp, #64	; 0x40
    7886:	bd10      	pop	{r4, pc}
    7888:	0000e600 	.word	0x0000e600
    788c:	0000dce1 	.word	0x0000dce1
    7890:	0000e5a8 	.word	0x0000e5a8
    7894:	00007691 	.word	0x00007691

00007898 <BC68_tx>:
{
    7898:	b5f0      	push	{r4, r5, r6, r7, lr}
    789a:	46de      	mov	lr, fp
    789c:	4657      	mov	r7, sl
    789e:	464e      	mov	r6, r9
    78a0:	4645      	mov	r5, r8
    78a2:	b5e0      	push	{r5, r6, r7, lr}
    78a4:	b0cb      	sub	sp, #300	; 0x12c
    78a6:	4698      	mov	r8, r3
    78a8:	ab54      	add	r3, sp, #336	; 0x150
    78aa:	881f      	ldrh	r7, [r3, #0]
    78ac:	ab55      	add	r3, sp, #340	; 0x154
    78ae:	781b      	ldrb	r3, [r3, #0]
    78b0:	469b      	mov	fp, r3
	if (protocol == UDP)
    78b2:	2811      	cmp	r0, #17
    78b4:	d021      	beq.n	78fa <BC68_tx+0x62>
		sprintf(cmd, "AT+NSOCO=1,%s,%d\r\n", SERVER_IP, sending_port);
    78b6:	0013      	movs	r3, r2
    78b8:	000a      	movs	r2, r1
    78ba:	4960      	ldr	r1, [pc, #384]	; (7a3c <BC68_tx+0x1a4>)
    78bc:	a82a      	add	r0, sp, #168	; 0xa8
    78be:	4c60      	ldr	r4, [pc, #384]	; (7a40 <BC68_tx+0x1a8>)
    78c0:	47a0      	blx	r4
		getBC68response(cmd, "OK", response, 5000);
    78c2:	4b60      	ldr	r3, [pc, #384]	; (7a44 <BC68_tx+0x1ac>)
    78c4:	aa0a      	add	r2, sp, #40	; 0x28
    78c6:	4960      	ldr	r1, [pc, #384]	; (7a48 <BC68_tx+0x1b0>)
    78c8:	a82a      	add	r0, sp, #168	; 0xa8
    78ca:	4d60      	ldr	r5, [pc, #384]	; (7a4c <BC68_tx+0x1b4>)
    78cc:	47a8      	blx	r5
		sprintf(cmd, "AT+NSOSD=1,%d,", length);
    78ce:	003a      	movs	r2, r7
    78d0:	495f      	ldr	r1, [pc, #380]	; (7a50 <BC68_tx+0x1b8>)
    78d2:	a82a      	add	r0, sp, #168	; 0xa8
    78d4:	47a0      	blx	r4
	printDebugString(cmd);
    78d6:	a82a      	add	r0, sp, #168	; 0xa8
    78d8:	4b5e      	ldr	r3, [pc, #376]	; (7a54 <BC68_tx+0x1bc>)
    78da:	4798      	blx	r3
	nbiotUARTputString(cmd);
    78dc:	a82a      	add	r0, sp, #168	; 0xa8
    78de:	4b5e      	ldr	r3, [pc, #376]	; (7a58 <BC68_tx+0x1c0>)
    78e0:	4798      	blx	r3
	msg2hex[2] = '\0';
    78e2:	2200      	movs	r2, #0
    78e4:	ab09      	add	r3, sp, #36	; 0x24
    78e6:	709a      	strb	r2, [r3, #2]
	for (int i = 0; i < length; i++)
    78e8:	2f00      	cmp	r7, #0
    78ea:	dd31      	ble.n	7950 <BC68_tx+0xb8>
    78ec:	2400      	movs	r4, #0
		msg2hex[0] = hi > 9 ? hi + 'A' - 10 : hi + '0';
    78ee:	001d      	movs	r5, r3
		printDebugString(msg2hex);
    78f0:	4b58      	ldr	r3, [pc, #352]	; (7a54 <BC68_tx+0x1bc>)
    78f2:	469a      	mov	sl, r3
		nbiotUARTputString(msg2hex);
    78f4:	4b58      	ldr	r3, [pc, #352]	; (7a58 <BC68_tx+0x1c0>)
    78f6:	4699      	mov	r9, r3
    78f8:	e012      	b.n	7920 <BC68_tx+0x88>
		sprintf(cmd, "AT+NSOST=%c,%s,%d,%d,", socket, SERVER_IP, sending_port, length);
    78fa:	9701      	str	r7, [sp, #4]
    78fc:	9200      	str	r2, [sp, #0]
    78fe:	000b      	movs	r3, r1
    7900:	465a      	mov	r2, fp
    7902:	4956      	ldr	r1, [pc, #344]	; (7a5c <BC68_tx+0x1c4>)
    7904:	a82a      	add	r0, sp, #168	; 0xa8
    7906:	4c4e      	ldr	r4, [pc, #312]	; (7a40 <BC68_tx+0x1a8>)
    7908:	47a0      	blx	r4
    790a:	e7e4      	b.n	78d6 <BC68_tx+0x3e>
		msg2hex[1] = lo > 9 ? lo + 'A' - 10 : lo + '0';
    790c:	706a      	strb	r2, [r5, #1]
		printDebugString(msg2hex);
    790e:	0028      	movs	r0, r5
    7910:	47d0      	blx	sl
		nbiotUARTputString(msg2hex);
    7912:	0028      	movs	r0, r5
    7914:	47c8      	blx	r9
		if ((i % 128) == 0)
    7916:	0673      	lsls	r3, r6, #25
    7918:	d016      	beq.n	7948 <BC68_tx+0xb0>
	for (int i = 0; i < length; i++)
    791a:	3401      	adds	r4, #1
    791c:	42bc      	cmp	r4, r7
    791e:	da17      	bge.n	7950 <BC68_tx+0xb8>
		hi = payload[i] >> 4;
    7920:	0026      	movs	r6, r4
    7922:	4643      	mov	r3, r8
    7924:	5d19      	ldrb	r1, [r3, r4]
    7926:	090a      	lsrs	r2, r1, #4
		lo = payload[i] & 0x0f;
    7928:	230f      	movs	r3, #15
    792a:	400b      	ands	r3, r1
		msg2hex[0] = hi > 9 ? hi + 'A' - 10 : hi + '0';
    792c:	0011      	movs	r1, r2
    792e:	3130      	adds	r1, #48	; 0x30
    7930:	2a09      	cmp	r2, #9
    7932:	d901      	bls.n	7938 <BC68_tx+0xa0>
    7934:	3237      	adds	r2, #55	; 0x37
    7936:	0011      	movs	r1, r2
    7938:	7029      	strb	r1, [r5, #0]
		msg2hex[1] = lo > 9 ? lo + 'A' - 10 : lo + '0';
    793a:	001a      	movs	r2, r3
    793c:	3230      	adds	r2, #48	; 0x30
    793e:	2b09      	cmp	r3, #9
    7940:	d9e4      	bls.n	790c <BC68_tx+0x74>
    7942:	3337      	adds	r3, #55	; 0x37
    7944:	001a      	movs	r2, r3
    7946:	e7e1      	b.n	790c <BC68_tx+0x74>
			delay(200);
    7948:	20c8      	movs	r0, #200	; 0xc8
    794a:	4b45      	ldr	r3, [pc, #276]	; (7a60 <BC68_tx+0x1c8>)
    794c:	4798      	blx	r3
    794e:	e7e4      	b.n	791a <BC68_tx+0x82>
	sprintf(cmd, "\r\n");
    7950:	ac2a      	add	r4, sp, #168	; 0xa8
    7952:	4b44      	ldr	r3, [pc, #272]	; (7a64 <BC68_tx+0x1cc>)
    7954:	881a      	ldrh	r2, [r3, #0]
    7956:	8022      	strh	r2, [r4, #0]
    7958:	789b      	ldrb	r3, [r3, #2]
    795a:	70a3      	strb	r3, [r4, #2]
	printDebugString(cmd);
    795c:	0020      	movs	r0, r4
    795e:	4b3d      	ldr	r3, [pc, #244]	; (7a54 <BC68_tx+0x1bc>)
    7960:	4798      	blx	r3
	if (!getBC68response(cmd, "OK", response, 30000))
    7962:	4b41      	ldr	r3, [pc, #260]	; (7a68 <BC68_tx+0x1d0>)
    7964:	aa0a      	add	r2, sp, #40	; 0x28
    7966:	4938      	ldr	r1, [pc, #224]	; (7a48 <BC68_tx+0x1b0>)
    7968:	0020      	movs	r0, r4
    796a:	4c38      	ldr	r4, [pc, #224]	; (7a4c <BC68_tx+0x1b4>)
    796c:	47a0      	blx	r4
    796e:	2800      	cmp	r0, #0
    7970:	d060      	beq.n	7a34 <BC68_tx+0x19c>
	sprintf(nsonmi, "+NSONMI:%c,", socket);
    7972:	465a      	mov	r2, fp
    7974:	493d      	ldr	r1, [pc, #244]	; (7a6c <BC68_tx+0x1d4>)
    7976:	a803      	add	r0, sp, #12
    7978:	4b31      	ldr	r3, [pc, #196]	; (7a40 <BC68_tx+0x1a8>)
    797a:	4798      	blx	r3
	uint32_t t0 = millis();
    797c:	4b3c      	ldr	r3, [pc, #240]	; (7a70 <BC68_tx+0x1d8>)
    797e:	4798      	blx	r3
    7980:	0005      	movs	r5, r0
	msg_index = 0;
    7982:	2300      	movs	r3, #0
    7984:	4699      	mov	r9, r3
	while((millis() - t0 < 30000) && !strstr(response, nsonmi))
    7986:	4c3a      	ldr	r4, [pc, #232]	; (7a70 <BC68_tx+0x1d8>)
    7988:	4e3a      	ldr	r6, [pc, #232]	; (7a74 <BC68_tx+0x1dc>)
		if (nbiotUARTavailable())
    798a:	4f3b      	ldr	r7, [pc, #236]	; (7a78 <BC68_tx+0x1e0>)
	while((millis() - t0 < 30000) && !strstr(response, nsonmi))
    798c:	47a0      	blx	r4
    798e:	1b40      	subs	r0, r0, r5
    7990:	4b3a      	ldr	r3, [pc, #232]	; (7a7c <BC68_tx+0x1e4>)
    7992:	4298      	cmp	r0, r3
    7994:	d81b      	bhi.n	79ce <BC68_tx+0x136>
    7996:	a903      	add	r1, sp, #12
    7998:	a80a      	add	r0, sp, #40	; 0x28
    799a:	47b0      	blx	r6
    799c:	2800      	cmp	r0, #0
    799e:	d116      	bne.n	79ce <BC68_tx+0x136>
		if (nbiotUARTavailable())
    79a0:	47b8      	blx	r7
    79a2:	2800      	cmp	r0, #0
    79a4:	d0f2      	beq.n	798c <BC68_tx+0xf4>
			response[msg_index] = nbiotUARTgetChar();
    79a6:	4b36      	ldr	r3, [pc, #216]	; (7a80 <BC68_tx+0x1e8>)
    79a8:	4798      	blx	r3
    79aa:	466b      	mov	r3, sp
    79ac:	464a      	mov	r2, r9
    79ae:	2128      	movs	r1, #40	; 0x28
    79b0:	185b      	adds	r3, r3, r1
    79b2:	5498      	strb	r0, [r3, r2]
			printDebugChar(response[msg_index]);
    79b4:	4b33      	ldr	r3, [pc, #204]	; (7a84 <BC68_tx+0x1ec>)
    79b6:	4798      	blx	r3
			response[++msg_index] = '\0';
    79b8:	464b      	mov	r3, r9
    79ba:	3301      	adds	r3, #1
    79bc:	b2db      	uxtb	r3, r3
    79be:	4699      	mov	r9, r3
    79c0:	2300      	movs	r3, #0
    79c2:	466a      	mov	r2, sp
    79c4:	4649      	mov	r1, r9
    79c6:	2028      	movs	r0, #40	; 0x28
    79c8:	1812      	adds	r2, r2, r0
    79ca:	5453      	strb	r3, [r2, r1]
    79cc:	e7de      	b.n	798c <BC68_tx+0xf4>
	delay(200);
    79ce:	20c8      	movs	r0, #200	; 0xc8
    79d0:	4b23      	ldr	r3, [pc, #140]	; (7a60 <BC68_tx+0x1c8>)
    79d2:	4798      	blx	r3
	if (!strstr(response, nsonmi))
    79d4:	a903      	add	r1, sp, #12
    79d6:	a80a      	add	r0, sp, #40	; 0x28
    79d8:	4b26      	ldr	r3, [pc, #152]	; (7a74 <BC68_tx+0x1dc>)
    79da:	4798      	blx	r3
    79dc:	2400      	movs	r4, #0
    79de:	2800      	cmp	r0, #0
    79e0:	d004      	beq.n	79ec <BC68_tx+0x154>
		while (nbiotUARTavailable())
    79e2:	4e25      	ldr	r6, [pc, #148]	; (7a78 <BC68_tx+0x1e0>)
			response[msg_index] = nbiotUARTgetChar();
    79e4:	4b26      	ldr	r3, [pc, #152]	; (7a80 <BC68_tx+0x1e8>)
    79e6:	4698      	mov	r8, r3
			printDebugChar(response[msg_index]);
    79e8:	4f26      	ldr	r7, [pc, #152]	; (7a84 <BC68_tx+0x1ec>)
    79ea:	e00c      	b.n	7a06 <BC68_tx+0x16e>
		nbiotUARTflush();
    79ec:	4b26      	ldr	r3, [pc, #152]	; (7a88 <BC68_tx+0x1f0>)
    79ee:	4798      	blx	r3
		return -1;
    79f0:	2001      	movs	r0, #1
    79f2:	4240      	negs	r0, r0
    79f4:	e017      	b.n	7a26 <BC68_tx+0x18e>
			response[msg_index] = nbiotUARTgetChar();
    79f6:	47c0      	blx	r8
    79f8:	ad0a      	add	r5, sp, #40	; 0x28
    79fa:	5528      	strb	r0, [r5, r4]
			printDebugChar(response[msg_index]);
    79fc:	47b8      	blx	r7
			response[++msg_index] = '\0';
    79fe:	3401      	adds	r4, #1
    7a00:	b2e4      	uxtb	r4, r4
    7a02:	2300      	movs	r3, #0
    7a04:	552b      	strb	r3, [r5, r4]
		while (nbiotUARTavailable())
    7a06:	47b0      	blx	r6
    7a08:	2800      	cmp	r0, #0
    7a0a:	d1f4      	bne.n	79f6 <BC68_tx+0x15e>
		int rx_bytes = atoi(response);
    7a0c:	a80a      	add	r0, sp, #40	; 0x28
    7a0e:	4b1f      	ldr	r3, [pc, #124]	; (7a8c <BC68_tx+0x1f4>)
    7a10:	4798      	blx	r3
    7a12:	0004      	movs	r4, r0
		sprintf(cmd, "\r\n# of rx bytes = %d\r\n", rx_bytes);
    7a14:	0002      	movs	r2, r0
    7a16:	491e      	ldr	r1, [pc, #120]	; (7a90 <BC68_tx+0x1f8>)
    7a18:	a82a      	add	r0, sp, #168	; 0xa8
    7a1a:	4b09      	ldr	r3, [pc, #36]	; (7a40 <BC68_tx+0x1a8>)
    7a1c:	4798      	blx	r3
		printDebugString(cmd);
    7a1e:	a82a      	add	r0, sp, #168	; 0xa8
    7a20:	4b0c      	ldr	r3, [pc, #48]	; (7a54 <BC68_tx+0x1bc>)
    7a22:	4798      	blx	r3
		return rx_bytes;	//return number of received bytes
    7a24:	b220      	sxth	r0, r4
}
    7a26:	b04b      	add	sp, #300	; 0x12c
    7a28:	bc3c      	pop	{r2, r3, r4, r5}
    7a2a:	4690      	mov	r8, r2
    7a2c:	4699      	mov	r9, r3
    7a2e:	46a2      	mov	sl, r4
    7a30:	46ab      	mov	fp, r5
    7a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;	//tx error
    7a34:	2001      	movs	r0, #1
    7a36:	4240      	negs	r0, r0
    7a38:	e7f5      	b.n	7a26 <BC68_tx+0x18e>
    7a3a:	46c0      	nop			; (mov r8, r8)
    7a3c:	0000e640 	.word	0x0000e640
    7a40:	0000dce1 	.word	0x0000dce1
    7a44:	00001388 	.word	0x00001388
    7a48:	0000e5a8 	.word	0x0000e5a8
    7a4c:	00007691 	.word	0x00007691
    7a50:	0000e654 	.word	0x0000e654
    7a54:	00007545 	.word	0x00007545
    7a58:	000074bd 	.word	0x000074bd
    7a5c:	0000e628 	.word	0x0000e628
    7a60:	0000843d 	.word	0x0000843d
    7a64:	0000eaa4 	.word	0x0000eaa4
    7a68:	00007530 	.word	0x00007530
    7a6c:	0000e664 	.word	0x0000e664
    7a70:	00008431 	.word	0x00008431
    7a74:	0000dd33 	.word	0x0000dd33
    7a78:	0000747d 	.word	0x0000747d
    7a7c:	0000752f 	.word	0x0000752f
    7a80:	000074f1 	.word	0x000074f1
    7a84:	00007575 	.word	0x00007575
    7a88:	00007525 	.word	0x00007525
    7a8c:	0000dad1 	.word	0x0000dad1
    7a90:	0000e670 	.word	0x0000e670

00007a94 <BC68_rx>:
{
    7a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a96:	46de      	mov	lr, fp
    7a98:	4657      	mov	r7, sl
    7a9a:	464e      	mov	r6, r9
    7a9c:	4645      	mov	r5, r8
    7a9e:	b5e0      	push	{r5, r6, r7, lr}
    7aa0:	b09f      	sub	sp, #124	; 0x7c
    7aa2:	9001      	str	r0, [sp, #4]
    7aa4:	000c      	movs	r4, r1
    7aa6:	9200      	str	r2, [sp, #0]
	getBC68response("AT+CSCON=0\r\n", "OK", response, 3000); //don't signal connection status anymore
    7aa8:	4e49      	ldr	r6, [pc, #292]	; (7bd0 <BC68_rx+0x13c>)
    7aaa:	4d4a      	ldr	r5, [pc, #296]	; (7bd4 <BC68_rx+0x140>)
    7aac:	0033      	movs	r3, r6
    7aae:	aa0a      	add	r2, sp, #40	; 0x28
    7ab0:	0029      	movs	r1, r5
    7ab2:	4849      	ldr	r0, [pc, #292]	; (7bd8 <BC68_rx+0x144>)
    7ab4:	4f49      	ldr	r7, [pc, #292]	; (7bdc <BC68_rx+0x148>)
    7ab6:	47b8      	blx	r7
	getBC68response("AT+CEREG=0\r\n", "OK", response, 3000); //don't signal registration status anymore
    7ab8:	0033      	movs	r3, r6
    7aba:	aa0a      	add	r2, sp, #40	; 0x28
    7abc:	0029      	movs	r1, r5
    7abe:	4848      	ldr	r0, [pc, #288]	; (7be0 <BC68_rx+0x14c>)
    7ac0:	47b8      	blx	r7
	if (rx_bytes <= 0)
    7ac2:	2c00      	cmp	r4, #0
    7ac4:	dd56      	ble.n	7b74 <BC68_rx+0xe0>
	sprintf(cmd, "AT+NSORF=%c,%d\r\n", socket, rx_bytes);
    7ac6:	46a0      	mov	r8, r4
    7ac8:	0023      	movs	r3, r4
    7aca:	9a00      	ldr	r2, [sp, #0]
    7acc:	4945      	ldr	r1, [pc, #276]	; (7be4 <BC68_rx+0x150>)
    7ace:	a816      	add	r0, sp, #88	; 0x58
    7ad0:	4c45      	ldr	r4, [pc, #276]	; (7be8 <BC68_rx+0x154>)
    7ad2:	47a0      	blx	r4
	sprintf(str, "NB-IoT CMD -> ");
    7ad4:	a802      	add	r0, sp, #8
    7ad6:	4b45      	ldr	r3, [pc, #276]	; (7bec <BC68_rx+0x158>)
    7ad8:	0002      	movs	r2, r0
    7ada:	cb32      	ldmia	r3!, {r1, r4, r5}
    7adc:	c232      	stmia	r2!, {r1, r4, r5}
    7ade:	8819      	ldrh	r1, [r3, #0]
    7ae0:	8011      	strh	r1, [r2, #0]
    7ae2:	789b      	ldrb	r3, [r3, #2]
    7ae4:	7093      	strb	r3, [r2, #2]
	printDebugString(str);
    7ae6:	4c42      	ldr	r4, [pc, #264]	; (7bf0 <BC68_rx+0x15c>)
    7ae8:	47a0      	blx	r4
	printDebugString(cmd);
    7aea:	a816      	add	r0, sp, #88	; 0x58
    7aec:	47a0      	blx	r4
	nbiotUARTputString(cmd);
    7aee:	a816      	add	r0, sp, #88	; 0x58
    7af0:	4b40      	ldr	r3, [pc, #256]	; (7bf4 <BC68_rx+0x160>)
    7af2:	4798      	blx	r3
	uint32_t t0 = millis();
    7af4:	4b40      	ldr	r3, [pc, #256]	; (7bf8 <BC68_rx+0x164>)
    7af6:	4798      	blx	r3
    7af8:	0004      	movs	r4, r0
	uint16_t cnt = 0;
    7afa:	2300      	movs	r3, #0
    7afc:	4699      	mov	r9, r3
	while ((millis() - t0) < 5000)
    7afe:	4e3e      	ldr	r6, [pc, #248]	; (7bf8 <BC68_rx+0x164>)
		if (nbiotUARTavailable())
    7b00:	4f3e      	ldr	r7, [pc, #248]	; (7bfc <BC68_rx+0x168>)
	while ((millis() - t0) < 5000)
    7b02:	4d3f      	ldr	r5, [pc, #252]	; (7c00 <BC68_rx+0x16c>)
    7b04:	47b0      	blx	r6
    7b06:	1b00      	subs	r0, r0, r4
    7b08:	42a8      	cmp	r0, r5
    7b0a:	d836      	bhi.n	7b7a <BC68_rx+0xe6>
		if (nbiotUARTavailable())
    7b0c:	47b8      	blx	r7
    7b0e:	2800      	cmp	r0, #0
    7b10:	d0f8      	beq.n	7b04 <BC68_rx+0x70>
			c = nbiotUARTgetChar();
    7b12:	4b3c      	ldr	r3, [pc, #240]	; (7c04 <BC68_rx+0x170>)
    7b14:	4798      	blx	r3
    7b16:	0005      	movs	r5, r0
			printDebugChar(c);
    7b18:	4b3b      	ldr	r3, [pc, #236]	; (7c08 <BC68_rx+0x174>)
    7b1a:	4798      	blx	r3
			if (c == ',')
    7b1c:	2d2c      	cmp	r5, #44	; 0x2c
    7b1e:	d1f0      	bne.n	7b02 <BC68_rx+0x6e>
			if (++cnt == 4)
    7b20:	464b      	mov	r3, r9
    7b22:	3301      	adds	r3, #1
    7b24:	b29b      	uxth	r3, r3
    7b26:	4699      	mov	r9, r3
    7b28:	2b04      	cmp	r3, #4
    7b2a:	d1ea      	bne.n	7b02 <BC68_rx+0x6e>
				even_odd = true;
    7b2c:	2301      	movs	r3, #1
    7b2e:	469b      	mov	fp, r3
    7b30:	2500      	movs	r5, #0
	while (((millis() - t0) < 4000) && (cnt < rx_bytes))
    7b32:	4f31      	ldr	r7, [pc, #196]	; (7bf8 <BC68_rx+0x164>)
		if (nbiotUARTavailable())
    7b34:	4b31      	ldr	r3, [pc, #196]	; (7bfc <BC68_rx+0x168>)
    7b36:	4699      	mov	r9, r3
	while (((millis() - t0) < 4000) && (cnt < rx_bytes))
    7b38:	4e34      	ldr	r6, [pc, #208]	; (7c0c <BC68_rx+0x178>)
    7b3a:	47b8      	blx	r7
    7b3c:	1b00      	subs	r0, r0, r4
    7b3e:	42b0      	cmp	r0, r6
    7b40:	d835      	bhi.n	7bae <BC68_rx+0x11a>
    7b42:	45a8      	cmp	r8, r5
    7b44:	dd33      	ble.n	7bae <BC68_rx+0x11a>
		if (nbiotUARTavailable())
    7b46:	47c8      	blx	r9
    7b48:	2800      	cmp	r0, #0
    7b4a:	d0f6      	beq.n	7b3a <BC68_rx+0xa6>
			c = nbiotUARTgetChar();
    7b4c:	4b2d      	ldr	r3, [pc, #180]	; (7c04 <BC68_rx+0x170>)
    7b4e:	4798      	blx	r3
    7b50:	0006      	movs	r6, r0
    7b52:	9000      	str	r0, [sp, #0]
			printDebugChar(c);
    7b54:	4b2c      	ldr	r3, [pc, #176]	; (7c08 <BC68_rx+0x174>)
    7b56:	4798      	blx	r3
			if (c >= 'A')
    7b58:	9b00      	ldr	r3, [sp, #0]
    7b5a:	2b40      	cmp	r3, #64	; 0x40
    7b5c:	d918      	bls.n	7b90 <BC68_rx+0xfc>
			c = c - 'A' + 10;
    7b5e:	3e37      	subs	r6, #55	; 0x37
    7b60:	b2f6      	uxtb	r6, r6
			if (even_odd)
    7b62:	465b      	mov	r3, fp
    7b64:	2b00      	cmp	r3, #0
    7b66:	d016      	beq.n	7b96 <BC68_rx+0x102>
				tmp = c << 4;
    7b68:	0136      	lsls	r6, r6, #4
    7b6a:	b2f3      	uxtb	r3, r6
    7b6c:	469a      	mov	sl, r3
				even_odd = false;
    7b6e:	2300      	movs	r3, #0
    7b70:	469b      	mov	fp, r3
    7b72:	e7e1      	b.n	7b38 <BC68_rx+0xa4>
		rx_bytes = 256;
    7b74:	2480      	movs	r4, #128	; 0x80
    7b76:	0064      	lsls	r4, r4, #1
    7b78:	e7a5      	b.n	7ac6 <BC68_rx+0x32>
	return false;
    7b7a:	2000      	movs	r0, #0
	if (cnt != 4)
    7b7c:	464b      	mov	r3, r9
    7b7e:	2b04      	cmp	r3, #4
    7b80:	d0d4      	beq.n	7b2c <BC68_rx+0x98>
}
    7b82:	b01f      	add	sp, #124	; 0x7c
    7b84:	bc3c      	pop	{r2, r3, r4, r5}
    7b86:	4690      	mov	r8, r2
    7b88:	4699      	mov	r9, r3
    7b8a:	46a2      	mov	sl, r4
    7b8c:	46ab      	mov	fp, r5
    7b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			c -= '0';
    7b90:	3e30      	subs	r6, #48	; 0x30
    7b92:	b2f6      	uxtb	r6, r6
    7b94:	e7e5      	b.n	7b62 <BC68_rx+0xce>
				tmp |= c;
    7b96:	4653      	mov	r3, sl
    7b98:	431e      	orrs	r6, r3
    7b9a:	b2f3      	uxtb	r3, r6
    7b9c:	469a      	mov	sl, r3
				msg[cnt++] = tmp;
    7b9e:	1c6b      	adds	r3, r5, #1
    7ba0:	9a01      	ldr	r2, [sp, #4]
    7ba2:	4651      	mov	r1, sl
    7ba4:	5551      	strb	r1, [r2, r5]
    7ba6:	b29d      	uxth	r5, r3
				even_odd = true;
    7ba8:	2301      	movs	r3, #1
    7baa:	469b      	mov	fp, r3
    7bac:	e7c4      	b.n	7b38 <BC68_rx+0xa4>
	msg[cnt] = '\0';
    7bae:	2300      	movs	r3, #0
    7bb0:	9a01      	ldr	r2, [sp, #4]
    7bb2:	5553      	strb	r3, [r2, r5]
	delay(100);
    7bb4:	2064      	movs	r0, #100	; 0x64
    7bb6:	4b16      	ldr	r3, [pc, #88]	; (7c10 <BC68_rx+0x17c>)
    7bb8:	4798      	blx	r3
	while (nbiotUARTavailable())
    7bba:	4c10      	ldr	r4, [pc, #64]	; (7bfc <BC68_rx+0x168>)
		char c = nbiotUARTgetChar();
    7bbc:	4e11      	ldr	r6, [pc, #68]	; (7c04 <BC68_rx+0x170>)
		printDebugChar(c);
    7bbe:	4d12      	ldr	r5, [pc, #72]	; (7c08 <BC68_rx+0x174>)
	while (nbiotUARTavailable())
    7bc0:	e001      	b.n	7bc6 <BC68_rx+0x132>
		char c = nbiotUARTgetChar();
    7bc2:	47b0      	blx	r6
		printDebugChar(c);
    7bc4:	47a8      	blx	r5
	while (nbiotUARTavailable())
    7bc6:	47a0      	blx	r4
    7bc8:	2800      	cmp	r0, #0
    7bca:	d1fa      	bne.n	7bc2 <BC68_rx+0x12e>
	return true;
    7bcc:	3001      	adds	r0, #1
    7bce:	e7d8      	b.n	7b82 <BC68_rx+0xee>
    7bd0:	00000bb8 	.word	0x00000bb8
    7bd4:	0000e5a8 	.word	0x0000e5a8
    7bd8:	0000e688 	.word	0x0000e688
    7bdc:	00007691 	.word	0x00007691
    7be0:	0000e698 	.word	0x0000e698
    7be4:	0000e6a8 	.word	0x0000e6a8
    7be8:	0000dce1 	.word	0x0000dce1
    7bec:	0000e598 	.word	0x0000e598
    7bf0:	00007545 	.word	0x00007545
    7bf4:	000074bd 	.word	0x000074bd
    7bf8:	00008431 	.word	0x00008431
    7bfc:	0000747d 	.word	0x0000747d
    7c00:	00001387 	.word	0x00001387
    7c04:	000074f1 	.word	0x000074f1
    7c08:	00007575 	.word	0x00007575
    7c0c:	00000f9f 	.word	0x00000f9f
    7c10:	0000843d 	.word	0x0000843d

00007c14 <BC68_getIMSI>:
{
    7c14:	b530      	push	{r4, r5, lr}
    7c16:	b091      	sub	sp, #68	; 0x44
    7c18:	0004      	movs	r4, r0
	getBC68response("AT+CIMI\r\n", "OK", response, 2000);
    7c1a:	23fa      	movs	r3, #250	; 0xfa
    7c1c:	00db      	lsls	r3, r3, #3
    7c1e:	466a      	mov	r2, sp
    7c20:	490c      	ldr	r1, [pc, #48]	; (7c54 <BC68_getIMSI+0x40>)
    7c22:	480d      	ldr	r0, [pc, #52]	; (7c58 <BC68_getIMSI+0x44>)
    7c24:	4d0d      	ldr	r5, [pc, #52]	; (7c5c <BC68_getIMSI+0x48>)
    7c26:	47a8      	blx	r5
    7c28:	2300      	movs	r3, #0
		IMSI[i] = response[2 + i];
    7c2a:	001a      	movs	r2, r3
    7c2c:	446a      	add	r2, sp
    7c2e:	7892      	ldrb	r2, [r2, #2]
    7c30:	54e2      	strb	r2, [r4, r3]
    7c32:	3301      	adds	r3, #1
	for (i = 0; i < 15; i++)
    7c34:	2b0f      	cmp	r3, #15
    7c36:	d1f8      	bne.n	7c2a <BC68_getIMSI+0x16>
	IMSI[i] = '\0';
    7c38:	2300      	movs	r3, #0
    7c3a:	73e3      	strb	r3, [r4, #15]
	sprintf(response, "IMSI: %s\r\n", IMSI);
    7c3c:	0022      	movs	r2, r4
    7c3e:	4908      	ldr	r1, [pc, #32]	; (7c60 <BC68_getIMSI+0x4c>)
    7c40:	4668      	mov	r0, sp
    7c42:	4b08      	ldr	r3, [pc, #32]	; (7c64 <BC68_getIMSI+0x50>)
    7c44:	4798      	blx	r3
	printDebugString(response);
    7c46:	4668      	mov	r0, sp
    7c48:	4b07      	ldr	r3, [pc, #28]	; (7c68 <BC68_getIMSI+0x54>)
    7c4a:	4798      	blx	r3
}
    7c4c:	2001      	movs	r0, #1
    7c4e:	b011      	add	sp, #68	; 0x44
    7c50:	bd30      	pop	{r4, r5, pc}
    7c52:	46c0      	nop			; (mov r8, r8)
    7c54:	0000e5a8 	.word	0x0000e5a8
    7c58:	0000e6ec 	.word	0x0000e6ec
    7c5c:	00007691 	.word	0x00007691
    7c60:	0000e6f8 	.word	0x0000e6f8
    7c64:	0000dce1 	.word	0x0000dce1
    7c68:	00007545 	.word	0x00007545

00007c6c <BC68_nwkRegister>:
{
    7c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c6e:	46c6      	mov	lr, r8
    7c70:	b500      	push	{lr}
    7c72:	4c52      	ldr	r4, [pc, #328]	; (7dbc <BC68_nwkRegister+0x150>)
    7c74:	44a5      	add	sp, r4
	setLEDfreq(FREQ_10HZ);
    7c76:	2032      	movs	r0, #50	; 0x32
    7c78:	4b51      	ldr	r3, [pc, #324]	; (7dc0 <BC68_nwkRegister+0x154>)
    7c7a:	4798      	blx	r3
	enableLED();
    7c7c:	4b51      	ldr	r3, [pc, #324]	; (7dc4 <BC68_nwkRegister+0x158>)
    7c7e:	4798      	blx	r3
	nbiotUARTflush();
    7c80:	4b51      	ldr	r3, [pc, #324]	; (7dc8 <BC68_nwkRegister+0x15c>)
    7c82:	4798      	blx	r3
	BC68_reset();
    7c84:	4b51      	ldr	r3, [pc, #324]	; (7dcc <BC68_nwkRegister+0x160>)
    7c86:	4798      	blx	r3
	if (!getBC68response("ATI\r\n", "OK", response, 1000))
    7c88:	23fa      	movs	r3, #250	; 0xfa
    7c8a:	009b      	lsls	r3, r3, #2
    7c8c:	aa06      	add	r2, sp, #24
    7c8e:	4950      	ldr	r1, [pc, #320]	; (7dd0 <BC68_nwkRegister+0x164>)
    7c90:	4850      	ldr	r0, [pc, #320]	; (7dd4 <BC68_nwkRegister+0x168>)
    7c92:	4c51      	ldr	r4, [pc, #324]	; (7dd8 <BC68_nwkRegister+0x16c>)
    7c94:	47a0      	blx	r4
    7c96:	1e04      	subs	r4, r0, #0
    7c98:	d106      	bne.n	7ca8 <BC68_nwkRegister+0x3c>
}
    7c9a:	0020      	movs	r0, r4
    7c9c:	2383      	movs	r3, #131	; 0x83
    7c9e:	00db      	lsls	r3, r3, #3
    7ca0:	449d      	add	sp, r3
    7ca2:	bc04      	pop	{r2}
    7ca4:	4690      	mov	r8, r2
    7ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!getBC68response("AT+NCONFIG=AUTOCONNECT,FALSE\r\n", "OK", response, 20000))
    7ca8:	4b4c      	ldr	r3, [pc, #304]	; (7ddc <BC68_nwkRegister+0x170>)
    7caa:	aa06      	add	r2, sp, #24
    7cac:	4948      	ldr	r1, [pc, #288]	; (7dd0 <BC68_nwkRegister+0x164>)
    7cae:	484c      	ldr	r0, [pc, #304]	; (7de0 <BC68_nwkRegister+0x174>)
    7cb0:	4c49      	ldr	r4, [pc, #292]	; (7dd8 <BC68_nwkRegister+0x16c>)
    7cb2:	47a0      	blx	r4
    7cb4:	1e04      	subs	r4, r0, #0
    7cb6:	d0f0      	beq.n	7c9a <BC68_nwkRegister+0x2e>
	if (!getBC68response("AT+CFUN=0\r\n", "OK", response, 20000))
    7cb8:	4b48      	ldr	r3, [pc, #288]	; (7ddc <BC68_nwkRegister+0x170>)
    7cba:	aa06      	add	r2, sp, #24
    7cbc:	4944      	ldr	r1, [pc, #272]	; (7dd0 <BC68_nwkRegister+0x164>)
    7cbe:	4849      	ldr	r0, [pc, #292]	; (7de4 <BC68_nwkRegister+0x178>)
    7cc0:	4c45      	ldr	r4, [pc, #276]	; (7dd8 <BC68_nwkRegister+0x16c>)
    7cc2:	47a0      	blx	r4
    7cc4:	1e04      	subs	r4, r0, #0
    7cc6:	d0e8      	beq.n	7c9a <BC68_nwkRegister+0x2e>
	if (!getBC68response("AT+NBAND=20\r\n", "OK", response, 1000))
    7cc8:	23fa      	movs	r3, #250	; 0xfa
    7cca:	009b      	lsls	r3, r3, #2
    7ccc:	aa06      	add	r2, sp, #24
    7cce:	4940      	ldr	r1, [pc, #256]	; (7dd0 <BC68_nwkRegister+0x164>)
    7cd0:	4845      	ldr	r0, [pc, #276]	; (7de8 <BC68_nwkRegister+0x17c>)
    7cd2:	4c41      	ldr	r4, [pc, #260]	; (7dd8 <BC68_nwkRegister+0x16c>)
    7cd4:	47a0      	blx	r4
    7cd6:	1e04      	subs	r4, r0, #0
    7cd8:	d0df      	beq.n	7c9a <BC68_nwkRegister+0x2e>
	if (!getBC68response("AT+CFUN=1\r\n", "OK", response, 20000))
    7cda:	4b40      	ldr	r3, [pc, #256]	; (7ddc <BC68_nwkRegister+0x170>)
    7cdc:	aa06      	add	r2, sp, #24
    7cde:	493c      	ldr	r1, [pc, #240]	; (7dd0 <BC68_nwkRegister+0x164>)
    7ce0:	4842      	ldr	r0, [pc, #264]	; (7dec <BC68_nwkRegister+0x180>)
    7ce2:	4c3d      	ldr	r4, [pc, #244]	; (7dd8 <BC68_nwkRegister+0x16c>)
    7ce4:	47a0      	blx	r4
    7ce6:	1e04      	subs	r4, r0, #0
    7ce8:	d0d7      	beq.n	7c9a <BC68_nwkRegister+0x2e>
	BC68_getIMSI(IMSI);
    7cea:	a801      	add	r0, sp, #4
    7cec:	4b40      	ldr	r3, [pc, #256]	; (7df0 <BC68_nwkRegister+0x184>)
    7cee:	4798      	blx	r3
	if (!getBC68response("AT+CMEE=1\r\n", "OK", response, 10000))
    7cf0:	4b40      	ldr	r3, [pc, #256]	; (7df4 <BC68_nwkRegister+0x188>)
    7cf2:	aa06      	add	r2, sp, #24
    7cf4:	4936      	ldr	r1, [pc, #216]	; (7dd0 <BC68_nwkRegister+0x164>)
    7cf6:	4840      	ldr	r0, [pc, #256]	; (7df8 <BC68_nwkRegister+0x18c>)
    7cf8:	4c37      	ldr	r4, [pc, #220]	; (7dd8 <BC68_nwkRegister+0x16c>)
    7cfa:	47a0      	blx	r4
    7cfc:	1e04      	subs	r4, r0, #0
    7cfe:	d0cc      	beq.n	7c9a <BC68_nwkRegister+0x2e>
	if (!getBC68response("AT+CEREG=1\r\n", "OK", response, 3000))
    7d00:	4b3e      	ldr	r3, [pc, #248]	; (7dfc <BC68_nwkRegister+0x190>)
    7d02:	aa06      	add	r2, sp, #24
    7d04:	4932      	ldr	r1, [pc, #200]	; (7dd0 <BC68_nwkRegister+0x164>)
    7d06:	483e      	ldr	r0, [pc, #248]	; (7e00 <BC68_nwkRegister+0x194>)
    7d08:	4c33      	ldr	r4, [pc, #204]	; (7dd8 <BC68_nwkRegister+0x16c>)
    7d0a:	47a0      	blx	r4
    7d0c:	1e04      	subs	r4, r0, #0
    7d0e:	d0c4      	beq.n	7c9a <BC68_nwkRegister+0x2e>
	if (!getBC68response("AT+CSCON=1\r\n", "OK", response, 3000))
    7d10:	4b3a      	ldr	r3, [pc, #232]	; (7dfc <BC68_nwkRegister+0x190>)
    7d12:	aa06      	add	r2, sp, #24
    7d14:	492e      	ldr	r1, [pc, #184]	; (7dd0 <BC68_nwkRegister+0x164>)
    7d16:	483b      	ldr	r0, [pc, #236]	; (7e04 <BC68_nwkRegister+0x198>)
    7d18:	4c2f      	ldr	r4, [pc, #188]	; (7dd8 <BC68_nwkRegister+0x16c>)
    7d1a:	47a0      	blx	r4
    7d1c:	1e04      	subs	r4, r0, #0
    7d1e:	d0bc      	beq.n	7c9a <BC68_nwkRegister+0x2e>
	if (!getBC68response("AT+CGDCONT=0,\"IP\",\"iot\"\r\n", "OK", response, 3000))
    7d20:	4b36      	ldr	r3, [pc, #216]	; (7dfc <BC68_nwkRegister+0x190>)
    7d22:	aa06      	add	r2, sp, #24
    7d24:	492a      	ldr	r1, [pc, #168]	; (7dd0 <BC68_nwkRegister+0x164>)
    7d26:	4838      	ldr	r0, [pc, #224]	; (7e08 <BC68_nwkRegister+0x19c>)
    7d28:	4c2b      	ldr	r4, [pc, #172]	; (7dd8 <BC68_nwkRegister+0x16c>)
    7d2a:	47a0      	blx	r4
    7d2c:	1e04      	subs	r4, r0, #0
    7d2e:	d0b4      	beq.n	7c9a <BC68_nwkRegister+0x2e>
	if (!getBC68response("AT+COPS=1,2,\"22005\"\r\n", "+CEREG:1", response, 30000))
    7d30:	4b36      	ldr	r3, [pc, #216]	; (7e0c <BC68_nwkRegister+0x1a0>)
    7d32:	aa06      	add	r2, sp, #24
    7d34:	4936      	ldr	r1, [pc, #216]	; (7e10 <BC68_nwkRegister+0x1a4>)
    7d36:	4837      	ldr	r0, [pc, #220]	; (7e14 <BC68_nwkRegister+0x1a8>)
    7d38:	4c27      	ldr	r4, [pc, #156]	; (7dd8 <BC68_nwkRegister+0x16c>)
    7d3a:	47a0      	blx	r4
    7d3c:	1e04      	subs	r4, r0, #0
    7d3e:	d0ac      	beq.n	7c9a <BC68_nwkRegister+0x2e>
    7d40:	251e      	movs	r5, #30
		reg_ok = getBC68response("AT+CGATT?\r\n", "+CGATT:1", response, 5000);
    7d42:	4b35      	ldr	r3, [pc, #212]	; (7e18 <BC68_nwkRegister+0x1ac>)
    7d44:	4698      	mov	r8, r3
    7d46:	4f35      	ldr	r7, [pc, #212]	; (7e1c <BC68_nwkRegister+0x1b0>)
    7d48:	4e23      	ldr	r6, [pc, #140]	; (7dd8 <BC68_nwkRegister+0x16c>)
    7d4a:	4b35      	ldr	r3, [pc, #212]	; (7e20 <BC68_nwkRegister+0x1b4>)
    7d4c:	aa06      	add	r2, sp, #24
    7d4e:	4641      	mov	r1, r8
    7d50:	0038      	movs	r0, r7
    7d52:	47b0      	blx	r6
    7d54:	1e04      	subs	r4, r0, #0
		if (!reg_ok)
    7d56:	d104      	bne.n	7d62 <BC68_nwkRegister+0xf6>
    7d58:	3d01      	subs	r5, #1
    7d5a:	b2ed      	uxtb	r5, r5
			if (++attempt_cnt == 30)
    7d5c:	2d00      	cmp	r5, #0
    7d5e:	d1f4      	bne.n	7d4a <BC68_nwkRegister+0xde>
    7d60:	e79b      	b.n	7c9a <BC68_nwkRegister+0x2e>
	getBC68response("AT+CSQ\r\n", "OK", response, 3000);
    7d62:	4f26      	ldr	r7, [pc, #152]	; (7dfc <BC68_nwkRegister+0x190>)
    7d64:	4e1a      	ldr	r6, [pc, #104]	; (7dd0 <BC68_nwkRegister+0x164>)
    7d66:	003b      	movs	r3, r7
    7d68:	aa06      	add	r2, sp, #24
    7d6a:	0031      	movs	r1, r6
    7d6c:	482d      	ldr	r0, [pc, #180]	; (7e24 <BC68_nwkRegister+0x1b8>)
    7d6e:	4d1a      	ldr	r5, [pc, #104]	; (7dd8 <BC68_nwkRegister+0x16c>)
    7d70:	47a8      	blx	r5
	getBC68response("AT+CSCON=0\r\n", "OK", response, 3000);
    7d72:	003b      	movs	r3, r7
    7d74:	aa06      	add	r2, sp, #24
    7d76:	0031      	movs	r1, r6
    7d78:	482b      	ldr	r0, [pc, #172]	; (7e28 <BC68_nwkRegister+0x1bc>)
    7d7a:	47a8      	blx	r5
	getBC68response("AT+CEDRXS=3\r\n", "OK", response, 3000);	//disable eDRX
    7d7c:	003b      	movs	r3, r7
    7d7e:	aa06      	add	r2, sp, #24
    7d80:	0031      	movs	r1, r6
    7d82:	482a      	ldr	r0, [pc, #168]	; (7e2c <BC68_nwkRegister+0x1c0>)
    7d84:	47a8      	blx	r5
	getBC68response("AT+CEREG=1\r\n", "OK", response, 3000);
    7d86:	003b      	movs	r3, r7
    7d88:	aa06      	add	r2, sp, #24
    7d8a:	0031      	movs	r1, r6
    7d8c:	481c      	ldr	r0, [pc, #112]	; (7e00 <BC68_nwkRegister+0x194>)
    7d8e:	47a8      	blx	r5
	getBC68response("AT+NPSMR=1\r\n", "OK", response, 3000);
    7d90:	003b      	movs	r3, r7
    7d92:	aa06      	add	r2, sp, #24
    7d94:	0031      	movs	r1, r6
    7d96:	4826      	ldr	r0, [pc, #152]	; (7e30 <BC68_nwkRegister+0x1c4>)
    7d98:	47a8      	blx	r5
	getBC68response("AT+QREGSWT=2\r\n", "OK", response, 3000);
    7d9a:	003b      	movs	r3, r7
    7d9c:	aa06      	add	r2, sp, #24
    7d9e:	0031      	movs	r1, r6
    7da0:	4824      	ldr	r0, [pc, #144]	; (7e34 <BC68_nwkRegister+0x1c8>)
    7da2:	47a8      	blx	r5
	getBC68response("AT+CPSMS=1,,,01000011,10000000\r\n", "OK", response, 3000);
    7da4:	003b      	movs	r3, r7
    7da6:	aa06      	add	r2, sp, #24
    7da8:	0031      	movs	r1, r6
    7daa:	4823      	ldr	r0, [pc, #140]	; (7e38 <BC68_nwkRegister+0x1cc>)
    7dac:	47a8      	blx	r5
	getBC68response("AT+CPSMS?\r\n", "OK", response, 3000);
    7dae:	003b      	movs	r3, r7
    7db0:	aa06      	add	r2, sp, #24
    7db2:	0031      	movs	r1, r6
    7db4:	4821      	ldr	r0, [pc, #132]	; (7e3c <BC68_nwkRegister+0x1d0>)
    7db6:	47a8      	blx	r5
	return true;
    7db8:	e76f      	b.n	7c9a <BC68_nwkRegister+0x2e>
    7dba:	46c0      	nop			; (mov r8, r8)
    7dbc:	fffffbe8 	.word	0xfffffbe8
    7dc0:	00008471 	.word	0x00008471
    7dc4:	00008451 	.word	0x00008451
    7dc8:	00007525 	.word	0x00007525
    7dcc:	000075bd 	.word	0x000075bd
    7dd0:	0000e5a8 	.word	0x0000e5a8
    7dd4:	0000e704 	.word	0x0000e704
    7dd8:	00007691 	.word	0x00007691
    7ddc:	00004e20 	.word	0x00004e20
    7de0:	0000e70c 	.word	0x0000e70c
    7de4:	0000e72c 	.word	0x0000e72c
    7de8:	0000e738 	.word	0x0000e738
    7dec:	0000e748 	.word	0x0000e748
    7df0:	00007c15 	.word	0x00007c15
    7df4:	00002710 	.word	0x00002710
    7df8:	0000e754 	.word	0x0000e754
    7dfc:	00000bb8 	.word	0x00000bb8
    7e00:	0000e760 	.word	0x0000e760
    7e04:	0000e770 	.word	0x0000e770
    7e08:	0000e780 	.word	0x0000e780
    7e0c:	00007530 	.word	0x00007530
    7e10:	0000e79c 	.word	0x0000e79c
    7e14:	0000e7a8 	.word	0x0000e7a8
    7e18:	0000e610 	.word	0x0000e610
    7e1c:	0000e61c 	.word	0x0000e61c
    7e20:	00001388 	.word	0x00001388
    7e24:	0000e5ac 	.word	0x0000e5ac
    7e28:	0000e688 	.word	0x0000e688
    7e2c:	0000e7c0 	.word	0x0000e7c0
    7e30:	0000e7d0 	.word	0x0000e7d0
    7e34:	0000e7e0 	.word	0x0000e7e0
    7e38:	0000e7f0 	.word	0x0000e7f0
    7e3c:	0000e814 	.word	0x0000e814

00007e40 <BC68_connect>:
{
    7e40:	b570      	push	{r4, r5, r6, lr}
    7e42:	b088      	sub	sp, #32
	setLEDfreq(FREQ_10HZ);
    7e44:	2032      	movs	r0, #50	; 0x32
    7e46:	4b11      	ldr	r3, [pc, #68]	; (7e8c <BC68_connect+0x4c>)
    7e48:	4798      	blx	r3
	uint16_t attempts = 0;
    7e4a:	2400      	movs	r4, #0
		connect_ok = BC68_nwkRegister();
    7e4c:	4e10      	ldr	r6, [pc, #64]	; (7e90 <BC68_connect+0x50>)
			sprintf(str, "Attempt %d failed. Retry...\r\n", attempts);
    7e4e:	4d11      	ldr	r5, [pc, #68]	; (7e94 <BC68_connect+0x54>)
    7e50:	e008      	b.n	7e64 <BC68_connect+0x24>
		attempts++;
    7e52:	3401      	adds	r4, #1
    7e54:	b2a4      	uxth	r4, r4
			sprintf(str, "Attempt %d failed. Retry...\r\n", attempts);
    7e56:	0022      	movs	r2, r4
    7e58:	490f      	ldr	r1, [pc, #60]	; (7e98 <BC68_connect+0x58>)
    7e5a:	4668      	mov	r0, sp
    7e5c:	47a8      	blx	r5
			printDebugString(str);
    7e5e:	4668      	mov	r0, sp
    7e60:	4b0e      	ldr	r3, [pc, #56]	; (7e9c <BC68_connect+0x5c>)
    7e62:	4798      	blx	r3
		connect_ok = BC68_nwkRegister();
    7e64:	47b0      	blx	r6
		if (!connect_ok)
    7e66:	2800      	cmp	r0, #0
    7e68:	d0f3      	beq.n	7e52 <BC68_connect+0x12>
	sprintf(str, "Connect OK!\r\n");
    7e6a:	4668      	mov	r0, sp
    7e6c:	4b0c      	ldr	r3, [pc, #48]	; (7ea0 <BC68_connect+0x60>)
    7e6e:	466a      	mov	r2, sp
    7e70:	cb32      	ldmia	r3!, {r1, r4, r5}
    7e72:	c232      	stmia	r2!, {r1, r4, r5}
    7e74:	881b      	ldrh	r3, [r3, #0]
    7e76:	8013      	strh	r3, [r2, #0]
	printDebugString(str);
    7e78:	4b08      	ldr	r3, [pc, #32]	; (7e9c <BC68_connect+0x5c>)
    7e7a:	4798      	blx	r3
	setLEDfreq(FREQ_1HZ);
    7e7c:	20fa      	movs	r0, #250	; 0xfa
    7e7e:	0040      	lsls	r0, r0, #1
    7e80:	4b02      	ldr	r3, [pc, #8]	; (7e8c <BC68_connect+0x4c>)
    7e82:	4798      	blx	r3
}
    7e84:	2001      	movs	r0, #1
    7e86:	b008      	add	sp, #32
    7e88:	bd70      	pop	{r4, r5, r6, pc}
    7e8a:	46c0      	nop			; (mov r8, r8)
    7e8c:	00008471 	.word	0x00008471
    7e90:	00007c6d 	.word	0x00007c6d
    7e94:	0000dce1 	.word	0x0000dce1
    7e98:	0000e820 	.word	0x0000e820
    7e9c:	00007545 	.word	0x00007545
    7ea0:	0000e840 	.word	0x0000e840

00007ea4 <BC68_debugEnable>:
	delay(100);
}

void BC68_debugEnable(bool enabled, BC68_DEBUG_INTERFACE interface)
{
	DEBUG_ENABLED = enabled;
    7ea4:	4b02      	ldr	r3, [pc, #8]	; (7eb0 <BC68_debugEnable+0xc>)
    7ea6:	7018      	strb	r0, [r3, #0]
	DEBUG_INTERFACE = interface;
    7ea8:	4b02      	ldr	r3, [pc, #8]	; (7eb4 <BC68_debugEnable+0x10>)
    7eaa:	7019      	strb	r1, [r3, #0]
    7eac:	4770      	bx	lr
    7eae:	46c0      	nop			; (mov r8, r8)
    7eb0:	20000003 	.word	0x20000003
    7eb4:	200002a4 	.word	0x200002a4

00007eb8 <SHTC3_sendCommand_CTD>:
float toPercent();																			// Returns the floating point value of RH in % RH

struct io_descriptor *I2C_sens_io;

SHTC3_Status_TypeDef 	SHTC3_sendCommand_CTD(SHTC3_Commands_TypeDef cmd)
{
    7eb8:	b500      	push	{lr}
    7eba:	b083      	sub	sp, #12
	uint8_t buff[2];
	buff[0] = (((uint16_t)cmd) >>     8);
    7ebc:	a901      	add	r1, sp, #4
    7ebe:	0a03      	lsrs	r3, r0, #8
    7ec0:	700b      	strb	r3, [r1, #0]
	buff[1] = (((uint16_t)cmd) & 0x00FF);
    7ec2:	7048      	strb	r0, [r1, #1]
	io_write(I2C_sens_io, buff, 2);
    7ec4:	4b03      	ldr	r3, [pc, #12]	; (7ed4 <SHTC3_sendCommand_CTD+0x1c>)
    7ec6:	6818      	ldr	r0, [r3, #0]
    7ec8:	2202      	movs	r2, #2
    7eca:	4b03      	ldr	r3, [pc, #12]	; (7ed8 <SHTC3_sendCommand_CTD+0x20>)
    7ecc:	4798      	blx	r3

	return SHTC3_Status_Nominal;
}
    7ece:	2000      	movs	r0, #0
    7ed0:	b003      	add	sp, #12
    7ed2:	bd00      	pop	{pc}
    7ed4:	200008a4 	.word	0x200008a4
    7ed8:	000088dd 	.word	0x000088dd

00007edc <SHTC3_abortUpdate>:
	return SHTC3_sendCommand_CTD((SHTC3_Commands_TypeDef)cmd);
}

SHTC3_Status_TypeDef SHTC3_abortUpdate(SHTC3_Status_TypeDef status)		// Sets the values to a known error state
{
	passRHcrc = false;
    7edc:	2300      	movs	r3, #0
    7ede:	4a07      	ldr	r2, [pc, #28]	; (7efc <SHTC3_abortUpdate+0x20>)
    7ee0:	7013      	strb	r3, [r2, #0]
	passTcrc = false;
    7ee2:	4a07      	ldr	r2, [pc, #28]	; (7f00 <SHTC3_abortUpdate+0x24>)
    7ee4:	7013      	strb	r3, [r2, #0]
	passIDcrc = false;
    7ee6:	4a07      	ldr	r2, [pc, #28]	; (7f04 <SHTC3_abortUpdate+0x28>)
    7ee8:	7013      	strb	r3, [r2, #0]

	RH = 0x00;
    7eea:	4a07      	ldr	r2, [pc, #28]	; (7f08 <SHTC3_abortUpdate+0x2c>)
    7eec:	8013      	strh	r3, [r2, #0]
	T = 0x00;
    7eee:	4a07      	ldr	r2, [pc, #28]	; (7f0c <SHTC3_abortUpdate+0x30>)
    7ef0:	8013      	strh	r3, [r2, #0]
	ID = 0x00;
    7ef2:	4a07      	ldr	r2, [pc, #28]	; (7f10 <SHTC3_abortUpdate+0x34>)
    7ef4:	8013      	strh	r3, [r2, #0]
	return SHTC3_exitOp(status);
}

SHTC3_Status_TypeDef SHTC3_exitOp(SHTC3_Status_TypeDef status)
{
	lastStatus = status;
    7ef6:	4b07      	ldr	r3, [pc, #28]	; (7f14 <SHTC3_abortUpdate+0x38>)
    7ef8:	7018      	strb	r0, [r3, #0]
}
    7efa:	4770      	bx	lr
    7efc:	200010f6 	.word	0x200010f6
    7f00:	200010fb 	.word	0x200010fb
    7f04:	200010ec 	.word	0x200010ec
    7f08:	200010f2 	.word	0x200010f2
    7f0c:	200010f4 	.word	0x200010f4
    7f10:	200010ee 	.word	0x200010ee
    7f14:	200010ed 	.word	0x200010ed

00007f18 <SHTC3_sleep>:

	return SHTC3_endProcess();		
}

SHTC3_Status_TypeDef	SHTC3_sleep(bool hold)
{
    7f18:	b510      	push	{r4, lr}
	_isAsleep = true;						// It is fail-safe to always assume the sensor is asleep (whether or not the sleep command actually took effect)
    7f1a:	2201      	movs	r2, #1
    7f1c:	4b04      	ldr	r3, [pc, #16]	; (7f30 <SHTC3_sleep+0x18>)
    7f1e:	701a      	strb	r2, [r3, #0]
	if(hold)
    7f20:	2800      	cmp	r0, #0
    7f22:	d001      	beq.n	7f28 <SHTC3_sleep+0x10>
		_staySleeping = true;
    7f24:	4b03      	ldr	r3, [pc, #12]	; (7f34 <SHTC3_sleep+0x1c>)
    7f26:	701a      	strb	r2, [r3, #0]
	return SHTC3_sendCommand_CTD(SHTC3_CMD_SLEEP);
    7f28:	4803      	ldr	r0, [pc, #12]	; (7f38 <SHTC3_sleep+0x20>)
    7f2a:	4b04      	ldr	r3, [pc, #16]	; (7f3c <SHTC3_sleep+0x24>)
    7f2c:	4798      	blx	r3
}
    7f2e:	bd10      	pop	{r4, pc}
    7f30:	200010fa 	.word	0x200010fa
    7f34:	200010f7 	.word	0x200010f7
    7f38:	0000b098 	.word	0x0000b098
    7f3c:	00007eb9 	.word	0x00007eb9

00007f40 <SHTC3_endProcess>:
{
    7f40:	b510      	push	{r4, lr}
	_inProcess = false;
    7f42:	2200      	movs	r2, #0
    7f44:	4b08      	ldr	r3, [pc, #32]	; (7f68 <SHTC3_endProcess+0x28>)
    7f46:	701a      	strb	r2, [r3, #0]
	if(_staySleeping)
    7f48:	4b08      	ldr	r3, [pc, #32]	; (7f6c <SHTC3_endProcess+0x2c>)
    7f4a:	781b      	ldrb	r3, [r3, #0]
    7f4c:	2b00      	cmp	r3, #0
    7f4e:	d104      	bne.n	7f5a <SHTC3_endProcess+0x1a>
		_isAsleep = true;
    7f50:	2201      	movs	r2, #1
    7f52:	4b07      	ldr	r3, [pc, #28]	; (7f70 <SHTC3_endProcess+0x30>)
    7f54:	701a      	strb	r2, [r3, #0]
}
    7f56:	2000      	movs	r0, #0
    7f58:	bd10      	pop	{r4, pc}
		retval = SHTC3_sleep(false);
    7f5a:	2000      	movs	r0, #0
    7f5c:	4b05      	ldr	r3, [pc, #20]	; (7f74 <SHTC3_endProcess+0x34>)
    7f5e:	4798      	blx	r3
	if(retval == SHTC3_Status_Nominal)
    7f60:	2800      	cmp	r0, #0
    7f62:	d1f8      	bne.n	7f56 <SHTC3_endProcess+0x16>
    7f64:	e7f4      	b.n	7f50 <SHTC3_endProcess+0x10>
    7f66:	46c0      	nop			; (mov r8, r8)
    7f68:	200010f0 	.word	0x200010f0
    7f6c:	200010f7 	.word	0x200010f7
    7f70:	200010fa 	.word	0x200010fa
    7f74:	00007f19 	.word	0x00007f19

00007f78 <SHTC3_wake>:

SHTC3_Status_TypeDef	SHTC3_wake(bool hold)
{
    7f78:	b510      	push	{r4, lr}
    7f7a:	0004      	movs	r4, r0
	SHTC3_Status_TypeDef retval = SHTC3_sendCommand_CTD(SHTC3_CMD_WAKE);
    7f7c:	4808      	ldr	r0, [pc, #32]	; (7fa0 <SHTC3_wake+0x28>)
    7f7e:	4b09      	ldr	r3, [pc, #36]	; (7fa4 <SHTC3_wake+0x2c>)
    7f80:	4798      	blx	r3
	if(retval == SHTC3_Status_Nominal)
    7f82:	2800      	cmp	r0, #0
    7f84:	d102      	bne.n	7f8c <SHTC3_wake+0x14>
		_isAsleep = false;					// Only when the wake command was sent successfully can you assume the sensor is awake
    7f86:	2200      	movs	r2, #0
    7f88:	4b07      	ldr	r3, [pc, #28]	; (7fa8 <SHTC3_wake+0x30>)
    7f8a:	701a      	strb	r2, [r3, #0]
	if(hold)
    7f8c:	2c00      	cmp	r4, #0
    7f8e:	d002      	beq.n	7f96 <SHTC3_wake+0x1e>
		_staySleeping = false;
    7f90:	2200      	movs	r2, #0
    7f92:	4b06      	ldr	r3, [pc, #24]	; (7fac <SHTC3_wake+0x34>)
    7f94:	701a      	strb	r2, [r3, #0]
	delay_us(240);
    7f96:	20f0      	movs	r0, #240	; 0xf0
    7f98:	4b05      	ldr	r3, [pc, #20]	; (7fb0 <SHTC3_wake+0x38>)
    7f9a:	4798      	blx	r3
	SHTC3_Status_Nominal;
}
    7f9c:	bd10      	pop	{r4, pc}
    7f9e:	46c0      	nop			; (mov r8, r8)
    7fa0:	00003517 	.word	0x00003517
    7fa4:	00007eb9 	.word	0x00007eb9
    7fa8:	200010fa 	.word	0x200010fa
    7fac:	200010f7 	.word	0x200010f7
    7fb0:	000087f5 	.word	0x000087f5

00007fb4 <SHTC3_startProcess>:
{
    7fb4:	b510      	push	{r4, lr}
	_inProcess = true;
    7fb6:	2201      	movs	r2, #1
    7fb8:	4b08      	ldr	r3, [pc, #32]	; (7fdc <SHTC3_startProcess+0x28>)
    7fba:	701a      	strb	r2, [r3, #0]
	if(_isAsleep)
    7fbc:	4b08      	ldr	r3, [pc, #32]	; (7fe0 <SHTC3_startProcess+0x2c>)
    7fbe:	781b      	ldrb	r3, [r3, #0]
    7fc0:	2b00      	cmp	r3, #0
    7fc2:	d104      	bne.n	7fce <SHTC3_startProcess+0x1a>
		_isAsleep = false;
    7fc4:	2200      	movs	r2, #0
    7fc6:	4b06      	ldr	r3, [pc, #24]	; (7fe0 <SHTC3_startProcess+0x2c>)
    7fc8:	701a      	strb	r2, [r3, #0]
}
    7fca:	2000      	movs	r0, #0
    7fcc:	bd10      	pop	{r4, pc}
		retval = SHTC3_wake(false);
    7fce:	2000      	movs	r0, #0
    7fd0:	4b04      	ldr	r3, [pc, #16]	; (7fe4 <SHTC3_startProcess+0x30>)
    7fd2:	4798      	blx	r3
	if(retval == SHTC3_Status_Nominal)
    7fd4:	2800      	cmp	r0, #0
    7fd6:	d1f8      	bne.n	7fca <SHTC3_startProcess+0x16>
    7fd8:	e7f4      	b.n	7fc4 <SHTC3_startProcess+0x10>
    7fda:	46c0      	nop			; (mov r8, r8)
    7fdc:	200010f0 	.word	0x200010f0
    7fe0:	200010fa 	.word	0x200010fa
    7fe4:	00007f79 	.word	0x00007f79

00007fe8 <SHTC3_checkCRC>:

	return SHTC3_Status_Nominal;
}

SHTC3_Status_TypeDef SHTC3_checkCRC(uint16_t packet, uint8_t cs)
{
    7fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fea:	b083      	sub	sp, #12
	uint8_t data[2] = {((packet & 0xFF00) >> 8), ((packet & 0x00FF) >> 0)};
    7fec:	ab01      	add	r3, sp, #4
    7fee:	0a02      	lsrs	r2, r0, #8
    7ff0:	701a      	strb	r2, [r3, #0]
    7ff2:	7058      	strb	r0, [r3, #1]
    7ff4:	2600      	movs	r6, #0
	uint8_t crc = 0xFF;
    7ff6:	23ff      	movs	r3, #255	; 0xff
	uint8_t poly = 0x31;
  
	for(uint8_t indi = 0; indi < 2; indi++)
	{
		crc ^= data[indi];
    7ff8:	ac01      	add	r4, sp, #4
    7ffa:	2008      	movs	r0, #8

		for(uint8_t indj = 0; indj < 8; indj++)
		{
		    if(crc & 0x80)
		      crc = (uint8_t)((crc << 1) ^ poly);
    7ffc:	2731      	movs	r7, #49	; 0x31
    7ffe:	e00f      	b.n	8020 <SHTC3_checkCRC+0x38>
    8000:	005b      	lsls	r3, r3, #1
    8002:	407b      	eors	r3, r7
    8004:	b2db      	uxtb	r3, r3
    8006:	3a01      	subs	r2, #1
    8008:	b2d2      	uxtb	r2, r2
		for(uint8_t indj = 0; indj < 8; indj++)
    800a:	2a00      	cmp	r2, #0
    800c:	d005      	beq.n	801a <SHTC3_checkCRC+0x32>
		    if(crc & 0x80)
    800e:	b25d      	sxtb	r5, r3
    8010:	2d00      	cmp	r5, #0
    8012:	dbf5      	blt.n	8000 <SHTC3_checkCRC+0x18>
		    else
		      crc <<= 1;
    8014:	005b      	lsls	r3, r3, #1
    8016:	b2db      	uxtb	r3, r3
    8018:	e7f5      	b.n	8006 <SHTC3_checkCRC+0x1e>
    801a:	3601      	adds	r6, #1
	for(uint8_t indi = 0; indi < 2; indi++)
    801c:	2e02      	cmp	r6, #2
    801e:	d003      	beq.n	8028 <SHTC3_checkCRC+0x40>
		crc ^= data[indi];
    8020:	5d32      	ldrb	r2, [r6, r4]
    8022:	4053      	eors	r3, r2
    8024:	0002      	movs	r2, r0
    8026:	e7f2      	b.n	800e <SHTC3_checkCRC+0x26>
		}
	}

	if(cs ^ crc){ return SHTC3_exitOp(SHTC3_Status_CRC_Fail); }
    8028:	428b      	cmp	r3, r1
    802a:	d005      	beq.n	8038 <SHTC3_checkCRC+0x50>
	lastStatus = status;
    802c:	3202      	adds	r2, #2
    802e:	4b05      	ldr	r3, [pc, #20]	; (8044 <SHTC3_checkCRC+0x5c>)
    8030:	701a      	strb	r2, [r3, #0]
	if(cs ^ crc){ return SHTC3_exitOp(SHTC3_Status_CRC_Fail); }
    8032:	2002      	movs	r0, #2
	return SHTC3_exitOp(SHTC3_Status_Nominal);
}
    8034:	b003      	add	sp, #12
    8036:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lastStatus = status;
    8038:	2200      	movs	r2, #0
    803a:	4b02      	ldr	r3, [pc, #8]	; (8044 <SHTC3_checkCRC+0x5c>)
    803c:	701a      	strb	r2, [r3, #0]
	return SHTC3_exitOp(SHTC3_Status_Nominal);
    803e:	2000      	movs	r0, #0
    8040:	e7f8      	b.n	8034 <SHTC3_checkCRC+0x4c>
    8042:	46c0      	nop			; (mov r8, r8)
    8044:	200010ed 	.word	0x200010ed

00008048 <SHTC3_checkID>:
{
    8048:	b510      	push	{r4, lr}
    804a:	b082      	sub	sp, #8
	retval = SHTC3_startProcess();																	// There will be several commands sent before returning control to the user
    804c:	4b1f      	ldr	r3, [pc, #124]	; (80cc <SHTC3_checkID+0x84>)
    804e:	4798      	blx	r3
	if (retval != SHTC3_Status_Nominal)
    8050:	2800      	cmp	r0, #0
    8052:	d12e      	bne.n	80b2 <SHTC3_checkID+0x6a>
	retval = SHTC3_wake(false);
    8054:	2000      	movs	r0, #0
    8056:	4b1e      	ldr	r3, [pc, #120]	; (80d0 <SHTC3_checkID+0x88>)
    8058:	4798      	blx	r3
    805a:	1e03      	subs	r3, r0, #0
	if(retval != SHTC3_Status_Nominal){ return SHTC3_exitOp(retval); }
    805c:	d12f      	bne.n	80be <SHTC3_checkID+0x76>
	retval = SHTC3_sendCommand_CTD(SHTC3_CMD_READ_ID);
    805e:	481d      	ldr	r0, [pc, #116]	; (80d4 <SHTC3_checkID+0x8c>)
    8060:	4b1d      	ldr	r3, [pc, #116]	; (80d8 <SHTC3_checkID+0x90>)
    8062:	4798      	blx	r3
		return SHTC3_Status_Error;
    8064:	2301      	movs	r3, #1
	if (retval != SHTC3_Status_Nominal)
    8066:	2800      	cmp	r0, #0
    8068:	d126      	bne.n	80b8 <SHTC3_checkID+0x70>
	io_read(I2C_sens_io, buff, numBytesRequest);
    806a:	ac01      	add	r4, sp, #4
    806c:	4b1b      	ldr	r3, [pc, #108]	; (80dc <SHTC3_checkID+0x94>)
    806e:	6818      	ldr	r0, [r3, #0]
    8070:	2203      	movs	r2, #3
    8072:	0021      	movs	r1, r4
    8074:	4b1a      	ldr	r3, [pc, #104]	; (80e0 <SHTC3_checkID+0x98>)
    8076:	4798      	blx	r3
	uint8_t IDcs = buff[2];
    8078:	78a1      	ldrb	r1, [r4, #2]
	ID = (((uint16_t)IDhb << 8) | ((uint16_t)IDlb));
    807a:	7823      	ldrb	r3, [r4, #0]
    807c:	021b      	lsls	r3, r3, #8
    807e:	7860      	ldrb	r0, [r4, #1]
    8080:	4318      	orrs	r0, r3
    8082:	4b18      	ldr	r3, [pc, #96]	; (80e4 <SHTC3_checkID+0x9c>)
    8084:	8018      	strh	r0, [r3, #0]
	passIDcrc = false;
    8086:	2200      	movs	r2, #0
    8088:	4b17      	ldr	r3, [pc, #92]	; (80e8 <SHTC3_checkID+0xa0>)
    808a:	701a      	strb	r2, [r3, #0]
	if(SHTC3_checkCRC(ID, IDcs) == SHTC3_Status_Nominal){ passIDcrc = true; }
    808c:	4b17      	ldr	r3, [pc, #92]	; (80ec <SHTC3_checkID+0xa4>)
    808e:	4798      	blx	r3
    8090:	2800      	cmp	r0, #0
    8092:	d102      	bne.n	809a <SHTC3_checkID+0x52>
    8094:	2201      	movs	r2, #1
    8096:	4b14      	ldr	r3, [pc, #80]	; (80e8 <SHTC3_checkID+0xa0>)
    8098:	701a      	strb	r2, [r3, #0]
	if((ID & 0b0000100000111111) != 0b0000100000000111)									// Checking the form of the ID
    809a:	4b12      	ldr	r3, [pc, #72]	; (80e4 <SHTC3_checkID+0x9c>)
    809c:	881b      	ldrh	r3, [r3, #0]
    809e:	4a14      	ldr	r2, [pc, #80]	; (80f0 <SHTC3_checkID+0xa8>)
    80a0:	4914      	ldr	r1, [pc, #80]	; (80f4 <SHTC3_checkID+0xac>)
    80a2:	400b      	ands	r3, r1
    80a4:	4293      	cmp	r3, r2
    80a6:	d00d      	beq.n	80c4 <SHTC3_checkID+0x7c>
	lastStatus = status;
    80a8:	2203      	movs	r2, #3
    80aa:	4b13      	ldr	r3, [pc, #76]	; (80f8 <SHTC3_checkID+0xb0>)
    80ac:	701a      	strb	r2, [r3, #0]
		return SHTC3_exitOp(SHTC3_Status_ID_Fail); 						// to identify an SHTC3				
    80ae:	2303      	movs	r3, #3
    80b0:	e002      	b.n	80b8 <SHTC3_checkID+0x70>
		return SHTC3_abortUpdate(retval);
    80b2:	4b12      	ldr	r3, [pc, #72]	; (80fc <SHTC3_checkID+0xb4>)
    80b4:	4798      	blx	r3
    80b6:	0003      	movs	r3, r0
}
    80b8:	0018      	movs	r0, r3
    80ba:	b002      	add	sp, #8
    80bc:	bd10      	pop	{r4, pc}
	lastStatus = status;
    80be:	4a0e      	ldr	r2, [pc, #56]	; (80f8 <SHTC3_checkID+0xb0>)
    80c0:	7010      	strb	r0, [r2, #0]
	if(retval != SHTC3_Status_Nominal){ return SHTC3_exitOp(retval); }
    80c2:	e7f9      	b.n	80b8 <SHTC3_checkID+0x70>
	return SHTC3_endProcess();		
    80c4:	4b0e      	ldr	r3, [pc, #56]	; (8100 <SHTC3_checkID+0xb8>)
    80c6:	4798      	blx	r3
    80c8:	0003      	movs	r3, r0
    80ca:	e7f5      	b.n	80b8 <SHTC3_checkID+0x70>
    80cc:	00007fb5 	.word	0x00007fb5
    80d0:	00007f79 	.word	0x00007f79
    80d4:	0000efc8 	.word	0x0000efc8
    80d8:	00007eb9 	.word	0x00007eb9
    80dc:	200008a4 	.word	0x200008a4
    80e0:	00008911 	.word	0x00008911
    80e4:	200010ee 	.word	0x200010ee
    80e8:	200010ec 	.word	0x200010ec
    80ec:	00007fe9 	.word	0x00007fe9
    80f0:	00000807 	.word	0x00000807
    80f4:	0000083f 	.word	0x0000083f
    80f8:	200010ed 	.word	0x200010ed
    80fc:	00007edd 	.word	0x00007edd
    8100:	00007f41 	.word	0x00007f41

00008104 <SHTC3_begin>:
{
    8104:	b510      	push	{r4, lr}
	_mode = SHTC3_CMD_CSE_RHF_NPM;	// My default pick
    8106:	4a1f      	ldr	r2, [pc, #124]	; (8184 <SHTC3_begin+0x80>)
    8108:	4b1f      	ldr	r3, [pc, #124]	; (8188 <SHTC3_begin+0x84>)
    810a:	801a      	strh	r2, [r3, #0]
	_inProcess = false;				// Definitely not doing anything when the object is intantiated
    810c:	2300      	movs	r3, #0
    810e:	4a1f      	ldr	r2, [pc, #124]	; (818c <SHTC3_begin+0x88>)
    8110:	7013      	strb	r3, [r2, #0]
	_staySleeping = true;			// Default to storing the sensor in low-power mode
    8112:	2201      	movs	r2, #1
    8114:	491e      	ldr	r1, [pc, #120]	; (8190 <SHTC3_begin+0x8c>)
    8116:	700a      	strb	r2, [r1, #0]
	_isAsleep = true;				// Assume the sensor is asleep to begin (there won't be any harm in waking it up if it is already awake)
    8118:	491e      	ldr	r1, [pc, #120]	; (8194 <SHTC3_begin+0x90>)
    811a:	700a      	strb	r2, [r1, #0]
	passRHcrc = false;
    811c:	4a1e      	ldr	r2, [pc, #120]	; (8198 <SHTC3_begin+0x94>)
    811e:	7013      	strb	r3, [r2, #0]
	passTcrc = false;
    8120:	4a1e      	ldr	r2, [pc, #120]	; (819c <SHTC3_begin+0x98>)
    8122:	7013      	strb	r3, [r2, #0]
	passIDcrc = false;
    8124:	4a1e      	ldr	r2, [pc, #120]	; (81a0 <SHTC3_begin+0x9c>)
    8126:	7013      	strb	r3, [r2, #0]
	RH = 0x00;
    8128:	4a1e      	ldr	r2, [pc, #120]	; (81a4 <SHTC3_begin+0xa0>)
    812a:	8013      	strh	r3, [r2, #0]
	T = 0x00;
    812c:	4a1e      	ldr	r2, [pc, #120]	; (81a8 <SHTC3_begin+0xa4>)
    812e:	8013      	strh	r3, [r2, #0]
	ID = 0x00;
    8130:	4a1e      	ldr	r2, [pc, #120]	; (81ac <SHTC3_begin+0xa8>)
    8132:	8013      	strh	r3, [r2, #0]
	I2C_SENS_init();
    8134:	4b1e      	ldr	r3, [pc, #120]	; (81b0 <SHTC3_begin+0xac>)
    8136:	4798      	blx	r3
	i2c_m_sync_get_io_descriptor(&I2C_SENS, &I2C_sens_io);
    8138:	4c1e      	ldr	r4, [pc, #120]	; (81b4 <SHTC3_begin+0xb0>)
    813a:	491f      	ldr	r1, [pc, #124]	; (81b8 <SHTC3_begin+0xb4>)
    813c:	0020      	movs	r0, r4
    813e:	4b1f      	ldr	r3, [pc, #124]	; (81bc <SHTC3_begin+0xb8>)
    8140:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_SENS);
    8142:	0020      	movs	r0, r4
    8144:	4b1e      	ldr	r3, [pc, #120]	; (81c0 <SHTC3_begin+0xbc>)
    8146:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C_SENS, SHTC3_ADDR_7BIT, I2C_M_SEVEN);
    8148:	2280      	movs	r2, #128	; 0x80
    814a:	0112      	lsls	r2, r2, #4
    814c:	2170      	movs	r1, #112	; 0x70
    814e:	0020      	movs	r0, r4
    8150:	4b1c      	ldr	r3, [pc, #112]	; (81c4 <SHTC3_begin+0xc0>)
    8152:	4798      	blx	r3
	retval = SHTC3_startProcess();																// Multiple commands will go to the sensor before sleeping
    8154:	4b1c      	ldr	r3, [pc, #112]	; (81c8 <SHTC3_begin+0xc4>)
    8156:	4798      	blx	r3
		return SHTC3_Status_Error;
    8158:	2301      	movs	r3, #1
	if(retval != SHTC3_Status_Nominal)
    815a:	2800      	cmp	r0, #0
    815c:	d001      	beq.n	8162 <SHTC3_begin+0x5e>
}
    815e:	0018      	movs	r0, r3
    8160:	bd10      	pop	{r4, pc}
	retval = SHTC3_wake(false);																	// Wake up the sensor
    8162:	4b1a      	ldr	r3, [pc, #104]	; (81cc <SHTC3_begin+0xc8>)
    8164:	4798      	blx	r3
		return SHTC3_Status_Error;		
    8166:	2301      	movs	r3, #1
	if(retval != SHTC3_Status_Nominal)
    8168:	2800      	cmp	r0, #0
    816a:	d1f8      	bne.n	815e <SHTC3_begin+0x5a>
	retval = SHTC3_checkID();																	// Verify that the sensor is actually an SHTC3
    816c:	4b18      	ldr	r3, [pc, #96]	; (81d0 <SHTC3_begin+0xcc>)
    816e:	4798      	blx	r3
		return SHTC3_Status_Error;
    8170:	2301      	movs	r3, #1
	if(retval != SHTC3_Status_Nominal)
    8172:	2800      	cmp	r0, #0
    8174:	d1f3      	bne.n	815e <SHTC3_begin+0x5a>
	retval = SHTC3_endProcess();	
    8176:	4b17      	ldr	r3, [pc, #92]	; (81d4 <SHTC3_begin+0xd0>)
    8178:	4798      	blx	r3
	if(retval != SHTC3_Status_Nominal)
    817a:	1e43      	subs	r3, r0, #1
    817c:	4198      	sbcs	r0, r3
		return SHTC3_Status_Error;
    817e:	b2c3      	uxtb	r3, r0
    8180:	e7ed      	b.n	815e <SHTC3_begin+0x5a>
    8182:	46c0      	nop			; (mov r8, r8)
    8184:	00005c24 	.word	0x00005c24
    8188:	200010f8 	.word	0x200010f8
    818c:	200010f0 	.word	0x200010f0
    8190:	200010f7 	.word	0x200010f7
    8194:	200010fa 	.word	0x200010fa
    8198:	200010f6 	.word	0x200010f6
    819c:	200010fb 	.word	0x200010fb
    81a0:	200010ec 	.word	0x200010ec
    81a4:	200010f2 	.word	0x200010f2
    81a8:	200010f4 	.word	0x200010f4
    81ac:	200010ee 	.word	0x200010ee
    81b0:	0000664d 	.word	0x0000664d
    81b4:	20000834 	.word	0x20000834
    81b8:	200008a4 	.word	0x200008a4
    81bc:	000088d3 	.word	0x000088d3
    81c0:	000088b5 	.word	0x000088b5
    81c4:	000088c1 	.word	0x000088c1
    81c8:	00007fb5 	.word	0x00007fb5
    81cc:	00007f79 	.word	0x00007f79
    81d0:	00008049 	.word	0x00008049
    81d4:	00007f41 	.word	0x00007f41

000081d8 <SHTC3_update>:
{
    81d8:	b530      	push	{r4, r5, lr}
    81da:	b083      	sub	sp, #12
	i2c_m_sync_set_slaveaddr(&I2C_SENS, SHTC3_ADDR_7BIT, I2C_M_SEVEN);
    81dc:	2280      	movs	r2, #128	; 0x80
    81de:	0112      	lsls	r2, r2, #4
    81e0:	2170      	movs	r1, #112	; 0x70
    81e2:	4842      	ldr	r0, [pc, #264]	; (82ec <SHTC3_update+0x114>)
    81e4:	4b42      	ldr	r3, [pc, #264]	; (82f0 <SHTC3_update+0x118>)
    81e6:	4798      	blx	r3
	retval = SHTC3_startProcess();		
    81e8:	4b42      	ldr	r3, [pc, #264]	; (82f4 <SHTC3_update+0x11c>)
    81ea:	4798      	blx	r3
	if(retval != SHTC3_Status_Nominal){ return SHTC3_abortUpdate(retval); }
    81ec:	2800      	cmp	r0, #0
    81ee:	d128      	bne.n	8242 <SHTC3_update+0x6a>
	retval = SHTC3_sendCommand_MMTD(_mode);							// Send the appropriate command - Note: incorrect commands are excluded by the 'setMode' command and _mode is a protected variable
    81f0:	4b41      	ldr	r3, [pc, #260]	; (82f8 <SHTC3_update+0x120>)
	return SHTC3_sendCommand_CTD((SHTC3_Commands_TypeDef)cmd);
    81f2:	8818      	ldrh	r0, [r3, #0]
    81f4:	4b41      	ldr	r3, [pc, #260]	; (82fc <SHTC3_update+0x124>)
    81f6:	4798      	blx	r3
	if(retval != SHTC3_Status_Nominal){ return SHTC3_abortUpdate(retval); }	
    81f8:	2800      	cmp	r0, #0
    81fa:	d126      	bne.n	824a <SHTC3_update+0x72>
	switch(_mode)											// Handle the two different ways of waiting for a measurement (polling or clock stretching)
    81fc:	4b3e      	ldr	r3, [pc, #248]	; (82f8 <SHTC3_update+0x120>)
    81fe:	881b      	ldrh	r3, [r3, #0]
    8200:	4a3f      	ldr	r2, [pc, #252]	; (8300 <SHTC3_update+0x128>)
    8202:	4293      	cmp	r3, r2
    8204:	d006      	beq.n	8214 <SHTC3_update+0x3c>
    8206:	d923      	bls.n	8250 <SHTC3_update+0x78>
    8208:	4a3e      	ldr	r2, [pc, #248]	; (8304 <SHTC3_update+0x12c>)
    820a:	4293      	cmp	r3, r2
    820c:	d002      	beq.n	8214 <SHTC3_update+0x3c>
    820e:	4a3e      	ldr	r2, [pc, #248]	; (8308 <SHTC3_update+0x130>)
    8210:	4293      	cmp	r3, r2
    8212:	d120      	bne.n	8256 <SHTC3_update+0x7e>
			io_read(I2C_sens_io, buff, numBytesRequest);
    8214:	4b3d      	ldr	r3, [pc, #244]	; (830c <SHTC3_update+0x134>)
    8216:	6818      	ldr	r0, [r3, #0]
    8218:	2206      	movs	r2, #6
    821a:	4669      	mov	r1, sp
    821c:	4b3c      	ldr	r3, [pc, #240]	; (8310 <SHTC3_update+0x138>)
    821e:	4798      	blx	r3
	switch(_mode)														// Switch for the order of the returned results
    8220:	4b35      	ldr	r3, [pc, #212]	; (82f8 <SHTC3_update+0x120>)
    8222:	881b      	ldrh	r3, [r3, #0]
    8224:	4a36      	ldr	r2, [pc, #216]	; (8300 <SHTC3_update+0x128>)
    8226:	4293      	cmp	r3, r2
    8228:	d033      	beq.n	8292 <SHTC3_update+0xba>
    822a:	d918      	bls.n	825e <SHTC3_update+0x86>
    822c:	4a35      	ldr	r2, [pc, #212]	; (8304 <SHTC3_update+0x12c>)
    822e:	4293      	cmp	r3, r2
    8230:	d025      	beq.n	827e <SHTC3_update+0xa6>
    8232:	d921      	bls.n	8278 <SHTC3_update+0xa0>
    8234:	4a37      	ldr	r2, [pc, #220]	; (8314 <SHTC3_update+0x13c>)
    8236:	4293      	cmp	r3, r2
    8238:	d021      	beq.n	827e <SHTC3_update+0xa6>
    823a:	4a33      	ldr	r2, [pc, #204]	; (8308 <SHTC3_update+0x130>)
    823c:	4293      	cmp	r3, r2
    823e:	d01e      	beq.n	827e <SHTC3_update+0xa6>
    8240:	e016      	b.n	8270 <SHTC3_update+0x98>
	if(retval != SHTC3_Status_Nominal){ return SHTC3_abortUpdate(retval); }
    8242:	4b35      	ldr	r3, [pc, #212]	; (8318 <SHTC3_update+0x140>)
    8244:	4798      	blx	r3
}
    8246:	b003      	add	sp, #12
    8248:	bd30      	pop	{r4, r5, pc}
	if(retval != SHTC3_Status_Nominal){ return SHTC3_abortUpdate(retval); }	
    824a:	4b33      	ldr	r3, [pc, #204]	; (8318 <SHTC3_update+0x140>)
    824c:	4798      	blx	r3
    824e:	e7fa      	b.n	8246 <SHTC3_update+0x6e>
	switch(_mode)											// Handle the two different ways of waiting for a measurement (polling or clock stretching)
    8250:	4a32      	ldr	r2, [pc, #200]	; (831c <SHTC3_update+0x144>)
    8252:	4293      	cmp	r3, r2
    8254:	d0de      	beq.n	8214 <SHTC3_update+0x3c>
			return SHTC3_abortUpdate(SHTC3_Status_Error);		// You really should never get to this code because setMode disallows non-approved values of _mode (type SHTC3_MeasurementModes_TypeDef)
    8256:	2001      	movs	r0, #1
    8258:	4b2f      	ldr	r3, [pc, #188]	; (8318 <SHTC3_update+0x140>)
    825a:	4798      	blx	r3
    825c:	e7f3      	b.n	8246 <SHTC3_update+0x6e>
	switch(_mode)														// Switch for the order of the returned results
    825e:	4a2f      	ldr	r2, [pc, #188]	; (831c <SHTC3_update+0x144>)
    8260:	4293      	cmp	r3, r2
    8262:	d016      	beq.n	8292 <SHTC3_update+0xba>
    8264:	4a2e      	ldr	r2, [pc, #184]	; (8320 <SHTC3_update+0x148>)
    8266:	4293      	cmp	r3, r2
    8268:	d013      	beq.n	8292 <SHTC3_update+0xba>
    826a:	4a2e      	ldr	r2, [pc, #184]	; (8324 <SHTC3_update+0x14c>)
    826c:	4293      	cmp	r3, r2
    826e:	d010      	beq.n	8292 <SHTC3_update+0xba>
			return SHTC3_abortUpdate(SHTC3_Status_Error);						// Again, you should never experience this section of code
    8270:	2001      	movs	r0, #1
    8272:	4b29      	ldr	r3, [pc, #164]	; (8318 <SHTC3_update+0x140>)
    8274:	4798      	blx	r3
    8276:	e7e6      	b.n	8246 <SHTC3_update+0x6e>
	switch(_mode)														// Switch for the order of the returned results
    8278:	4a2b      	ldr	r2, [pc, #172]	; (8328 <SHTC3_update+0x150>)
    827a:	4293      	cmp	r3, r2
    827c:	d1f8      	bne.n	8270 <SHTC3_update+0x98>
			Thb = buff[0];
    827e:	466b      	mov	r3, sp
    8280:	781b      	ldrb	r3, [r3, #0]
			Tlb = buff[1];
    8282:	466a      	mov	r2, sp
    8284:	7852      	ldrb	r2, [r2, #1]
			Tcs = buff[2];
    8286:	4669      	mov	r1, sp
    8288:	788c      	ldrb	r4, [r1, #2]
			RHhb = buff[3];
    828a:	78c8      	ldrb	r0, [r1, #3]
			RHlb = buff[4];
    828c:	790d      	ldrb	r5, [r1, #4]
			RHcs = buff[5];
    828e:	7949      	ldrb	r1, [r1, #5]
			break;
    8290:	e008      	b.n	82a4 <SHTC3_update+0xcc>
			RHhb = buff[0];
    8292:	466b      	mov	r3, sp
    8294:	7818      	ldrb	r0, [r3, #0]
			RHlb = buff[1];
    8296:	785d      	ldrb	r5, [r3, #1]
			RHcs = buff[2];
    8298:	7899      	ldrb	r1, [r3, #2]
			Thb = buff[3];
    829a:	78db      	ldrb	r3, [r3, #3]
			Tlb = buff[4];
    829c:	466a      	mov	r2, sp
    829e:	7912      	ldrb	r2, [r2, #4]
			Tcs = buff[5];
    82a0:	466c      	mov	r4, sp
    82a2:	7964      	ldrb	r4, [r4, #5]
	RH = ((uint16_t)RHhb << 8) | ((uint16_t)RHlb << 0);
    82a4:	0200      	lsls	r0, r0, #8
    82a6:	4328      	orrs	r0, r5
    82a8:	4d20      	ldr	r5, [pc, #128]	; (832c <SHTC3_update+0x154>)
    82aa:	8028      	strh	r0, [r5, #0]
	T = ((uint16_t)Thb << 8) | ((uint16_t)Tlb << 0);
    82ac:	021b      	lsls	r3, r3, #8
    82ae:	4313      	orrs	r3, r2
    82b0:	4a1f      	ldr	r2, [pc, #124]	; (8330 <SHTC3_update+0x158>)
    82b2:	8013      	strh	r3, [r2, #0]
	passRHcrc = false;
    82b4:	2300      	movs	r3, #0
    82b6:	4a1f      	ldr	r2, [pc, #124]	; (8334 <SHTC3_update+0x15c>)
    82b8:	7013      	strb	r3, [r2, #0]
	passTcrc = false;
    82ba:	4a1f      	ldr	r2, [pc, #124]	; (8338 <SHTC3_update+0x160>)
    82bc:	7013      	strb	r3, [r2, #0]
	if(SHTC3_checkCRC(RH, RHcs) == SHTC3_Status_Nominal){ passRHcrc = true; }
    82be:	4b1f      	ldr	r3, [pc, #124]	; (833c <SHTC3_update+0x164>)
    82c0:	4798      	blx	r3
    82c2:	2800      	cmp	r0, #0
    82c4:	d102      	bne.n	82cc <SHTC3_update+0xf4>
    82c6:	2201      	movs	r2, #1
    82c8:	4b1a      	ldr	r3, [pc, #104]	; (8334 <SHTC3_update+0x15c>)
    82ca:	701a      	strb	r2, [r3, #0]
	if(SHTC3_checkCRC(T, Tcs) == SHTC3_Status_Nominal){ passTcrc = true; }
    82cc:	4b18      	ldr	r3, [pc, #96]	; (8330 <SHTC3_update+0x158>)
    82ce:	8818      	ldrh	r0, [r3, #0]
    82d0:	0021      	movs	r1, r4
    82d2:	4b1a      	ldr	r3, [pc, #104]	; (833c <SHTC3_update+0x164>)
    82d4:	4798      	blx	r3
    82d6:	2800      	cmp	r0, #0
    82d8:	d102      	bne.n	82e0 <SHTC3_update+0x108>
    82da:	2201      	movs	r2, #1
    82dc:	4b16      	ldr	r3, [pc, #88]	; (8338 <SHTC3_update+0x160>)
    82de:	701a      	strb	r2, [r3, #0]
	retval = SHTC3_endProcess();												// We are about to return to user-land
    82e0:	4b17      	ldr	r3, [pc, #92]	; (8340 <SHTC3_update+0x168>)
    82e2:	4798      	blx	r3
	if(retval != SHTC3_Status_Nominal){ return SHTC3_Status_Error; }
    82e4:	1e43      	subs	r3, r0, #1
    82e6:	4198      	sbcs	r0, r3
	if(retval != SHTC3_Status_Nominal){ return SHTC3_abortUpdate(retval); }
    82e8:	b2c0      	uxtb	r0, r0
    82ea:	e7ac      	b.n	8246 <SHTC3_update+0x6e>
    82ec:	20000834 	.word	0x20000834
    82f0:	000088c1 	.word	0x000088c1
    82f4:	00007fb5 	.word	0x00007fb5
    82f8:	200010f8 	.word	0x200010f8
    82fc:	00007eb9 	.word	0x00007eb9
    8300:	00005c24 	.word	0x00005c24
    8304:	00006458 	.word	0x00006458
    8308:	00007ca2 	.word	0x00007ca2
    830c:	200008a4 	.word	0x200008a4
    8310:	00008911 	.word	0x00008911
    8314:	00007866 	.word	0x00007866
    8318:	00007edd 	.word	0x00007edd
    831c:	000044de 	.word	0x000044de
    8320:	000058e0 	.word	0x000058e0
    8324:	0000401a 	.word	0x0000401a
    8328:	0000609c 	.word	0x0000609c
    832c:	200010f2 	.word	0x200010f2
    8330:	200010f4 	.word	0x200010f4
    8334:	200010f6 	.word	0x200010f6
    8338:	200010fb 	.word	0x200010fb
    833c:	00007fe9 	.word	0x00007fe9
    8340:	00007f41 	.word	0x00007f41

00008344 <SHTC3_raw2DegC>:


float SHTC3_raw2DegC(void)
{
    8344:	b510      	push	{r4, lr}
	return -45 + 175 * ((float)T/65535);
    8346:	4b07      	ldr	r3, [pc, #28]	; (8364 <SHTC3_raw2DegC+0x20>)
    8348:	8818      	ldrh	r0, [r3, #0]
    834a:	4b07      	ldr	r3, [pc, #28]	; (8368 <SHTC3_raw2DegC+0x24>)
    834c:	4798      	blx	r3
    834e:	4907      	ldr	r1, [pc, #28]	; (836c <SHTC3_raw2DegC+0x28>)
    8350:	4b07      	ldr	r3, [pc, #28]	; (8370 <SHTC3_raw2DegC+0x2c>)
    8352:	4798      	blx	r3
    8354:	4907      	ldr	r1, [pc, #28]	; (8374 <SHTC3_raw2DegC+0x30>)
    8356:	4b08      	ldr	r3, [pc, #32]	; (8378 <SHTC3_raw2DegC+0x34>)
    8358:	4798      	blx	r3
    835a:	4908      	ldr	r1, [pc, #32]	; (837c <SHTC3_raw2DegC+0x38>)
    835c:	4b08      	ldr	r3, [pc, #32]	; (8380 <SHTC3_raw2DegC+0x3c>)
    835e:	4798      	blx	r3
}
    8360:	bd10      	pop	{r4, pc}
    8362:	46c0      	nop			; (mov r8, r8)
    8364:	200010f4 	.word	0x200010f4
    8368:	0000d845 	.word	0x0000d845
    836c:	477fff00 	.word	0x477fff00
    8370:	0000cffd 	.word	0x0000cffd
    8374:	432f0000 	.word	0x432f0000
    8378:	0000d28d 	.word	0x0000d28d
    837c:	42340000 	.word	0x42340000
    8380:	0000d4cd 	.word	0x0000d4cd

00008384 <SHTC3_raw2Percent>:
{
	return SHTC3_raw2DegC() * (9.0/5) + 32.0;
}

float SHTC3_raw2Percent(void)
{
    8384:	b510      	push	{r4, lr}
	return 100 * ((float)RH/65535);
    8386:	4b05      	ldr	r3, [pc, #20]	; (839c <SHTC3_raw2Percent+0x18>)
    8388:	8818      	ldrh	r0, [r3, #0]
    838a:	4b05      	ldr	r3, [pc, #20]	; (83a0 <SHTC3_raw2Percent+0x1c>)
    838c:	4798      	blx	r3
    838e:	4905      	ldr	r1, [pc, #20]	; (83a4 <SHTC3_raw2Percent+0x20>)
    8390:	4b05      	ldr	r3, [pc, #20]	; (83a8 <SHTC3_raw2Percent+0x24>)
    8392:	4798      	blx	r3
    8394:	4905      	ldr	r1, [pc, #20]	; (83ac <SHTC3_raw2Percent+0x28>)
    8396:	4b06      	ldr	r3, [pc, #24]	; (83b0 <SHTC3_raw2Percent+0x2c>)
    8398:	4798      	blx	r3
}
    839a:	bd10      	pop	{r4, pc}
    839c:	200010f2 	.word	0x200010f2
    83a0:	0000d845 	.word	0x0000d845
    83a4:	477fff00 	.word	0x477fff00
    83a8:	0000cffd 	.word	0x0000cffd
    83ac:	42c80000 	.word	0x42c80000
    83b0:	0000d28d 	.word	0x0000d28d

000083b4 <TIMER_1ms_cb>:
static struct timer_task TIMER_1ms_task;

static void TIMER_1ms_cb(const struct timer_task *const timer_task)
{
	//handle sys_time and LED	
	sys_time++;
    83b4:	4b0f      	ldr	r3, [pc, #60]	; (83f4 <TIMER_1ms_cb+0x40>)
    83b6:	681a      	ldr	r2, [r3, #0]
    83b8:	3201      	adds	r2, #1
    83ba:	601a      	str	r2, [r3, #0]
	
	if(LED_enabled)
    83bc:	791b      	ldrb	r3, [r3, #4]
    83be:	2b00      	cmp	r3, #0
    83c0:	d016      	beq.n	83f0 <TIMER_1ms_cb+0x3c>
	{
		if (LED_CNT_RELOAD)
    83c2:	4b0d      	ldr	r3, [pc, #52]	; (83f8 <TIMER_1ms_cb+0x44>)
    83c4:	881a      	ldrh	r2, [r3, #0]
    83c6:	2a00      	cmp	r2, #0
    83c8:	d00d      	beq.n	83e6 <TIMER_1ms_cb+0x32>
		{
			if (!--LED_cnt)
    83ca:	0019      	movs	r1, r3
    83cc:	885b      	ldrh	r3, [r3, #2]
    83ce:	3b01      	subs	r3, #1
    83d0:	b29b      	uxth	r3, r3
    83d2:	804b      	strh	r3, [r1, #2]
    83d4:	2b00      	cmp	r3, #0
    83d6:	d10b      	bne.n	83f0 <TIMER_1ms_cb+0x3c>
			{
				LED_cnt = LED_CNT_RELOAD;
    83d8:	804a      	strh	r2, [r1, #2]
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    83da:	2104      	movs	r1, #4
    83dc:	239c      	movs	r3, #156	; 0x9c
    83de:	22c0      	movs	r2, #192	; 0xc0
    83e0:	05d2      	lsls	r2, r2, #23
    83e2:	50d1      	str	r1, [r2, r3]
    83e4:	e004      	b.n	83f0 <TIMER_1ms_cb+0x3c>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    83e6:	2104      	movs	r1, #4
    83e8:	2398      	movs	r3, #152	; 0x98
    83ea:	22c0      	movs	r2, #192	; 0xc0
    83ec:	05d2      	lsls	r2, r2, #23
    83ee:	50d1      	str	r1, [r2, r3]
		}
		else
			gpio_set_pin_level(LED, true);
		
	}
}
    83f0:	4770      	bx	lr
    83f2:	46c0      	nop			; (mov r8, r8)
    83f4:	200002bc 	.word	0x200002bc
    83f8:	20000004 	.word	0x20000004

000083fc <timer_1ms_init>:

void timer_1ms_init(void)
{
    83fc:	b510      	push	{r4, lr}
	TIMER_1ms_task.interval = 1;
    83fe:	4907      	ldr	r1, [pc, #28]	; (841c <timer_1ms_init+0x20>)
    8400:	2301      	movs	r3, #1
    8402:	610b      	str	r3, [r1, #16]
	TIMER_1ms_task.cb       = TIMER_1ms_cb;
    8404:	4a06      	ldr	r2, [pc, #24]	; (8420 <timer_1ms_init+0x24>)
    8406:	614a      	str	r2, [r1, #20]
	TIMER_1ms_task.mode     = TIMER_TASK_REPEAT;
    8408:	760b      	strb	r3, [r1, #24]

	timer_add_task(&TIMER_1ms, &TIMER_1ms_task);
    840a:	3108      	adds	r1, #8
    840c:	4c05      	ldr	r4, [pc, #20]	; (8424 <timer_1ms_init+0x28>)
    840e:	0020      	movs	r0, r4
    8410:	4b05      	ldr	r3, [pc, #20]	; (8428 <timer_1ms_init+0x2c>)
    8412:	4798      	blx	r3
	timer_start(&TIMER_1ms);
    8414:	0020      	movs	r0, r4
    8416:	4b05      	ldr	r3, [pc, #20]	; (842c <timer_1ms_init+0x30>)
    8418:	4798      	blx	r3
}
    841a:	bd10      	pop	{r4, pc}
    841c:	200002bc 	.word	0x200002bc
    8420:	000083b5 	.word	0x000083b5
    8424:	200007bc 	.word	0x200007bc
    8428:	00008bd5 	.word	0x00008bd5
    842c:	00008b99 	.word	0x00008b99

00008430 <millis>:

uint32_t millis()
{
	uint32_t tmp;
	__disable_irq;
	tmp = sys_time;
    8430:	4b01      	ldr	r3, [pc, #4]	; (8438 <millis+0x8>)
    8432:	6818      	ldr	r0, [r3, #0]
	__enable_irq;
	
	return tmp;
}
    8434:	4770      	bx	lr
    8436:	46c0      	nop			; (mov r8, r8)
    8438:	200002bc 	.word	0x200002bc

0000843c <delay>:
	tmp = sys_time;
    843c:	4b03      	ldr	r3, [pc, #12]	; (844c <delay+0x10>)
    843e:	6819      	ldr	r1, [r3, #0]
    8440:	001a      	movs	r2, r3
    8442:	6813      	ldr	r3, [r2, #0]

void delay(uint32_t d)
{
	uint32_t t0 = millis();
	
	while (millis() - t0 < d);
    8444:	1a5b      	subs	r3, r3, r1
    8446:	4283      	cmp	r3, r0
    8448:	d3fb      	bcc.n	8442 <delay+0x6>
}
    844a:	4770      	bx	lr
    844c:	200002bc 	.word	0x200002bc

00008450 <enableLED>:

void enableLED()
{
	LED_enabled = true;
    8450:	2201      	movs	r2, #1
    8452:	4b05      	ldr	r3, [pc, #20]	; (8468 <enableLED+0x18>)
    8454:	711a      	strb	r2, [r3, #4]
    8456:	2104      	movs	r1, #4
    8458:	2398      	movs	r3, #152	; 0x98
    845a:	22c0      	movs	r2, #192	; 0xc0
    845c:	05d2      	lsls	r2, r2, #23
    845e:	50d1      	str	r1, [r2, r3]
	gpio_set_pin_level(LED, true);
	LED_cnt = LED_CNT_RELOAD;
    8460:	4b02      	ldr	r3, [pc, #8]	; (846c <enableLED+0x1c>)
    8462:	881a      	ldrh	r2, [r3, #0]
    8464:	805a      	strh	r2, [r3, #2]
}
    8466:	4770      	bx	lr
    8468:	200002bc 	.word	0x200002bc
    846c:	20000004 	.word	0x20000004

00008470 <setLEDfreq>:
	gpio_set_pin_level(LED, false);
}

void setLEDfreq(uint16_t freq)
{
	LED_CNT_RELOAD = freq;
    8470:	4b01      	ldr	r3, [pc, #4]	; (8478 <setLEDfreq+0x8>)
    8472:	8018      	strh	r0, [r3, #0]
    8474:	4770      	bx	lr
    8476:	46c0      	nop			; (mov r8, r8)
    8478:	20000004 	.word	0x20000004

0000847c <usbUARTinit>:
volatile static unsigned char usb_Rx_Buffer_Size = 0;
volatile static unsigned char usb_Rx_Buffer_First = 0;
volatile static unsigned char usb_Rx_Buffer_Last = 0;

void usbUARTinit()
{
    847c:	b510      	push	{r4, lr}
	usb_init();
    847e:	4b01      	ldr	r3, [pc, #4]	; (8484 <usbUARTinit+0x8>)
    8480:	4798      	blx	r3
}
    8482:	bd10      	pop	{r4, pc}
    8484:	00008595 	.word	0x00008595

00008488 <usbUARTputString>:
	char tmp = c;
	cdcdf_acm_write(&tmp, 1);
}

void usbUARTputString(char* str)
{
    8488:	b510      	push	{r4, lr}
    848a:	0004      	movs	r4, r0
	cdcdf_acm_write(str, strlen(str));
    848c:	4b05      	ldr	r3, [pc, #20]	; (84a4 <usbUARTputString+0x1c>)
    848e:	4798      	blx	r3
    8490:	0001      	movs	r1, r0
    8492:	0020      	movs	r0, r4
    8494:	4b04      	ldr	r3, [pc, #16]	; (84a8 <usbUARTputString+0x20>)
    8496:	4798      	blx	r3
	delay_us(1000);
    8498:	20fa      	movs	r0, #250	; 0xfa
    849a:	0080      	lsls	r0, r0, #2
    849c:	4b03      	ldr	r3, [pc, #12]	; (84ac <usbUARTputString+0x24>)
    849e:	4798      	blx	r3
}
    84a0:	bd10      	pop	{r4, pc}
    84a2:	46c0      	nop			; (mov r8, r8)
    84a4:	0000dd25 	.word	0x0000dd25
    84a8:	0000c429 	.word	0x0000c429
    84ac:	000087f5 	.word	0x000087f5

000084b0 <usbUARTenqueue>:
	usb_Rx_Buffer_Last = 0;
}

void usbUARTenqueue(char c)
{
	usb_Rx_Buffer[usb_Rx_Buffer_Last++] = c;
    84b0:	4908      	ldr	r1, [pc, #32]	; (84d4 <usbUARTenqueue+0x24>)
    84b2:	790b      	ldrb	r3, [r1, #4]
    84b4:	b2db      	uxtb	r3, r3
    84b6:	1c5a      	adds	r2, r3, #1
    84b8:	b2d2      	uxtb	r2, r2
    84ba:	710a      	strb	r2, [r1, #4]
    84bc:	4a06      	ldr	r2, [pc, #24]	; (84d8 <usbUARTenqueue+0x28>)
    84be:	18d3      	adds	r3, r2, r3
    84c0:	7118      	strb	r0, [r3, #4]
	usb_Rx_Buffer_Last &= USB_RX_BUFFER_SIZE - 1;
    84c2:	790b      	ldrb	r3, [r1, #4]
    84c4:	b2db      	uxtb	r3, r3
    84c6:	710b      	strb	r3, [r1, #4]
	if (usb_Rx_Buffer_Size < USB_RX_BUFFER_SIZE)
    84c8:	7813      	ldrb	r3, [r2, #0]
		usb_Rx_Buffer_Size++;
    84ca:	7813      	ldrb	r3, [r2, #0]
    84cc:	3301      	adds	r3, #1
    84ce:	b2db      	uxtb	r3, r3
    84d0:	7013      	strb	r3, [r2, #0]
    84d2:	4770      	bx	lr
    84d4:	200003d8 	.word	0x200003d8
    84d8:	200002d8 	.word	0x200002d8

000084dc <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
static bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
    84dc:	b510      	push	{r4, lr}
    84de:	b082      	sub	sp, #8
    84e0:	ab01      	add	r3, sp, #4
    84e2:	8018      	strh	r0, [r3, #0]
	//if (state.rs232.DTR) 
	{
		/* Callbacks must be registered after endpoint allocation */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
    84e4:	4906      	ldr	r1, [pc, #24]	; (8500 <usb_device_cb_state_c+0x24>)
    84e6:	2000      	movs	r0, #0
    84e8:	4c06      	ldr	r4, [pc, #24]	; (8504 <usb_device_cb_state_c+0x28>)
    84ea:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
    84ec:	4906      	ldr	r1, [pc, #24]	; (8508 <usb_device_cb_state_c+0x2c>)
    84ee:	2001      	movs	r0, #1
    84f0:	47a0      	blx	r4
		/* Start Rx */
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    84f2:	2140      	movs	r1, #64	; 0x40
    84f4:	4805      	ldr	r0, [pc, #20]	; (850c <usb_device_cb_state_c+0x30>)
    84f6:	4b06      	ldr	r3, [pc, #24]	; (8510 <usb_device_cb_state_c+0x34>)
    84f8:	4798      	blx	r3
	}

	/* No error. */
	return false;
}
    84fa:	2000      	movs	r0, #0
    84fc:	b002      	add	sp, #8
    84fe:	bd10      	pop	{r4, pc}
    8500:	0000852d 	.word	0x0000852d
    8504:	0000c455 	.word	0x0000c455
    8508:	00008515 	.word	0x00008515
    850c:	200003e0 	.word	0x200003e0
    8510:	0000c3fd 	.word	0x0000c3fd

00008514 <usb_device_cb_bulk_in>:
{
    8514:	b510      	push	{r4, lr}
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    8516:	2140      	movs	r1, #64	; 0x40
    8518:	4802      	ldr	r0, [pc, #8]	; (8524 <usb_device_cb_bulk_in+0x10>)
    851a:	4b03      	ldr	r3, [pc, #12]	; (8528 <usb_device_cb_bulk_in+0x14>)
    851c:	4798      	blx	r3
}
    851e:	2000      	movs	r0, #0
    8520:	bd10      	pop	{r4, pc}
    8522:	46c0      	nop			; (mov r8, r8)
    8524:	200003e0 	.word	0x200003e0
    8528:	0000c3fd 	.word	0x0000c3fd

0000852c <usb_device_cb_bulk_out>:
{
    852c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    852e:	0016      	movs	r6, r2
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, 0);
    8530:	2100      	movs	r1, #0
    8532:	4808      	ldr	r0, [pc, #32]	; (8554 <usb_device_cb_bulk_out+0x28>)
    8534:	4b08      	ldr	r3, [pc, #32]	; (8558 <usb_device_cb_bulk_out+0x2c>)
    8536:	4798      	blx	r3
	for (int i = 0; i < count; i++)
    8538:	2e00      	cmp	r6, #0
    853a:	d008      	beq.n	854e <usb_device_cb_bulk_out+0x22>
    853c:	4d05      	ldr	r5, [pc, #20]	; (8554 <usb_device_cb_bulk_out+0x28>)
    853e:	2400      	movs	r4, #0
		usbUARTenqueue(usbd_cdc_buffer[i]);
    8540:	4f06      	ldr	r7, [pc, #24]	; (855c <usb_device_cb_bulk_out+0x30>)
    8542:	cd01      	ldmia	r5!, {r0}
    8544:	b2c0      	uxtb	r0, r0
    8546:	47b8      	blx	r7
	for (int i = 0; i < count; i++)
    8548:	3401      	adds	r4, #1
    854a:	42b4      	cmp	r4, r6
    854c:	d1f9      	bne.n	8542 <usb_device_cb_bulk_out+0x16>
}
    854e:	2000      	movs	r0, #0
    8550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8552:	46c0      	nop			; (mov r8, r8)
    8554:	200003e0 	.word	0x200003e0
    8558:	0000c429 	.word	0x0000c429
    855c:	000084b1 	.word	0x000084b1

00008560 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    8560:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    8562:	4806      	ldr	r0, [pc, #24]	; (857c <cdc_device_acm_init+0x1c>)
    8564:	3040      	adds	r0, #64	; 0x40
    8566:	4b06      	ldr	r3, [pc, #24]	; (8580 <cdc_device_acm_init+0x20>)
    8568:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    856a:	4b06      	ldr	r3, [pc, #24]	; (8584 <cdc_device_acm_init+0x24>)
    856c:	4798      	blx	r3

	usbdc_start(single_desc);
    856e:	4806      	ldr	r0, [pc, #24]	; (8588 <cdc_device_acm_init+0x28>)
    8570:	4b06      	ldr	r3, [pc, #24]	; (858c <cdc_device_acm_init+0x2c>)
    8572:	4798      	blx	r3
	usbdc_attach();
    8574:	4b06      	ldr	r3, [pc, #24]	; (8590 <cdc_device_acm_init+0x30>)
    8576:	4798      	blx	r3
}
    8578:	bd10      	pop	{r4, pc}
    857a:	46c0      	nop			; (mov r8, r8)
    857c:	200003e0 	.word	0x200003e0
    8580:	0000cae9 	.word	0x0000cae9
    8584:	0000c3b9 	.word	0x0000c3b9
    8588:	20000008 	.word	0x20000008
    858c:	0000cb61 	.word	0x0000cb61
    8590:	0000cb99 	.word	0x0000cb99

00008594 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    8594:	b510      	push	{r4, lr}
	cdc_device_acm_init();
    8596:	4b05      	ldr	r3, [pc, #20]	; (85ac <usb_init+0x18>)
    8598:	4798      	blx	r3
	
	while (!cdcdf_acm_is_enabled()) {
    859a:	4c05      	ldr	r4, [pc, #20]	; (85b0 <usb_init+0x1c>)
    859c:	47a0      	blx	r4
    859e:	2800      	cmp	r0, #0
    85a0:	d0fc      	beq.n	859c <usb_init+0x8>
		// wait cdc acm to be installed
	};

	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
    85a2:	4904      	ldr	r1, [pc, #16]	; (85b4 <usb_init+0x20>)
    85a4:	2003      	movs	r0, #3
    85a6:	4b04      	ldr	r3, [pc, #16]	; (85b8 <usb_init+0x24>)
    85a8:	4798      	blx	r3
}
    85aa:	bd10      	pop	{r4, pc}
    85ac:	00008561 	.word	0x00008561
    85b0:	0000c4a5 	.word	0x0000c4a5
    85b4:	000084dd 	.word	0x000084dd
    85b8:	0000c455 	.word	0x0000c455

000085bc <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    85bc:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    85be:	6983      	ldr	r3, [r0, #24]
    85c0:	2b00      	cmp	r3, #0
    85c2:	d000      	beq.n	85c6 <adc_async_window_threshold_reached+0xa>
		descr->adc_async_cb.monitor(descr, channel);
    85c4:	4798      	blx	r3
	}
}
    85c6:	bd10      	pop	{r4, pc}

000085c8 <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    85c8:	b510      	push	{r4, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    85ca:	69c3      	ldr	r3, [r0, #28]
    85cc:	2b00      	cmp	r3, #0
    85ce:	d000      	beq.n	85d2 <adc_async_error_occured+0xa>
		descr->adc_async_cb.error(descr, channel);
    85d0:	4798      	blx	r3
	}
}
    85d2:	bd10      	pop	{r4, pc}

000085d4 <adc_async_channel_conversion_done>:
{
    85d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    85d6:	b083      	sub	sp, #12
    85d8:	0005      	movs	r5, r0
    85da:	000e      	movs	r6, r1
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    85dc:	6a03      	ldr	r3, [r0, #32]
    85de:	5c5b      	ldrb	r3, [r3, r1]
    85e0:	005c      	lsls	r4, r3, #1
    85e2:	18e4      	adds	r4, r4, r3
    85e4:	00e4      	lsls	r4, r4, #3
    85e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    85e8:	469c      	mov	ip, r3
    85ea:	4464      	add	r4, ip
	ringbuffer_put(&descr_ch->convert, data);
    85ec:	1d27      	adds	r7, r4, #4
    85ee:	9201      	str	r2, [sp, #4]
    85f0:	466b      	mov	r3, sp
    85f2:	7919      	ldrb	r1, [r3, #4]
    85f4:	0038      	movs	r0, r7
    85f6:	4b0d      	ldr	r3, [pc, #52]	; (862c <adc_async_channel_conversion_done+0x58>)
    85f8:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    85fa:	0028      	movs	r0, r5
    85fc:	4b0c      	ldr	r3, [pc, #48]	; (8630 <adc_async_channel_conversion_done+0x5c>)
    85fe:	4798      	blx	r3
    8600:	2801      	cmp	r0, #1
    8602:	d907      	bls.n	8614 <adc_async_channel_conversion_done+0x40>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    8604:	9b01      	ldr	r3, [sp, #4]
    8606:	0a19      	lsrs	r1, r3, #8
    8608:	0038      	movs	r0, r7
    860a:	4b08      	ldr	r3, [pc, #32]	; (862c <adc_async_channel_conversion_done+0x58>)
    860c:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    860e:	8aa3      	ldrh	r3, [r4, #20]
    8610:	3301      	adds	r3, #1
    8612:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
    8614:	8aa3      	ldrh	r3, [r4, #20]
    8616:	3301      	adds	r3, #1
    8618:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    861a:	6823      	ldr	r3, [r4, #0]
    861c:	2b00      	cmp	r3, #0
    861e:	d002      	beq.n	8626 <adc_async_channel_conversion_done+0x52>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    8620:	0031      	movs	r1, r6
    8622:	0028      	movs	r0, r5
    8624:	4798      	blx	r3
}
    8626:	b003      	add	sp, #12
    8628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    862a:	46c0      	nop			; (mov r8, r8)
    862c:	000096e9 	.word	0x000096e9
    8630:	00009969 	.word	0x00009969

00008634 <adc_async_init>:
{
    8634:	b5f0      	push	{r4, r5, r6, r7, lr}
    8636:	46d6      	mov	lr, sl
    8638:	b500      	push	{lr}
    863a:	b082      	sub	sp, #8
    863c:	0005      	movs	r5, r0
    863e:	9101      	str	r1, [sp, #4]
    8640:	0016      	movs	r6, r2
    8642:	001c      	movs	r4, r3
    8644:	ab08      	add	r3, sp, #32
    8646:	781f      	ldrb	r7, [r3, #0]
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    8648:	2800      	cmp	r0, #0
    864a:	d035      	beq.n	86b8 <adc_async_init+0x84>
    864c:	2900      	cmp	r1, #0
    864e:	d035      	beq.n	86bc <adc_async_init+0x88>
    8650:	2a00      	cmp	r2, #0
    8652:	d035      	beq.n	86c0 <adc_async_init+0x8c>
    8654:	2000      	movs	r0, #0
    8656:	2f00      	cmp	r7, #0
    8658:	d002      	beq.n	8660 <adc_async_init+0x2c>
    865a:	9809      	ldr	r0, [sp, #36]	; 0x24
    865c:	1e43      	subs	r3, r0, #1
    865e:	4198      	sbcs	r0, r3
    8660:	223f      	movs	r2, #63	; 0x3f
    8662:	4918      	ldr	r1, [pc, #96]	; (86c4 <adc_async_init+0x90>)
    8664:	4b18      	ldr	r3, [pc, #96]	; (86c8 <adc_async_init+0x94>)
    8666:	469a      	mov	sl, r3
    8668:	4798      	blx	r3
	ASSERT(channel_amount <= (channel_max + 1));
    866a:	1c62      	adds	r2, r4, #1
    866c:	0ffb      	lsrs	r3, r7, #31
    866e:	17d0      	asrs	r0, r2, #31
    8670:	42ba      	cmp	r2, r7
    8672:	4158      	adcs	r0, r3
    8674:	b2c0      	uxtb	r0, r0
    8676:	2240      	movs	r2, #64	; 0x40
    8678:	4912      	ldr	r1, [pc, #72]	; (86c4 <adc_async_init+0x90>)
    867a:	47d0      	blx	sl
	for (uint8_t i = 0; i <= channel_max; i++) {
    867c:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    867e:	22ff      	movs	r2, #255	; 0xff
    8680:	54f2      	strb	r2, [r6, r3]
	for (uint8_t i = 0; i <= channel_max; i++) {
    8682:	3301      	adds	r3, #1
    8684:	b2db      	uxtb	r3, r3
    8686:	429c      	cmp	r4, r3
    8688:	d2fa      	bcs.n	8680 <adc_async_init+0x4c>
	descr->channel_map    = channel_map;
    868a:	622e      	str	r6, [r5, #32]
	descr->channel_max    = channel_max;
    868c:	2324      	movs	r3, #36	; 0x24
    868e:	54ec      	strb	r4, [r5, r3]
	descr->channel_amount = channel_amount;
    8690:	3301      	adds	r3, #1
    8692:	54ef      	strb	r7, [r5, r3]
	descr->descr_ch       = descr_ch;
    8694:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8696:	62ab      	str	r3, [r5, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    8698:	9901      	ldr	r1, [sp, #4]
    869a:	0028      	movs	r0, r5
    869c:	4b0b      	ldr	r3, [pc, #44]	; (86cc <adc_async_init+0x98>)
    869e:	4798      	blx	r3
	if (init_status) {
    86a0:	2800      	cmp	r0, #0
    86a2:	d105      	bne.n	86b0 <adc_async_init+0x7c>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    86a4:	4b0a      	ldr	r3, [pc, #40]	; (86d0 <adc_async_init+0x9c>)
    86a6:	60ab      	str	r3, [r5, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    86a8:	4b0a      	ldr	r3, [pc, #40]	; (86d4 <adc_async_init+0xa0>)
    86aa:	602b      	str	r3, [r5, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    86ac:	4b0a      	ldr	r3, [pc, #40]	; (86d8 <adc_async_init+0xa4>)
    86ae:	606b      	str	r3, [r5, #4]
}
    86b0:	b002      	add	sp, #8
    86b2:	bc04      	pop	{r2}
    86b4:	4692      	mov	sl, r2
    86b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    86b8:	2000      	movs	r0, #0
    86ba:	e7d1      	b.n	8660 <adc_async_init+0x2c>
    86bc:	2000      	movs	r0, #0
    86be:	e7cf      	b.n	8660 <adc_async_init+0x2c>
    86c0:	2000      	movs	r0, #0
    86c2:	e7cd      	b.n	8660 <adc_async_init+0x2c>
    86c4:	0000e874 	.word	0x0000e874
    86c8:	0000959d 	.word	0x0000959d
    86cc:	000098f9 	.word	0x000098f9
    86d0:	000085d5 	.word	0x000085d5
    86d4:	000085bd 	.word	0x000085bd
    86d8:	000085c9 	.word	0x000085c9

000086dc <adc_async_register_channel_buffer>:
{
    86dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    86de:	b083      	sub	sp, #12
    86e0:	0007      	movs	r7, r0
    86e2:	000c      	movs	r4, r1
    86e4:	9200      	str	r2, [sp, #0]
    86e6:	9301      	str	r3, [sp, #4]
	ASSERT(descr && convert_buffer && convert_buffer_length);
    86e8:	2800      	cmp	r0, #0
    86ea:	d01b      	beq.n	8724 <adc_async_register_channel_buffer+0x48>
    86ec:	2a00      	cmp	r2, #0
    86ee:	d01b      	beq.n	8728 <adc_async_register_channel_buffer+0x4c>
    86f0:	0018      	movs	r0, r3
    86f2:	1e43      	subs	r3, r0, #1
    86f4:	4198      	sbcs	r0, r3
    86f6:	4e23      	ldr	r6, [pc, #140]	; (8784 <adc_async_register_channel_buffer+0xa8>)
    86f8:	2266      	movs	r2, #102	; 0x66
    86fa:	0031      	movs	r1, r6
    86fc:	4d22      	ldr	r5, [pc, #136]	; (8788 <adc_async_register_channel_buffer+0xac>)
    86fe:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
    8700:	2324      	movs	r3, #36	; 0x24
    8702:	5cfb      	ldrb	r3, [r7, r3]
    8704:	2000      	movs	r0, #0
    8706:	42a3      	cmp	r3, r4
    8708:	4140      	adcs	r0, r0
    870a:	b2c0      	uxtb	r0, r0
    870c:	2267      	movs	r2, #103	; 0x67
    870e:	0031      	movs	r1, r6
    8710:	47a8      	blx	r5
	if (descr->channel_map[channel] != 0xFF) {
    8712:	6a39      	ldr	r1, [r7, #32]
    8714:	5d0b      	ldrb	r3, [r1, r4]
    8716:	2bff      	cmp	r3, #255	; 0xff
    8718:	d12a      	bne.n	8770 <adc_async_register_channel_buffer+0x94>
	for (i = 0; i <= descr->channel_max; i++) {
    871a:	3bdb      	subs	r3, #219	; 0xdb
    871c:	5cf8      	ldrb	r0, [r7, r3]
    871e:	2600      	movs	r6, #0
    8720:	2300      	movs	r3, #0
    8722:	e007      	b.n	8734 <adc_async_register_channel_buffer+0x58>
	ASSERT(descr && convert_buffer && convert_buffer_length);
    8724:	2000      	movs	r0, #0
    8726:	e7e6      	b.n	86f6 <adc_async_register_channel_buffer+0x1a>
    8728:	2000      	movs	r0, #0
    872a:	e7e4      	b.n	86f6 <adc_async_register_channel_buffer+0x1a>
	for (i = 0; i <= descr->channel_max; i++) {
    872c:	3301      	adds	r3, #1
    872e:	b2db      	uxtb	r3, r3
    8730:	4283      	cmp	r3, r0
    8732:	d805      	bhi.n	8740 <adc_async_register_channel_buffer+0x64>
		if (descr->channel_map[i] != 0xFF) {
    8734:	5cca      	ldrb	r2, [r1, r3]
    8736:	2aff      	cmp	r2, #255	; 0xff
    8738:	d0f8      	beq.n	872c <adc_async_register_channel_buffer+0x50>
			index++;
    873a:	3601      	adds	r6, #1
    873c:	b2f6      	uxtb	r6, r6
    873e:	e7f5      	b.n	872c <adc_async_register_channel_buffer+0x50>
	if (index > descr->channel_amount) {
    8740:	2325      	movs	r3, #37	; 0x25
    8742:	5cfb      	ldrb	r3, [r7, r3]
    8744:	42b3      	cmp	r3, r6
    8746:	d316      	bcc.n	8776 <adc_async_register_channel_buffer+0x9a>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    8748:	0073      	lsls	r3, r6, #1
    874a:	199b      	adds	r3, r3, r6
    874c:	00dd      	lsls	r5, r3, #3
    874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8750:	1958      	adds	r0, r3, r5
    8752:	3004      	adds	r0, #4
    8754:	9a01      	ldr	r2, [sp, #4]
    8756:	9900      	ldr	r1, [sp, #0]
    8758:	4b0c      	ldr	r3, [pc, #48]	; (878c <adc_async_register_channel_buffer+0xb0>)
    875a:	4798      	blx	r3
    875c:	2800      	cmp	r0, #0
    875e:	d10d      	bne.n	877c <adc_async_register_channel_buffer+0xa0>
	descr->channel_map[channel]            = index;
    8760:	6a3b      	ldr	r3, [r7, #32]
    8762:	551e      	strb	r6, [r3, r4]
	descr->descr_ch[index].bytes_in_buffer = 0;
    8764:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8766:	195b      	adds	r3, r3, r5
    8768:	2200      	movs	r2, #0
    876a:	829a      	strh	r2, [r3, #20]
}
    876c:	b003      	add	sp, #12
    876e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
    8770:	200d      	movs	r0, #13
    8772:	4240      	negs	r0, r0
    8774:	e7fa      	b.n	876c <adc_async_register_channel_buffer+0x90>
		return ERR_NO_RESOURCE;
    8776:	201c      	movs	r0, #28
    8778:	4240      	negs	r0, r0
    877a:	e7f7      	b.n	876c <adc_async_register_channel_buffer+0x90>
		return ERR_INVALID_ARG;
    877c:	200d      	movs	r0, #13
    877e:	4240      	negs	r0, r0
    8780:	e7f4      	b.n	876c <adc_async_register_channel_buffer+0x90>
    8782:	46c0      	nop			; (mov r8, r8)
    8784:	0000e874 	.word	0x0000e874
    8788:	0000959d 	.word	0x0000959d
    878c:	0000964d 	.word	0x0000964d

00008790 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    8790:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    8794:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    8796:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    8798:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    879c:	4770      	bx	lr

0000879e <atomic_leave_critical>:
    879e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    87a2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    87a4:	f383 8810 	msr	PRIMASK, r3
}
    87a8:	4770      	bx	lr
	...

000087ac <calendar_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_init(struct calendar_descriptor *const calendar, const void *hw)
{
    87ac:	b570      	push	{r4, r5, r6, lr}
    87ae:	0004      	movs	r4, r0
    87b0:	000d      	movs	r5, r1
	int32_t ret = 0;

	/* Sanity check arguments */
	ASSERT(calendar);
    87b2:	1e43      	subs	r3, r0, #1
    87b4:	4198      	sbcs	r0, r3
    87b6:	b2c0      	uxtb	r0, r0
    87b8:	22e0      	movs	r2, #224	; 0xe0
    87ba:	0052      	lsls	r2, r2, #1
    87bc:	4909      	ldr	r1, [pc, #36]	; (87e4 <calendar_init+0x38>)
    87be:	4b0a      	ldr	r3, [pc, #40]	; (87e8 <calendar_init+0x3c>)
    87c0:	4798      	blx	r3

	if (calendar->device.hw == hw) {
    87c2:	6823      	ldr	r3, [r4, #0]
    87c4:	42ab      	cmp	r3, r5
    87c6:	d008      	beq.n	87da <calendar_init+0x2e>
		/* Already initialized with current configuration */
		return ERR_NONE;
	} else if (calendar->device.hw != NULL) {
    87c8:	2b00      	cmp	r3, #0
    87ca:	d108      	bne.n	87de <calendar_init+0x32>
		/* Initialized with another configuration */
		return ERR_ALREADY_INITIALIZED;
	}
	calendar->device.hw = (void *)hw;
    87cc:	6025      	str	r5, [r4, #0]
	ret                 = _calendar_init(&calendar->device);
    87ce:	0020      	movs	r0, r4
    87d0:	4b06      	ldr	r3, [pc, #24]	; (87ec <calendar_init+0x40>)
    87d2:	4798      	blx	r3
	calendar->base_year = DEFAULT_BASE_YEAR;
    87d4:	4b06      	ldr	r3, [pc, #24]	; (87f0 <calendar_init+0x44>)
    87d6:	6163      	str	r3, [r4, #20]

	return ret;
}
    87d8:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_NONE;
    87da:	2000      	movs	r0, #0
    87dc:	e7fc      	b.n	87d8 <calendar_init+0x2c>
		return ERR_ALREADY_INITIALIZED;
    87de:	2012      	movs	r0, #18
    87e0:	4240      	negs	r0, r0
    87e2:	e7f9      	b.n	87d8 <calendar_init+0x2c>
    87e4:	0000e890 	.word	0x0000e890
    87e8:	0000959d 	.word	0x0000959d
    87ec:	00009c3d 	.word	0x00009c3d
    87f0:	000007b2 	.word	0x000007b2

000087f4 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    87f4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    87f6:	4b04      	ldr	r3, [pc, #16]	; (8808 <delay_us+0x14>)
    87f8:	681c      	ldr	r4, [r3, #0]
    87fa:	4b04      	ldr	r3, [pc, #16]	; (880c <delay_us+0x18>)
    87fc:	4798      	blx	r3
    87fe:	0001      	movs	r1, r0
    8800:	0020      	movs	r0, r4
    8802:	4b03      	ldr	r3, [pc, #12]	; (8810 <delay_us+0x1c>)
    8804:	4798      	blx	r3
}
    8806:	bd10      	pop	{r4, pc}
    8808:	20000460 	.word	0x20000460
    880c:	000099e1 	.word	0x000099e1
    8810:	000099f9 	.word	0x000099f9

00008814 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    8814:	b510      	push	{r4, lr}
    8816:	b084      	sub	sp, #16
    8818:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    881a:	ab01      	add	r3, sp, #4
    881c:	3814      	subs	r0, #20
    881e:	8b82      	ldrh	r2, [r0, #28]
    8820:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    8822:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
    8824:	4a05      	ldr	r2, [pc, #20]	; (883c <i2c_m_sync_write+0x28>)
    8826:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
    8828:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    882a:	0019      	movs	r1, r3
    882c:	4b04      	ldr	r3, [pc, #16]	; (8840 <i2c_m_sync_write+0x2c>)
    882e:	4798      	blx	r3

	if (ret) {
    8830:	2800      	cmp	r0, #0
    8832:	d100      	bne.n	8836 <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
    8834:	0020      	movs	r0, r4
}
    8836:	b004      	add	sp, #16
    8838:	bd10      	pop	{r4, pc}
    883a:	46c0      	nop			; (mov r8, r8)
    883c:	ffff8000 	.word	0xffff8000
    8840:	0000a1a1 	.word	0x0000a1a1

00008844 <i2c_m_sync_read>:
{
    8844:	b510      	push	{r4, lr}
    8846:	b084      	sub	sp, #16
    8848:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
    884a:	ab01      	add	r3, sp, #4
    884c:	3814      	subs	r0, #20
    884e:	8b82      	ldrh	r2, [r0, #28]
    8850:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    8852:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    8854:	4a05      	ldr	r2, [pc, #20]	; (886c <i2c_m_sync_read+0x28>)
    8856:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
    8858:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    885a:	0019      	movs	r1, r3
    885c:	4b04      	ldr	r3, [pc, #16]	; (8870 <i2c_m_sync_read+0x2c>)
    885e:	4798      	blx	r3
	if (ret) {
    8860:	2800      	cmp	r0, #0
    8862:	d100      	bne.n	8866 <i2c_m_sync_read+0x22>
	return n;
    8864:	0020      	movs	r0, r4
}
    8866:	b004      	add	sp, #16
    8868:	bd10      	pop	{r4, pc}
    886a:	46c0      	nop			; (mov r8, r8)
    886c:	ffff8001 	.word	0xffff8001
    8870:	0000a1a1 	.word	0x0000a1a1

00008874 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    8874:	b570      	push	{r4, r5, r6, lr}
    8876:	0004      	movs	r4, r0
    8878:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    887a:	1e43      	subs	r3, r0, #1
    887c:	4198      	sbcs	r0, r3
    887e:	b2c0      	uxtb	r0, r0
    8880:	225e      	movs	r2, #94	; 0x5e
    8882:	4907      	ldr	r1, [pc, #28]	; (88a0 <i2c_m_sync_init+0x2c>)
    8884:	4b07      	ldr	r3, [pc, #28]	; (88a4 <i2c_m_sync_init+0x30>)
    8886:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    8888:	0029      	movs	r1, r5
    888a:	0020      	movs	r0, r4
    888c:	4b06      	ldr	r3, [pc, #24]	; (88a8 <i2c_m_sync_init+0x34>)
    888e:	4798      	blx	r3
	if (init_status) {
    8890:	2800      	cmp	r0, #0
    8892:	d103      	bne.n	889c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    8894:	4b05      	ldr	r3, [pc, #20]	; (88ac <i2c_m_sync_init+0x38>)
    8896:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
    8898:	4b05      	ldr	r3, [pc, #20]	; (88b0 <i2c_m_sync_init+0x3c>)
    889a:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
    889c:	bd70      	pop	{r4, r5, r6, pc}
    889e:	46c0      	nop			; (mov r8, r8)
    88a0:	0000e8ac 	.word	0x0000e8ac
    88a4:	0000959d 	.word	0x0000959d
    88a8:	0000a0ed 	.word	0x0000a0ed
    88ac:	00008845 	.word	0x00008845
    88b0:	00008815 	.word	0x00008815

000088b4 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    88b4:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
    88b6:	4b01      	ldr	r3, [pc, #4]	; (88bc <i2c_m_sync_enable+0x8>)
    88b8:	4798      	blx	r3
}
    88ba:	bd10      	pop	{r4, pc}
    88bc:	0000a11d 	.word	0x0000a11d

000088c0 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    88c0:	0589      	lsls	r1, r1, #22
    88c2:	0d89      	lsrs	r1, r1, #22
    88c4:	2380      	movs	r3, #128	; 0x80
    88c6:	00db      	lsls	r3, r3, #3
    88c8:	401a      	ands	r2, r3
    88ca:	430a      	orrs	r2, r1
    88cc:	8382      	strh	r2, [r0, #28]
}
    88ce:	0010      	movs	r0, r2
    88d0:	4770      	bx	lr

000088d2 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
    88d2:	3014      	adds	r0, #20
    88d4:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
    88d6:	2000      	movs	r0, #0
    88d8:	4770      	bx	lr
	...

000088dc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    88dc:	b570      	push	{r4, r5, r6, lr}
    88de:	0006      	movs	r6, r0
    88e0:	000c      	movs	r4, r1
    88e2:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    88e4:	2800      	cmp	r0, #0
    88e6:	d00d      	beq.n	8904 <io_write+0x28>
    88e8:	0008      	movs	r0, r1
    88ea:	1e43      	subs	r3, r0, #1
    88ec:	4198      	sbcs	r0, r3
    88ee:	b2c0      	uxtb	r0, r0
    88f0:	2234      	movs	r2, #52	; 0x34
    88f2:	4905      	ldr	r1, [pc, #20]	; (8908 <io_write+0x2c>)
    88f4:	4b05      	ldr	r3, [pc, #20]	; (890c <io_write+0x30>)
    88f6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    88f8:	6833      	ldr	r3, [r6, #0]
    88fa:	002a      	movs	r2, r5
    88fc:	0021      	movs	r1, r4
    88fe:	0030      	movs	r0, r6
    8900:	4798      	blx	r3
}
    8902:	bd70      	pop	{r4, r5, r6, pc}
    8904:	2000      	movs	r0, #0
    8906:	e7f3      	b.n	88f0 <io_write+0x14>
    8908:	0000e8c8 	.word	0x0000e8c8
    890c:	0000959d 	.word	0x0000959d

00008910 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    8910:	b570      	push	{r4, r5, r6, lr}
    8912:	0006      	movs	r6, r0
    8914:	000c      	movs	r4, r1
    8916:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
    8918:	2800      	cmp	r0, #0
    891a:	d00d      	beq.n	8938 <io_read+0x28>
    891c:	0008      	movs	r0, r1
    891e:	1e43      	subs	r3, r0, #1
    8920:	4198      	sbcs	r0, r3
    8922:	b2c0      	uxtb	r0, r0
    8924:	223d      	movs	r2, #61	; 0x3d
    8926:	4905      	ldr	r1, [pc, #20]	; (893c <io_read+0x2c>)
    8928:	4b05      	ldr	r3, [pc, #20]	; (8940 <io_read+0x30>)
    892a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    892c:	6873      	ldr	r3, [r6, #4]
    892e:	002a      	movs	r2, r5
    8930:	0021      	movs	r1, r4
    8932:	0030      	movs	r0, r6
    8934:	4798      	blx	r3
}
    8936:	bd70      	pop	{r4, r5, r6, pc}
    8938:	2000      	movs	r0, #0
    893a:	e7f3      	b.n	8924 <io_read+0x14>
    893c:	0000e8c8 	.word	0x0000e8c8
    8940:	0000959d 	.word	0x0000959d

00008944 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    8944:	b570      	push	{r4, r5, r6, lr}
    8946:	0004      	movs	r4, r0
    8948:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    894a:	2800      	cmp	r0, #0
    894c:	d016      	beq.n	897c <spi_m_sync_init+0x38>
    894e:	0008      	movs	r0, r1
    8950:	1e43      	subs	r3, r0, #1
    8952:	4198      	sbcs	r0, r3
    8954:	b2c0      	uxtb	r0, r0
    8956:	2240      	movs	r2, #64	; 0x40
    8958:	4909      	ldr	r1, [pc, #36]	; (8980 <spi_m_sync_init+0x3c>)
    895a:	4b0a      	ldr	r3, [pc, #40]	; (8984 <spi_m_sync_init+0x40>)
    895c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    895e:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
    8960:	1d20      	adds	r0, r4, #4
    8962:	0029      	movs	r1, r5
    8964:	4b08      	ldr	r3, [pc, #32]	; (8988 <spi_m_sync_init+0x44>)
    8966:	4798      	blx	r3

	if (rc < 0) {
    8968:	2800      	cmp	r0, #0
    896a:	db06      	blt.n	897a <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    896c:	4b07      	ldr	r3, [pc, #28]	; (898c <spi_m_sync_init+0x48>)
    896e:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    8970:	4b07      	ldr	r3, [pc, #28]	; (8990 <spi_m_sync_init+0x4c>)
    8972:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    8974:	4b07      	ldr	r3, [pc, #28]	; (8994 <spi_m_sync_init+0x50>)
    8976:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    8978:	2000      	movs	r0, #0
}
    897a:	bd70      	pop	{r4, r5, r6, pc}
    897c:	2000      	movs	r0, #0
    897e:	e7ea      	b.n	8956 <spi_m_sync_init+0x12>
    8980:	0000e8dc 	.word	0x0000e8dc
    8984:	0000959d 	.word	0x0000959d
    8988:	0000a701 	.word	0x0000a701
    898c:	ffff8000 	.word	0xffff8000
    8990:	00008a1d 	.word	0x00008a1d
    8994:	000089e1 	.word	0x000089e1

00008998 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    8998:	b530      	push	{r4, r5, lr}
    899a:	b087      	sub	sp, #28
    899c:	0004      	movs	r4, r0
    899e:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    89a0:	2800      	cmp	r0, #0
    89a2:	d014      	beq.n	89ce <spi_m_sync_transfer+0x36>
    89a4:	0008      	movs	r0, r1
    89a6:	1e43      	subs	r3, r0, #1
    89a8:	4198      	sbcs	r0, r3
    89aa:	b2c0      	uxtb	r0, r0
    89ac:	22b3      	movs	r2, #179	; 0xb3
    89ae:	4909      	ldr	r1, [pc, #36]	; (89d4 <spi_m_sync_transfer+0x3c>)
    89b0:	4b09      	ldr	r3, [pc, #36]	; (89d8 <spi_m_sync_transfer+0x40>)
    89b2:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    89b4:	682b      	ldr	r3, [r5, #0]
    89b6:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
    89b8:	686b      	ldr	r3, [r5, #4]
    89ba:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
    89bc:	68ab      	ldr	r3, [r5, #8]
    89be:	9301      	str	r3, [sp, #4]
    89c0:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
    89c2:	1d20      	adds	r0, r4, #4
    89c4:	a903      	add	r1, sp, #12
    89c6:	4b05      	ldr	r3, [pc, #20]	; (89dc <spi_m_sync_transfer+0x44>)
    89c8:	4798      	blx	r3
}
    89ca:	b007      	add	sp, #28
    89cc:	bd30      	pop	{r4, r5, pc}
    89ce:	2000      	movs	r0, #0
    89d0:	e7ec      	b.n	89ac <spi_m_sync_transfer+0x14>
    89d2:	46c0      	nop			; (mov r8, r8)
    89d4:	0000e8dc 	.word	0x0000e8dc
    89d8:	0000959d 	.word	0x0000959d
    89dc:	0000a7fd 	.word	0x0000a7fd

000089e0 <_spi_m_sync_io_write>:
{
    89e0:	b570      	push	{r4, r5, r6, lr}
    89e2:	b084      	sub	sp, #16
    89e4:	0004      	movs	r4, r0
    89e6:	000e      	movs	r6, r1
    89e8:	0015      	movs	r5, r2
	ASSERT(io);
    89ea:	1e43      	subs	r3, r0, #1
    89ec:	4198      	sbcs	r0, r3
    89ee:	b2c0      	uxtb	r0, r0
    89f0:	22a3      	movs	r2, #163	; 0xa3
    89f2:	4907      	ldr	r1, [pc, #28]	; (8a10 <_spi_m_sync_io_write+0x30>)
    89f4:	4b07      	ldr	r3, [pc, #28]	; (8a14 <_spi_m_sync_io_write+0x34>)
    89f6:	4798      	blx	r3
	xfer.rxbuf = 0;
    89f8:	2300      	movs	r3, #0
    89fa:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    89fc:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    89fe:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    8a00:	0020      	movs	r0, r4
    8a02:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    8a04:	a901      	add	r1, sp, #4
    8a06:	4b04      	ldr	r3, [pc, #16]	; (8a18 <_spi_m_sync_io_write+0x38>)
    8a08:	4798      	blx	r3
}
    8a0a:	b004      	add	sp, #16
    8a0c:	bd70      	pop	{r4, r5, r6, pc}
    8a0e:	46c0      	nop			; (mov r8, r8)
    8a10:	0000e8dc 	.word	0x0000e8dc
    8a14:	0000959d 	.word	0x0000959d
    8a18:	00008999 	.word	0x00008999

00008a1c <_spi_m_sync_io_read>:
{
    8a1c:	b570      	push	{r4, r5, r6, lr}
    8a1e:	b084      	sub	sp, #16
    8a20:	0004      	movs	r4, r0
    8a22:	000e      	movs	r6, r1
    8a24:	0015      	movs	r5, r2
	ASSERT(io);
    8a26:	1e43      	subs	r3, r0, #1
    8a28:	4198      	sbcs	r0, r3
    8a2a:	b2c0      	uxtb	r0, r0
    8a2c:	2287      	movs	r2, #135	; 0x87
    8a2e:	4907      	ldr	r1, [pc, #28]	; (8a4c <_spi_m_sync_io_read+0x30>)
    8a30:	4b07      	ldr	r3, [pc, #28]	; (8a50 <_spi_m_sync_io_read+0x34>)
    8a32:	4798      	blx	r3
	xfer.rxbuf = buf;
    8a34:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    8a36:	2300      	movs	r3, #0
    8a38:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    8a3a:	9503      	str	r5, [sp, #12]
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
    8a3c:	0020      	movs	r0, r4
    8a3e:	380c      	subs	r0, #12
	return spi_m_sync_transfer(spi, &xfer);
    8a40:	a901      	add	r1, sp, #4
    8a42:	4b04      	ldr	r3, [pc, #16]	; (8a54 <_spi_m_sync_io_read+0x38>)
    8a44:	4798      	blx	r3
}
    8a46:	b004      	add	sp, #16
    8a48:	bd70      	pop	{r4, r5, r6, pc}
    8a4a:	46c0      	nop			; (mov r8, r8)
    8a4c:	0000e8dc 	.word	0x0000e8dc
    8a50:	0000959d 	.word	0x0000959d
    8a54:	00008999 	.word	0x00008999

00008a58 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    8a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a5a:	46ce      	mov	lr, r9
    8a5c:	4647      	mov	r7, r8
    8a5e:	b580      	push	{r7, lr}
    8a60:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    8a62:	6803      	ldr	r3, [r0, #0]
    8a64:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    8a66:	2b00      	cmp	r3, #0
    8a68:	d005      	beq.n	8a76 <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    8a6a:	688e      	ldr	r6, [r1, #8]
    8a6c:	001c      	movs	r4, r3
    8a6e:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    8a70:	2701      	movs	r7, #1
    8a72:	1abf      	subs	r7, r7, r2
    8a74:	e00d      	b.n	8a92 <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
    8a76:	4b12      	ldr	r3, [pc, #72]	; (8ac0 <timer_add_timer_task+0x68>)
    8a78:	4798      	blx	r3
		return;
    8a7a:	e018      	b.n	8aae <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    8a7c:	18fb      	adds	r3, r7, r3
    8a7e:	68a0      	ldr	r0, [r4, #8]
    8a80:	4680      	mov	r8, r0
    8a82:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
    8a84:	42b3      	cmp	r3, r6
    8a86:	d20c      	bcs.n	8aa2 <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    8a88:	6823      	ldr	r3, [r4, #0]
    8a8a:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    8a8c:	2b00      	cmp	r3, #0
    8a8e:	d00b      	beq.n	8aa8 <timer_add_timer_task+0x50>
    8a90:	001c      	movs	r4, r3
		if (it->time_label <= time) {
    8a92:	6863      	ldr	r3, [r4, #4]
    8a94:	4293      	cmp	r3, r2
    8a96:	d8f1      	bhi.n	8a7c <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
    8a98:	68a0      	ldr	r0, [r4, #8]
    8a9a:	4680      	mov	r8, r0
    8a9c:	4443      	add	r3, r8
    8a9e:	1a9b      	subs	r3, r3, r2
    8aa0:	e7f0      	b.n	8a84 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
    8aa2:	45a4      	cmp	ip, r4
    8aa4:	d007      	beq.n	8ab6 <timer_add_timer_task+0x5e>
    8aa6:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    8aa8:	0020      	movs	r0, r4
    8aaa:	4b06      	ldr	r3, [pc, #24]	; (8ac4 <timer_add_timer_task+0x6c>)
    8aac:	4798      	blx	r3
	}
}
    8aae:	bc0c      	pop	{r2, r3}
    8ab0:	4690      	mov	r8, r2
    8ab2:	4699      	mov	r9, r3
    8ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    8ab6:	4648      	mov	r0, r9
    8ab8:	4b01      	ldr	r3, [pc, #4]	; (8ac0 <timer_add_timer_task+0x68>)
    8aba:	4798      	blx	r3
    8abc:	e7f7      	b.n	8aae <timer_add_timer_task+0x56>
    8abe:	46c0      	nop			; (mov r8, r8)
    8ac0:	000095c9 	.word	0x000095c9
    8ac4:	000095f5 	.word	0x000095f5

00008ac8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    8ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8aca:	46c6      	mov	lr, r8
    8acc:	b500      	push	{lr}
    8ace:	b082      	sub	sp, #8
    8ad0:	0007      	movs	r7, r0
	return (void *)list->head;
    8ad2:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    8ad4:	6903      	ldr	r3, [r0, #16]
    8ad6:	3301      	adds	r3, #1
    8ad8:	4698      	mov	r8, r3
    8ada:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    8adc:	7e03      	ldrb	r3, [r0, #24]
    8ade:	07db      	lsls	r3, r3, #31
    8ae0:	d411      	bmi.n	8b06 <timer_process_counted+0x3e>
    8ae2:	7e03      	ldrb	r3, [r0, #24]
    8ae4:	079b      	lsls	r3, r3, #30
    8ae6:	d40e      	bmi.n	8b06 <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    8ae8:	2c00      	cmp	r4, #0
    8aea:	d010      	beq.n	8b0e <timer_process_counted+0x46>
    8aec:	4643      	mov	r3, r8
    8aee:	6862      	ldr	r2, [r4, #4]
    8af0:	1a9b      	subs	r3, r3, r2
    8af2:	68a2      	ldr	r2, [r4, #8]
    8af4:	4293      	cmp	r3, r2
    8af6:	d30a      	bcc.n	8b0e <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    8af8:	2314      	movs	r3, #20
    8afa:	469c      	mov	ip, r3
    8afc:	4484      	add	ip, r0
    8afe:	4663      	mov	r3, ip
    8b00:	9301      	str	r3, [sp, #4]
    8b02:	4e12      	ldr	r6, [pc, #72]	; (8b4c <timer_process_counted+0x84>)
    8b04:	e014      	b.n	8b30 <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    8b06:	7e3b      	ldrb	r3, [r7, #24]
    8b08:	2202      	movs	r2, #2
    8b0a:	4313      	orrs	r3, r2
    8b0c:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
    8b0e:	b002      	add	sp, #8
    8b10:	bc04      	pop	{r2}
    8b12:	4690      	mov	r8, r2
    8b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b16:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
    8b18:	68e3      	ldr	r3, [r4, #12]
    8b1a:	0020      	movs	r0, r4
    8b1c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    8b1e:	2d00      	cmp	r5, #0
    8b20:	d0f5      	beq.n	8b0e <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    8b22:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    8b24:	4643      	mov	r3, r8
    8b26:	686a      	ldr	r2, [r5, #4]
    8b28:	1a9b      	subs	r3, r3, r2
    8b2a:	68aa      	ldr	r2, [r5, #8]
    8b2c:	4293      	cmp	r3, r2
    8b2e:	d3ee      	bcc.n	8b0e <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
    8b30:	9801      	ldr	r0, [sp, #4]
    8b32:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
    8b34:	7c23      	ldrb	r3, [r4, #16]
    8b36:	2b01      	cmp	r3, #1
    8b38:	d1ed      	bne.n	8b16 <timer_process_counted+0x4e>
			tmp->time_label = time;
    8b3a:	4643      	mov	r3, r8
    8b3c:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    8b3e:	4642      	mov	r2, r8
    8b40:	0021      	movs	r1, r4
    8b42:	9801      	ldr	r0, [sp, #4]
    8b44:	4b02      	ldr	r3, [pc, #8]	; (8b50 <timer_process_counted+0x88>)
    8b46:	4798      	blx	r3
    8b48:	e7e5      	b.n	8b16 <timer_process_counted+0x4e>
    8b4a:	46c0      	nop			; (mov r8, r8)
    8b4c:	0000963d 	.word	0x0000963d
    8b50:	00008a59 	.word	0x00008a59

00008b54 <timer_init>:
{
    8b54:	b570      	push	{r4, r5, r6, lr}
    8b56:	0005      	movs	r5, r0
    8b58:	000c      	movs	r4, r1
	ASSERT(descr && hw);
    8b5a:	2800      	cmp	r0, #0
    8b5c:	d011      	beq.n	8b82 <timer_init+0x2e>
    8b5e:	0008      	movs	r0, r1
    8b60:	1e43      	subs	r3, r0, #1
    8b62:	4198      	sbcs	r0, r3
    8b64:	b2c0      	uxtb	r0, r0
    8b66:	223b      	movs	r2, #59	; 0x3b
    8b68:	4907      	ldr	r1, [pc, #28]	; (8b88 <timer_init+0x34>)
    8b6a:	4b08      	ldr	r3, [pc, #32]	; (8b8c <timer_init+0x38>)
    8b6c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    8b6e:	0021      	movs	r1, r4
    8b70:	0028      	movs	r0, r5
    8b72:	4b07      	ldr	r3, [pc, #28]	; (8b90 <timer_init+0x3c>)
    8b74:	4798      	blx	r3
	descr->time                           = 0;
    8b76:	2300      	movs	r3, #0
    8b78:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    8b7a:	4b06      	ldr	r3, [pc, #24]	; (8b94 <timer_init+0x40>)
    8b7c:	602b      	str	r3, [r5, #0]
}
    8b7e:	2000      	movs	r0, #0
    8b80:	bd70      	pop	{r4, r5, r6, pc}
    8b82:	2000      	movs	r0, #0
    8b84:	e7ef      	b.n	8b66 <timer_init+0x12>
    8b86:	46c0      	nop			; (mov r8, r8)
    8b88:	0000e8f8 	.word	0x0000e8f8
    8b8c:	0000959d 	.word	0x0000959d
    8b90:	0000a941 	.word	0x0000a941
    8b94:	00008ac9 	.word	0x00008ac9

00008b98 <timer_start>:
{
    8b98:	b510      	push	{r4, lr}
    8b9a:	0004      	movs	r4, r0
	ASSERT(descr);
    8b9c:	1e43      	subs	r3, r0, #1
    8b9e:	4198      	sbcs	r0, r3
    8ba0:	b2c0      	uxtb	r0, r0
    8ba2:	2253      	movs	r2, #83	; 0x53
    8ba4:	4907      	ldr	r1, [pc, #28]	; (8bc4 <timer_start+0x2c>)
    8ba6:	4b08      	ldr	r3, [pc, #32]	; (8bc8 <timer_start+0x30>)
    8ba8:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
    8baa:	0020      	movs	r0, r4
    8bac:	4b07      	ldr	r3, [pc, #28]	; (8bcc <timer_start+0x34>)
    8bae:	4798      	blx	r3
    8bb0:	2800      	cmp	r0, #0
    8bb2:	d104      	bne.n	8bbe <timer_start+0x26>
	_timer_start(&descr->device);
    8bb4:	0020      	movs	r0, r4
    8bb6:	4b06      	ldr	r3, [pc, #24]	; (8bd0 <timer_start+0x38>)
    8bb8:	4798      	blx	r3
	return ERR_NONE;
    8bba:	2000      	movs	r0, #0
}
    8bbc:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    8bbe:	2011      	movs	r0, #17
    8bc0:	4240      	negs	r0, r0
    8bc2:	e7fb      	b.n	8bbc <timer_start+0x24>
    8bc4:	0000e8f8 	.word	0x0000e8f8
    8bc8:	0000959d 	.word	0x0000959d
    8bcc:	0000aae9 	.word	0x0000aae9
    8bd0:	0000aad5 	.word	0x0000aad5

00008bd4 <timer_add_task>:
{
    8bd4:	b570      	push	{r4, r5, r6, lr}
    8bd6:	b082      	sub	sp, #8
    8bd8:	0004      	movs	r4, r0
    8bda:	000d      	movs	r5, r1
	ASSERT(descr && task);
    8bdc:	2800      	cmp	r0, #0
    8bde:	d024      	beq.n	8c2a <timer_add_task+0x56>
    8be0:	0008      	movs	r0, r1
    8be2:	1e43      	subs	r3, r0, #1
    8be4:	4198      	sbcs	r0, r3
    8be6:	b2c0      	uxtb	r0, r0
    8be8:	227a      	movs	r2, #122	; 0x7a
    8bea:	491e      	ldr	r1, [pc, #120]	; (8c64 <timer_add_task+0x90>)
    8bec:	4b1e      	ldr	r3, [pc, #120]	; (8c68 <timer_add_task+0x94>)
    8bee:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    8bf0:	7e23      	ldrb	r3, [r4, #24]
    8bf2:	2201      	movs	r2, #1
    8bf4:	4313      	orrs	r3, r2
    8bf6:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
    8bf8:	0026      	movs	r6, r4
    8bfa:	3614      	adds	r6, #20
    8bfc:	0029      	movs	r1, r5
    8bfe:	0030      	movs	r0, r6
    8c00:	4b1a      	ldr	r3, [pc, #104]	; (8c6c <timer_add_task+0x98>)
    8c02:	4798      	blx	r3
    8c04:	2800      	cmp	r0, #0
    8c06:	d112      	bne.n	8c2e <timer_add_task+0x5a>
	task->time_label = descr->time;
    8c08:	6923      	ldr	r3, [r4, #16]
    8c0a:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    8c0c:	6922      	ldr	r2, [r4, #16]
    8c0e:	0029      	movs	r1, r5
    8c10:	0030      	movs	r0, r6
    8c12:	4b17      	ldr	r3, [pc, #92]	; (8c70 <timer_add_task+0x9c>)
    8c14:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    8c16:	7e23      	ldrb	r3, [r4, #24]
    8c18:	2201      	movs	r2, #1
    8c1a:	4393      	bics	r3, r2
    8c1c:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    8c1e:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
    8c20:	2000      	movs	r0, #0
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    8c22:	079b      	lsls	r3, r3, #30
    8c24:	d40f      	bmi.n	8c46 <timer_add_task+0x72>
}
    8c26:	b002      	add	sp, #8
    8c28:	bd70      	pop	{r4, r5, r6, pc}
    8c2a:	2000      	movs	r0, #0
    8c2c:	e7dc      	b.n	8be8 <timer_add_task+0x14>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    8c2e:	7e23      	ldrb	r3, [r4, #24]
    8c30:	2201      	movs	r2, #1
    8c32:	4393      	bics	r3, r2
    8c34:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
    8c36:	327e      	adds	r2, #126	; 0x7e
    8c38:	490a      	ldr	r1, [pc, #40]	; (8c64 <timer_add_task+0x90>)
    8c3a:	2000      	movs	r0, #0
    8c3c:	4b0a      	ldr	r3, [pc, #40]	; (8c68 <timer_add_task+0x94>)
    8c3e:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
    8c40:	2012      	movs	r0, #18
    8c42:	4240      	negs	r0, r0
    8c44:	e7ef      	b.n	8c26 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
    8c46:	a801      	add	r0, sp, #4
    8c48:	4b0a      	ldr	r3, [pc, #40]	; (8c74 <timer_add_task+0xa0>)
    8c4a:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    8c4c:	7e23      	ldrb	r3, [r4, #24]
    8c4e:	2202      	movs	r2, #2
    8c50:	4393      	bics	r3, r2
    8c52:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
    8c54:	0020      	movs	r0, r4
    8c56:	4b08      	ldr	r3, [pc, #32]	; (8c78 <timer_add_task+0xa4>)
    8c58:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    8c5a:	a801      	add	r0, sp, #4
    8c5c:	4b07      	ldr	r3, [pc, #28]	; (8c7c <timer_add_task+0xa8>)
    8c5e:	4798      	blx	r3
	return ERR_NONE;
    8c60:	2000      	movs	r0, #0
    8c62:	e7e0      	b.n	8c26 <timer_add_task+0x52>
    8c64:	0000e8f8 	.word	0x0000e8f8
    8c68:	0000959d 	.word	0x0000959d
    8c6c:	000095a5 	.word	0x000095a5
    8c70:	00008a59 	.word	0x00008a59
    8c74:	00008791 	.word	0x00008791
    8c78:	0000ab01 	.word	0x0000ab01
    8c7c:	0000879f 	.word	0x0000879f

00008c80 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    8c80:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    8c82:	3808      	subs	r0, #8

	descr->stat = 0;
    8c84:	2300      	movs	r3, #0
    8c86:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    8c88:	6a43      	ldr	r3, [r0, #36]	; 0x24
    8c8a:	2b00      	cmp	r3, #0
    8c8c:	d000      	beq.n	8c90 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    8c8e:	4798      	blx	r3
	}
}
    8c90:	bd10      	pop	{r4, pc}

00008c92 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    8c92:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    8c94:	3808      	subs	r0, #8

	descr->stat = 0;
    8c96:	2300      	movs	r3, #0
    8c98:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    8c9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    8c9c:	2b00      	cmp	r3, #0
    8c9e:	d000      	beq.n	8ca2 <usart_error+0x10>
		descr->usart_cb.error(descr);
    8ca0:	4798      	blx	r3
	}
}
    8ca2:	bd10      	pop	{r4, pc}

00008ca4 <usart_fill_rx_buffer>:
{
    8ca4:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    8ca6:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    8ca8:	302c      	adds	r0, #44	; 0x2c
    8caa:	4b04      	ldr	r3, [pc, #16]	; (8cbc <usart_fill_rx_buffer+0x18>)
    8cac:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    8cae:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    8cb0:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    8cb2:	2b00      	cmp	r3, #0
    8cb4:	d001      	beq.n	8cba <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    8cb6:	0020      	movs	r0, r4
    8cb8:	4798      	blx	r3
}
    8cba:	bd10      	pop	{r4, pc}
    8cbc:	000096e9 	.word	0x000096e9

00008cc0 <usart_async_write>:
{
    8cc0:	b570      	push	{r4, r5, r6, lr}
    8cc2:	0004      	movs	r4, r0
    8cc4:	000e      	movs	r6, r1
    8cc6:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    8cc8:	2800      	cmp	r0, #0
    8cca:	d01d      	beq.n	8d08 <usart_async_write+0x48>
    8ccc:	2900      	cmp	r1, #0
    8cce:	d01d      	beq.n	8d0c <usart_async_write+0x4c>
    8cd0:	0010      	movs	r0, r2
    8cd2:	1e43      	subs	r3, r0, #1
    8cd4:	4198      	sbcs	r0, r3
    8cd6:	223c      	movs	r2, #60	; 0x3c
    8cd8:	32ff      	adds	r2, #255	; 0xff
    8cda:	490f      	ldr	r1, [pc, #60]	; (8d18 <usart_async_write+0x58>)
    8cdc:	4b0f      	ldr	r3, [pc, #60]	; (8d1c <usart_async_write+0x5c>)
    8cde:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    8ce0:	2344      	movs	r3, #68	; 0x44
    8ce2:	5ae2      	ldrh	r2, [r4, r3]
    8ce4:	3308      	adds	r3, #8
    8ce6:	5ae3      	ldrh	r3, [r4, r3]
    8ce8:	429a      	cmp	r2, r3
    8cea:	d111      	bne.n	8d10 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
    8cec:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    8cee:	234c      	movs	r3, #76	; 0x4c
    8cf0:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
    8cf2:	2200      	movs	r2, #0
    8cf4:	3b08      	subs	r3, #8
    8cf6:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    8cf8:	3b43      	subs	r3, #67	; 0x43
    8cfa:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    8cfc:	0020      	movs	r0, r4
    8cfe:	3008      	adds	r0, #8
    8d00:	4b07      	ldr	r3, [pc, #28]	; (8d20 <usart_async_write+0x60>)
    8d02:	4798      	blx	r3
	return (int32_t)length;
    8d04:	0028      	movs	r0, r5
}
    8d06:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    8d08:	2000      	movs	r0, #0
    8d0a:	e7e4      	b.n	8cd6 <usart_async_write+0x16>
    8d0c:	2000      	movs	r0, #0
    8d0e:	e7e2      	b.n	8cd6 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
    8d10:	201c      	movs	r0, #28
    8d12:	4240      	negs	r0, r0
    8d14:	e7f7      	b.n	8d06 <usart_async_write+0x46>
    8d16:	46c0      	nop			; (mov r8, r8)
    8d18:	0000e910 	.word	0x0000e910
    8d1c:	0000959d 	.word	0x0000959d
    8d20:	0000a069 	.word	0x0000a069

00008d24 <usart_process_byte_sent>:
{
    8d24:	b570      	push	{r4, r5, r6, lr}
    8d26:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    8d28:	0001      	movs	r1, r0
    8d2a:	3908      	subs	r1, #8
    8d2c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    8d2e:	224c      	movs	r2, #76	; 0x4c
    8d30:	5a8a      	ldrh	r2, [r1, r2]
    8d32:	429a      	cmp	r2, r3
    8d34:	d00c      	beq.n	8d50 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    8d36:	000a      	movs	r2, r1
    8d38:	6c89      	ldr	r1, [r1, #72]	; 0x48
    8d3a:	1c5d      	adds	r5, r3, #1
    8d3c:	2044      	movs	r0, #68	; 0x44
    8d3e:	5215      	strh	r5, [r2, r0]
    8d40:	5cc9      	ldrb	r1, [r1, r3]
    8d42:	0020      	movs	r0, r4
    8d44:	4b04      	ldr	r3, [pc, #16]	; (8d58 <usart_process_byte_sent+0x34>)
    8d46:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    8d48:	0020      	movs	r0, r4
    8d4a:	4b04      	ldr	r3, [pc, #16]	; (8d5c <usart_process_byte_sent+0x38>)
    8d4c:	4798      	blx	r3
}
    8d4e:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    8d50:	4b03      	ldr	r3, [pc, #12]	; (8d60 <usart_process_byte_sent+0x3c>)
    8d52:	4798      	blx	r3
}
    8d54:	e7fb      	b.n	8d4e <usart_process_byte_sent+0x2a>
    8d56:	46c0      	nop			; (mov r8, r8)
    8d58:	0000a061 	.word	0x0000a061
    8d5c:	0000a069 	.word	0x0000a069
    8d60:	0000a071 	.word	0x0000a071

00008d64 <usart_async_read>:
{
    8d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d66:	46ce      	mov	lr, r9
    8d68:	4647      	mov	r7, r8
    8d6a:	b580      	push	{r7, lr}
    8d6c:	b085      	sub	sp, #20
    8d6e:	0005      	movs	r5, r0
    8d70:	000e      	movs	r6, r1
    8d72:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
    8d74:	2800      	cmp	r0, #0
    8d76:	d015      	beq.n	8da4 <usart_async_read+0x40>
    8d78:	2900      	cmp	r1, #0
    8d7a:	d013      	beq.n	8da4 <usart_async_read+0x40>
    8d7c:	2a00      	cmp	r2, #0
    8d7e:	d12a      	bne.n	8dd6 <usart_async_read+0x72>
    8d80:	22ac      	movs	r2, #172	; 0xac
    8d82:	0052      	lsls	r2, r2, #1
    8d84:	4929      	ldr	r1, [pc, #164]	; (8e2c <usart_async_read+0xc8>)
    8d86:	2000      	movs	r0, #0
    8d88:	4b29      	ldr	r3, [pc, #164]	; (8e30 <usart_async_read+0xcc>)
    8d8a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    8d8c:	a803      	add	r0, sp, #12
    8d8e:	4b29      	ldr	r3, [pc, #164]	; (8e34 <usart_async_read+0xd0>)
    8d90:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    8d92:	0028      	movs	r0, r5
    8d94:	3034      	adds	r0, #52	; 0x34
    8d96:	4b28      	ldr	r3, [pc, #160]	; (8e38 <usart_async_read+0xd4>)
    8d98:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    8d9a:	a803      	add	r0, sp, #12
    8d9c:	4b27      	ldr	r3, [pc, #156]	; (8e3c <usart_async_read+0xd8>)
    8d9e:	4798      	blx	r3
	uint16_t                       was_read = 0;
    8da0:	2500      	movs	r5, #0
	return (int32_t)was_read;
    8da2:	e03c      	b.n	8e1e <usart_async_read+0xba>
	ASSERT(descr && buf && length);
    8da4:	22ac      	movs	r2, #172	; 0xac
    8da6:	0052      	lsls	r2, r2, #1
    8da8:	4920      	ldr	r1, [pc, #128]	; (8e2c <usart_async_read+0xc8>)
    8daa:	2000      	movs	r0, #0
    8dac:	4b20      	ldr	r3, [pc, #128]	; (8e30 <usart_async_read+0xcc>)
    8dae:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    8db0:	a803      	add	r0, sp, #12
    8db2:	4b20      	ldr	r3, [pc, #128]	; (8e34 <usart_async_read+0xd0>)
    8db4:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    8db6:	3534      	adds	r5, #52	; 0x34
    8db8:	0028      	movs	r0, r5
    8dba:	9501      	str	r5, [sp, #4]
    8dbc:	4b1e      	ldr	r3, [pc, #120]	; (8e38 <usart_async_read+0xd4>)
    8dbe:	4798      	blx	r3
    8dc0:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    8dc2:	a803      	add	r0, sp, #12
    8dc4:	4b1d      	ldr	r3, [pc, #116]	; (8e3c <usart_async_read+0xd8>)
    8dc6:	4798      	blx	r3
	uint16_t                       was_read = 0;
    8dc8:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    8dca:	4643      	mov	r3, r8
    8dcc:	2b00      	cmp	r3, #0
    8dce:	d026      	beq.n	8e1e <usart_async_read+0xba>
    8dd0:	2f00      	cmp	r7, #0
    8dd2:	d116      	bne.n	8e02 <usart_async_read+0x9e>
    8dd4:	e023      	b.n	8e1e <usart_async_read+0xba>
	ASSERT(descr && buf && length);
    8dd6:	22ac      	movs	r2, #172	; 0xac
    8dd8:	0052      	lsls	r2, r2, #1
    8dda:	4914      	ldr	r1, [pc, #80]	; (8e2c <usart_async_read+0xc8>)
    8ddc:	2001      	movs	r0, #1
    8dde:	4b14      	ldr	r3, [pc, #80]	; (8e30 <usart_async_read+0xcc>)
    8de0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    8de2:	a803      	add	r0, sp, #12
    8de4:	4b13      	ldr	r3, [pc, #76]	; (8e34 <usart_async_read+0xd0>)
    8de6:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    8de8:	3534      	adds	r5, #52	; 0x34
    8dea:	0028      	movs	r0, r5
    8dec:	9501      	str	r5, [sp, #4]
    8dee:	4b12      	ldr	r3, [pc, #72]	; (8e38 <usart_async_read+0xd4>)
    8df0:	4798      	blx	r3
    8df2:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    8df4:	a803      	add	r0, sp, #12
    8df6:	4b11      	ldr	r3, [pc, #68]	; (8e3c <usart_async_read+0xd8>)
    8df8:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    8dfa:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
    8dfc:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    8dfe:	2b00      	cmp	r3, #0
    8e00:	d00d      	beq.n	8e1e <usart_async_read+0xba>
{
    8e02:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    8e04:	4b0e      	ldr	r3, [pc, #56]	; (8e40 <usart_async_read+0xdc>)
    8e06:	4699      	mov	r9, r3
    8e08:	1c65      	adds	r5, r4, #1
    8e0a:	b2ad      	uxth	r5, r5
    8e0c:	1931      	adds	r1, r6, r4
    8e0e:	9801      	ldr	r0, [sp, #4]
    8e10:	47c8      	blx	r9
    8e12:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    8e14:	4544      	cmp	r4, r8
    8e16:	d202      	bcs.n	8e1e <usart_async_read+0xba>
    8e18:	b2a3      	uxth	r3, r4
    8e1a:	429f      	cmp	r7, r3
    8e1c:	d8f4      	bhi.n	8e08 <usart_async_read+0xa4>
}
    8e1e:	0028      	movs	r0, r5
    8e20:	b005      	add	sp, #20
    8e22:	bc0c      	pop	{r2, r3}
    8e24:	4690      	mov	r8, r2
    8e26:	4699      	mov	r9, r3
    8e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e2a:	46c0      	nop			; (mov r8, r8)
    8e2c:	0000e910 	.word	0x0000e910
    8e30:	0000959d 	.word	0x0000959d
    8e34:	00008791 	.word	0x00008791
    8e38:	00009729 	.word	0x00009729
    8e3c:	0000879f 	.word	0x0000879f
    8e40:	000096a1 	.word	0x000096a1

00008e44 <usart_async_init>:
{
    8e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e46:	0004      	movs	r4, r0
    8e48:	000d      	movs	r5, r1
    8e4a:	0016      	movs	r6, r2
    8e4c:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    8e4e:	2800      	cmp	r0, #0
    8e50:	d026      	beq.n	8ea0 <usart_async_init+0x5c>
    8e52:	2900      	cmp	r1, #0
    8e54:	d026      	beq.n	8ea4 <usart_async_init+0x60>
    8e56:	2a00      	cmp	r2, #0
    8e58:	d026      	beq.n	8ea8 <usart_async_init+0x64>
    8e5a:	0018      	movs	r0, r3
    8e5c:	1e43      	subs	r3, r0, #1
    8e5e:	4198      	sbcs	r0, r3
    8e60:	223a      	movs	r2, #58	; 0x3a
    8e62:	4914      	ldr	r1, [pc, #80]	; (8eb4 <usart_async_init+0x70>)
    8e64:	4b14      	ldr	r3, [pc, #80]	; (8eb8 <usart_async_init+0x74>)
    8e66:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    8e68:	0020      	movs	r0, r4
    8e6a:	3034      	adds	r0, #52	; 0x34
    8e6c:	003a      	movs	r2, r7
    8e6e:	0031      	movs	r1, r6
    8e70:	4b12      	ldr	r3, [pc, #72]	; (8ebc <usart_async_init+0x78>)
    8e72:	4798      	blx	r3
    8e74:	2800      	cmp	r0, #0
    8e76:	d119      	bne.n	8eac <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
    8e78:	0020      	movs	r0, r4
    8e7a:	3008      	adds	r0, #8
    8e7c:	0029      	movs	r1, r5
    8e7e:	4b10      	ldr	r3, [pc, #64]	; (8ec0 <usart_async_init+0x7c>)
    8e80:	4798      	blx	r3
	if (init_status) {
    8e82:	2800      	cmp	r0, #0
    8e84:	d10b      	bne.n	8e9e <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    8e86:	4b0f      	ldr	r3, [pc, #60]	; (8ec4 <usart_async_init+0x80>)
    8e88:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    8e8a:	4b0f      	ldr	r3, [pc, #60]	; (8ec8 <usart_async_init+0x84>)
    8e8c:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    8e8e:	4b0f      	ldr	r3, [pc, #60]	; (8ecc <usart_async_init+0x88>)
    8e90:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    8e92:	4b0f      	ldr	r3, [pc, #60]	; (8ed0 <usart_async_init+0x8c>)
    8e94:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    8e96:	4b0f      	ldr	r3, [pc, #60]	; (8ed4 <usart_async_init+0x90>)
    8e98:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    8e9a:	4b0f      	ldr	r3, [pc, #60]	; (8ed8 <usart_async_init+0x94>)
    8e9c:	6163      	str	r3, [r4, #20]
}
    8e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    8ea0:	2000      	movs	r0, #0
    8ea2:	e7dd      	b.n	8e60 <usart_async_init+0x1c>
    8ea4:	2000      	movs	r0, #0
    8ea6:	e7db      	b.n	8e60 <usart_async_init+0x1c>
    8ea8:	2000      	movs	r0, #0
    8eaa:	e7d9      	b.n	8e60 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
    8eac:	200d      	movs	r0, #13
    8eae:	4240      	negs	r0, r0
    8eb0:	e7f5      	b.n	8e9e <usart_async_init+0x5a>
    8eb2:	46c0      	nop			; (mov r8, r8)
    8eb4:	0000e910 	.word	0x0000e910
    8eb8:	0000959d 	.word	0x0000959d
    8ebc:	0000964d 	.word	0x0000964d
    8ec0:	00009fdd 	.word	0x00009fdd
    8ec4:	00008d65 	.word	0x00008d65
    8ec8:	00008cc1 	.word	0x00008cc1
    8ecc:	00008d25 	.word	0x00008d25
    8ed0:	00008ca5 	.word	0x00008ca5
    8ed4:	00008c81 	.word	0x00008c81
    8ed8:	00008c93 	.word	0x00008c93

00008edc <usart_async_enable>:
{
    8edc:	b510      	push	{r4, lr}
    8ede:	0004      	movs	r4, r0
	ASSERT(descr);
    8ee0:	1e43      	subs	r3, r0, #1
    8ee2:	4198      	sbcs	r0, r3
    8ee4:	b2c0      	uxtb	r0, r0
    8ee6:	2261      	movs	r2, #97	; 0x61
    8ee8:	4904      	ldr	r1, [pc, #16]	; (8efc <usart_async_enable+0x20>)
    8eea:	4b05      	ldr	r3, [pc, #20]	; (8f00 <usart_async_enable+0x24>)
    8eec:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    8eee:	0020      	movs	r0, r4
    8ef0:	3008      	adds	r0, #8
    8ef2:	4b04      	ldr	r3, [pc, #16]	; (8f04 <usart_async_enable+0x28>)
    8ef4:	4798      	blx	r3
}
    8ef6:	2000      	movs	r0, #0
    8ef8:	bd10      	pop	{r4, pc}
    8efa:	46c0      	nop			; (mov r8, r8)
    8efc:	0000e910 	.word	0x0000e910
    8f00:	0000959d 	.word	0x0000959d
    8f04:	0000a04d 	.word	0x0000a04d

00008f08 <usart_async_get_io_descriptor>:
{
    8f08:	b570      	push	{r4, r5, r6, lr}
    8f0a:	0004      	movs	r4, r0
    8f0c:	000d      	movs	r5, r1
	ASSERT(descr && io);
    8f0e:	2800      	cmp	r0, #0
    8f10:	d00a      	beq.n	8f28 <usart_async_get_io_descriptor+0x20>
    8f12:	0008      	movs	r0, r1
    8f14:	1e43      	subs	r3, r0, #1
    8f16:	4198      	sbcs	r0, r3
    8f18:	b2c0      	uxtb	r0, r0
    8f1a:	2277      	movs	r2, #119	; 0x77
    8f1c:	4903      	ldr	r1, [pc, #12]	; (8f2c <usart_async_get_io_descriptor+0x24>)
    8f1e:	4b04      	ldr	r3, [pc, #16]	; (8f30 <usart_async_get_io_descriptor+0x28>)
    8f20:	4798      	blx	r3
	*io = &descr->io;
    8f22:	602c      	str	r4, [r5, #0]
}
    8f24:	2000      	movs	r0, #0
    8f26:	bd70      	pop	{r4, r5, r6, pc}
    8f28:	2000      	movs	r0, #0
    8f2a:	e7f6      	b.n	8f1a <usart_async_get_io_descriptor+0x12>
    8f2c:	0000e910 	.word	0x0000e910
    8f30:	0000959d 	.word	0x0000959d

00008f34 <usart_async_register_callback>:
{
    8f34:	b570      	push	{r4, r5, r6, lr}
    8f36:	0005      	movs	r5, r0
    8f38:	000e      	movs	r6, r1
    8f3a:	0014      	movs	r4, r2
	ASSERT(descr);
    8f3c:	1e43      	subs	r3, r0, #1
    8f3e:	4198      	sbcs	r0, r3
    8f40:	b2c0      	uxtb	r0, r0
    8f42:	2283      	movs	r2, #131	; 0x83
    8f44:	4916      	ldr	r1, [pc, #88]	; (8fa0 <usart_async_register_callback+0x6c>)
    8f46:	4b17      	ldr	r3, [pc, #92]	; (8fa4 <usart_async_register_callback+0x70>)
    8f48:	4798      	blx	r3
	switch (type) {
    8f4a:	2e01      	cmp	r6, #1
    8f4c:	d011      	beq.n	8f72 <usart_async_register_callback+0x3e>
    8f4e:	2e00      	cmp	r6, #0
    8f50:	d004      	beq.n	8f5c <usart_async_register_callback+0x28>
    8f52:	2e02      	cmp	r6, #2
    8f54:	d018      	beq.n	8f88 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
    8f56:	200d      	movs	r0, #13
    8f58:	4240      	negs	r0, r0
    8f5a:	e009      	b.n	8f70 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
    8f5c:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    8f5e:	1e62      	subs	r2, r4, #1
    8f60:	4194      	sbcs	r4, r2
    8f62:	b2e2      	uxtb	r2, r4
    8f64:	0028      	movs	r0, r5
    8f66:	3008      	adds	r0, #8
    8f68:	2101      	movs	r1, #1
    8f6a:	4b0f      	ldr	r3, [pc, #60]	; (8fa8 <usart_async_register_callback+0x74>)
    8f6c:	4798      	blx	r3
	return ERR_NONE;
    8f6e:	2000      	movs	r0, #0
}
    8f70:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    8f72:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    8f74:	1e62      	subs	r2, r4, #1
    8f76:	4194      	sbcs	r4, r2
    8f78:	b2e2      	uxtb	r2, r4
    8f7a:	0028      	movs	r0, r5
    8f7c:	3008      	adds	r0, #8
    8f7e:	2102      	movs	r1, #2
    8f80:	4b09      	ldr	r3, [pc, #36]	; (8fa8 <usart_async_register_callback+0x74>)
    8f82:	4798      	blx	r3
	return ERR_NONE;
    8f84:	2000      	movs	r0, #0
		break;
    8f86:	e7f3      	b.n	8f70 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
    8f88:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    8f8a:	1e62      	subs	r2, r4, #1
    8f8c:	4194      	sbcs	r4, r2
    8f8e:	b2e2      	uxtb	r2, r4
    8f90:	0028      	movs	r0, r5
    8f92:	3008      	adds	r0, #8
    8f94:	2103      	movs	r1, #3
    8f96:	4b04      	ldr	r3, [pc, #16]	; (8fa8 <usart_async_register_callback+0x74>)
    8f98:	4798      	blx	r3
	return ERR_NONE;
    8f9a:	2000      	movs	r0, #0
		break;
    8f9c:	e7e8      	b.n	8f70 <usart_async_register_callback+0x3c>
    8f9e:	46c0      	nop			; (mov r8, r8)
    8fa0:	0000e910 	.word	0x0000e910
    8fa4:	0000959d 	.word	0x0000959d
    8fa8:	0000a079 	.word	0x0000a079

00008fac <usart_async_flush_rx_buffer>:
{
    8fac:	b510      	push	{r4, lr}
    8fae:	0004      	movs	r4, r0
	ASSERT(descr);
    8fb0:	1e43      	subs	r3, r0, #1
    8fb2:	4198      	sbcs	r0, r3
    8fb4:	b2c0      	uxtb	r0, r0
    8fb6:	2222      	movs	r2, #34	; 0x22
    8fb8:	32ff      	adds	r2, #255	; 0xff
    8fba:	4904      	ldr	r1, [pc, #16]	; (8fcc <usart_async_flush_rx_buffer+0x20>)
    8fbc:	4b04      	ldr	r3, [pc, #16]	; (8fd0 <usart_async_flush_rx_buffer+0x24>)
    8fbe:	4798      	blx	r3
	return ringbuffer_flush(&descr->rx);
    8fc0:	0020      	movs	r0, r4
    8fc2:	3034      	adds	r0, #52	; 0x34
    8fc4:	4b03      	ldr	r3, [pc, #12]	; (8fd4 <usart_async_flush_rx_buffer+0x28>)
    8fc6:	4798      	blx	r3
}
    8fc8:	bd10      	pop	{r4, pc}
    8fca:	46c0      	nop			; (mov r8, r8)
    8fcc:	0000e910 	.word	0x0000e910
    8fd0:	0000959d 	.word	0x0000959d
    8fd4:	0000974d 	.word	0x0000974d

00008fd8 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
    8fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fda:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    8fdc:	4b0e      	ldr	r3, [pc, #56]	; (9018 <_usb_d_find_ep+0x40>)
    8fde:	785a      	ldrb	r2, [r3, #1]
    8fe0:	4290      	cmp	r0, r2
    8fe2:	d017      	beq.n	9014 <_usb_d_find_ep+0x3c>
    8fe4:	2300      	movs	r3, #0
    8fe6:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    8fe8:	4f0b      	ldr	r7, [pc, #44]	; (9018 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    8fea:	260f      	movs	r6, #15
    8fec:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    8fee:	003d      	movs	r5, r7
    8ff0:	e008      	b.n	9004 <_usb_d_find_ep+0x2c>
    8ff2:	3001      	adds	r0, #1
    8ff4:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    8ff6:	2804      	cmp	r0, #4
    8ff8:	d00a      	beq.n	9010 <_usb_d_find_ep+0x38>
    8ffa:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    8ffc:	18ea      	adds	r2, r5, r3
    8ffe:	7852      	ldrb	r2, [r2, #1]
    9000:	42a2      	cmp	r2, r4
    9002:	d006      	beq.n	9012 <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    9004:	5dd9      	ldrb	r1, [r3, r7]
    9006:	2900      	cmp	r1, #0
    9008:	d1f3      	bne.n	8ff2 <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    900a:	4296      	cmp	r6, r2
    900c:	d1f1      	bne.n	8ff2 <_usb_d_find_ep+0x1a>
    900e:	e000      	b.n	9012 <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
    9010:	3805      	subs	r0, #5
}
    9012:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    9014:	2000      	movs	r0, #0
    9016:	e7fc      	b.n	9012 <_usb_d_find_ep+0x3a>
    9018:	20000464 	.word	0x20000464

0000901c <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    901c:	2000      	movs	r0, #0
    901e:	4770      	bx	lr

00009020 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    9020:	b570      	push	{r4, r5, r6, lr}
    9022:	0004      	movs	r4, r0
    9024:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    9026:	4b0a      	ldr	r3, [pc, #40]	; (9050 <usb_d_cb_trans_more+0x30>)
    9028:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    902a:	0142      	lsls	r2, r0, #5
    902c:	4b09      	ldr	r3, [pc, #36]	; (9054 <usb_d_cb_trans_more+0x34>)
    902e:	189b      	adds	r3, r3, r2
    9030:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    9032:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    9034:	2a03      	cmp	r2, #3
    9036:	d001      	beq.n	903c <usb_d_cb_trans_more+0x1c>
}
    9038:	0018      	movs	r0, r3
    903a:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
    903c:	0140      	lsls	r0, r0, #5
    903e:	4b05      	ldr	r3, [pc, #20]	; (9054 <usb_d_cb_trans_more+0x34>)
    9040:	1818      	adds	r0, r3, r0
    9042:	6983      	ldr	r3, [r0, #24]
    9044:	0029      	movs	r1, r5
    9046:	0020      	movs	r0, r4
    9048:	4798      	blx	r3
    904a:	0003      	movs	r3, r0
    904c:	e7f4      	b.n	9038 <usb_d_cb_trans_more+0x18>
    904e:	46c0      	nop			; (mov r8, r8)
    9050:	00008fd9 	.word	0x00008fd9
    9054:	20000464 	.word	0x20000464

00009058 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    9058:	b5f0      	push	{r4, r5, r6, r7, lr}
    905a:	b085      	sub	sp, #20
    905c:	0005      	movs	r5, r0
    905e:	000f      	movs	r7, r1
    9060:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    9062:	4b51      	ldr	r3, [pc, #324]	; (91a8 <_usb_d_cb_trans_done+0x150>)
    9064:	4798      	blx	r3
    9066:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    9068:	2f00      	cmp	r7, #0
    906a:	d162      	bne.n	9132 <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
    906c:	4b4f      	ldr	r3, [pc, #316]	; (91ac <_usb_d_cb_trans_done+0x154>)
    906e:	0142      	lsls	r2, r0, #5
    9070:	1899      	adds	r1, r3, r2
    9072:	2000      	movs	r0, #0
    9074:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    9076:	5cd3      	ldrb	r3, [r2, r3]
    9078:	2b00      	cmp	r3, #0
    907a:	d00e      	beq.n	909a <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    907c:	0162      	lsls	r2, r4, #5
    907e:	4b4b      	ldr	r3, [pc, #300]	; (91ac <_usb_d_cb_trans_done+0x154>)
    9080:	189b      	adds	r3, r3, r2
    9082:	2201      	movs	r2, #1
    9084:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    9086:	0164      	lsls	r4, r4, #5
    9088:	4b48      	ldr	r3, [pc, #288]	; (91ac <_usb_d_cb_trans_done+0x154>)
    908a:	191c      	adds	r4, r3, r4
    908c:	78e1      	ldrb	r1, [r4, #3]
    908e:	69e3      	ldr	r3, [r4, #28]
    9090:	0032      	movs	r2, r6
    9092:	0028      	movs	r0, r5
    9094:	4798      	blx	r3
}
    9096:	b005      	add	sp, #20
    9098:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    909a:	788b      	ldrb	r3, [r1, #2]
    909c:	2b03      	cmp	r3, #3
    909e:	d00c      	beq.n	90ba <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    90a0:	4b42      	ldr	r3, [pc, #264]	; (91ac <_usb_d_cb_trans_done+0x154>)
    90a2:	0162      	lsls	r2, r4, #5
    90a4:	320c      	adds	r2, #12
    90a6:	189a      	adds	r2, r3, r2
    90a8:	0164      	lsls	r4, r4, #5
    90aa:	191c      	adds	r4, r3, r4
    90ac:	7860      	ldrb	r0, [r4, #1]
    90ae:	2100      	movs	r1, #0
    90b0:	69e3      	ldr	r3, [r4, #28]
    90b2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    90b4:	2302      	movs	r3, #2
    90b6:	70a3      	strb	r3, [r4, #2]
    90b8:	e7ed      	b.n	9096 <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    90ba:	4a3c      	ldr	r2, [pc, #240]	; (91ac <_usb_d_cb_trans_done+0x154>)
    90bc:	000b      	movs	r3, r1
    90be:	250c      	movs	r5, #12
    90c0:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    90c2:	0161      	lsls	r1, r4, #5
    90c4:	310c      	adds	r1, #12
    90c6:	1852      	adds	r2, r2, r1
    90c8:	7858      	ldrb	r0, [r3, #1]
    90ca:	69db      	ldr	r3, [r3, #28]
    90cc:	2101      	movs	r1, #1
    90ce:	4798      	blx	r3
		if (err) {
    90d0:	2800      	cmp	r0, #0
    90d2:	d017      	beq.n	9104 <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    90d4:	0162      	lsls	r2, r4, #5
    90d6:	4b35      	ldr	r3, [pc, #212]	; (91ac <_usb_d_cb_trans_done+0x154>)
    90d8:	189b      	adds	r3, r3, r2
    90da:	2205      	movs	r2, #5
    90dc:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    90de:	3a03      	subs	r2, #3
    90e0:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    90e2:	2d00      	cmp	r5, #0
    90e4:	db09      	blt.n	90fa <_usb_d_cb_trans_done+0xa2>
    90e6:	0164      	lsls	r4, r4, #5
    90e8:	4b30      	ldr	r3, [pc, #192]	; (91ac <_usb_d_cb_trans_done+0x154>)
    90ea:	191c      	adds	r4, r3, r4
    90ec:	7860      	ldrb	r0, [r4, #1]
    90ee:	2380      	movs	r3, #128	; 0x80
    90f0:	4318      	orrs	r0, r3
    90f2:	2101      	movs	r1, #1
    90f4:	4b2e      	ldr	r3, [pc, #184]	; (91b0 <_usb_d_cb_trans_done+0x158>)
    90f6:	4798      	blx	r3
    90f8:	e7cd      	b.n	9096 <_usb_d_cb_trans_done+0x3e>
    90fa:	0164      	lsls	r4, r4, #5
    90fc:	4b2b      	ldr	r3, [pc, #172]	; (91ac <_usb_d_cb_trans_done+0x154>)
    90fe:	191c      	adds	r4, r3, r4
    9100:	7860      	ldrb	r0, [r4, #1]
    9102:	e7f6      	b.n	90f2 <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    9104:	0164      	lsls	r4, r4, #5
    9106:	4b29      	ldr	r3, [pc, #164]	; (91ac <_usb_d_cb_trans_done+0x154>)
    9108:	191c      	adds	r4, r3, r4
    910a:	2304      	movs	r3, #4
    910c:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    910e:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
    9110:	2200      	movs	r2, #0
    9112:	9201      	str	r2, [sp, #4]
    9114:	9202      	str	r2, [sp, #8]
    9116:	2d00      	cmp	r5, #0
    9118:	db08      	blt.n	912c <_usb_d_cb_trans_done+0xd4>
    911a:	3280      	adds	r2, #128	; 0x80
    911c:	4313      	orrs	r3, r2
    911e:	a801      	add	r0, sp, #4
    9120:	7203      	strb	r3, [r0, #8]
    9122:	2301      	movs	r3, #1
    9124:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    9126:	4b23      	ldr	r3, [pc, #140]	; (91b4 <_usb_d_cb_trans_done+0x15c>)
    9128:	4798      	blx	r3
    912a:	e7b4      	b.n	9096 <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
    912c:	220f      	movs	r2, #15
    912e:	4013      	ands	r3, r2
    9130:	e7f5      	b.n	911e <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
    9132:	2f01      	cmp	r7, #1
    9134:	d00a      	beq.n	914c <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
    9136:	2f02      	cmp	r7, #2
    9138:	d01d      	beq.n	9176 <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
    913a:	2f03      	cmp	r7, #3
    913c:	d02c      	beq.n	9198 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    913e:	0142      	lsls	r2, r0, #5
    9140:	4b1a      	ldr	r3, [pc, #104]	; (91ac <_usb_d_cb_trans_done+0x154>)
    9142:	189b      	adds	r3, r3, r2
    9144:	2206      	movs	r2, #6
    9146:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    9148:	70da      	strb	r2, [r3, #3]
    914a:	e79c      	b.n	9086 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
    914c:	4b17      	ldr	r3, [pc, #92]	; (91ac <_usb_d_cb_trans_done+0x154>)
    914e:	0142      	lsls	r2, r0, #5
    9150:	1899      	adds	r1, r3, r2
    9152:	2002      	movs	r0, #2
    9154:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    9156:	5cd3      	ldrb	r3, [r2, r3]
    9158:	2b00      	cmp	r3, #0
    915a:	d005      	beq.n	9168 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    915c:	0162      	lsls	r2, r4, #5
    915e:	4b13      	ldr	r3, [pc, #76]	; (91ac <_usb_d_cb_trans_done+0x154>)
    9160:	189b      	adds	r3, r3, r2
    9162:	2205      	movs	r2, #5
    9164:	709a      	strb	r2, [r3, #2]
    9166:	e78e      	b.n	9086 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    9168:	2202      	movs	r2, #2
    916a:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    916c:	2100      	movs	r1, #0
    916e:	0028      	movs	r0, r5
    9170:	4b0f      	ldr	r3, [pc, #60]	; (91b0 <_usb_d_cb_trans_done+0x158>)
    9172:	4798      	blx	r3
    9174:	e787      	b.n	9086 <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    9176:	4b0d      	ldr	r3, [pc, #52]	; (91ac <_usb_d_cb_trans_done+0x154>)
    9178:	0142      	lsls	r2, r0, #5
    917a:	1899      	adds	r1, r3, r2
    917c:	2004      	movs	r0, #4
    917e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    9180:	5cd3      	ldrb	r3, [r2, r3]
    9182:	2b00      	cmp	r3, #0
    9184:	d005      	beq.n	9192 <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    9186:	0162      	lsls	r2, r4, #5
    9188:	4b08      	ldr	r3, [pc, #32]	; (91ac <_usb_d_cb_trans_done+0x154>)
    918a:	189b      	adds	r3, r3, r2
    918c:	2201      	movs	r2, #1
    918e:	709a      	strb	r2, [r3, #2]
    9190:	e779      	b.n	9086 <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    9192:	2302      	movs	r3, #2
    9194:	708b      	strb	r3, [r1, #2]
			return;
    9196:	e77e      	b.n	9096 <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    9198:	0142      	lsls	r2, r0, #5
    919a:	4b04      	ldr	r3, [pc, #16]	; (91ac <_usb_d_cb_trans_done+0x154>)
    919c:	189b      	adds	r3, r3, r2
    919e:	2200      	movs	r2, #0
    91a0:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    91a2:	3205      	adds	r2, #5
    91a4:	70da      	strb	r2, [r3, #3]
    91a6:	e76e      	b.n	9086 <_usb_d_cb_trans_done+0x2e>
    91a8:	00008fd9 	.word	0x00008fd9
    91ac:	20000464 	.word	0x20000464
    91b0:	0000b811 	.word	0x0000b811
    91b4:	0000b9dd 	.word	0x0000b9dd

000091b8 <usb_d_cb_trans_setup>:
{
    91b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    91ba:	46c6      	mov	lr, r8
    91bc:	b500      	push	{lr}
    91be:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    91c0:	4b1d      	ldr	r3, [pc, #116]	; (9238 <usb_d_cb_trans_setup+0x80>)
    91c2:	4798      	blx	r3
    91c4:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
    91c6:	0145      	lsls	r5, r0, #5
    91c8:	350c      	adds	r5, #12
    91ca:	4b1c      	ldr	r3, [pc, #112]	; (923c <usb_d_cb_trans_setup+0x84>)
    91cc:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    91ce:	0029      	movs	r1, r5
    91d0:	0020      	movs	r0, r4
    91d2:	4b1b      	ldr	r3, [pc, #108]	; (9240 <usb_d_cb_trans_setup+0x88>)
    91d4:	4798      	blx	r3
	if (n != 8) {
    91d6:	b2c0      	uxtb	r0, r0
    91d8:	2808      	cmp	r0, #8
    91da:	d00a      	beq.n	91f2 <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    91dc:	2101      	movs	r1, #1
    91de:	0020      	movs	r0, r4
    91e0:	4d18      	ldr	r5, [pc, #96]	; (9244 <usb_d_cb_trans_setup+0x8c>)
    91e2:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    91e4:	2080      	movs	r0, #128	; 0x80
    91e6:	4320      	orrs	r0, r4
    91e8:	2101      	movs	r1, #1
    91ea:	47a8      	blx	r5
}
    91ec:	bc04      	pop	{r2}
    91ee:	4690      	mov	r8, r2
    91f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    91f2:	2100      	movs	r1, #0
    91f4:	0020      	movs	r0, r4
    91f6:	4b13      	ldr	r3, [pc, #76]	; (9244 <usb_d_cb_trans_setup+0x8c>)
    91f8:	4698      	mov	r8, r3
    91fa:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    91fc:	2780      	movs	r7, #128	; 0x80
    91fe:	4327      	orrs	r7, r4
    9200:	2100      	movs	r1, #0
    9202:	0038      	movs	r0, r7
    9204:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    9206:	0172      	lsls	r2, r6, #5
    9208:	4b0c      	ldr	r3, [pc, #48]	; (923c <usb_d_cb_trans_setup+0x84>)
    920a:	189b      	adds	r3, r3, r2
    920c:	2201      	movs	r2, #1
    920e:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    9210:	695b      	ldr	r3, [r3, #20]
    9212:	0029      	movs	r1, r5
    9214:	0020      	movs	r0, r4
    9216:	4798      	blx	r3
    9218:	2800      	cmp	r0, #0
    921a:	d1e7      	bne.n	91ec <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    921c:	0176      	lsls	r6, r6, #5
    921e:	4b07      	ldr	r3, [pc, #28]	; (923c <usb_d_cb_trans_setup+0x84>)
    9220:	199e      	adds	r6, r3, r6
    9222:	2305      	movs	r3, #5
    9224:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    9226:	2101      	movs	r1, #1
    9228:	0020      	movs	r0, r4
    922a:	4c06      	ldr	r4, [pc, #24]	; (9244 <usb_d_cb_trans_setup+0x8c>)
    922c:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    922e:	2101      	movs	r1, #1
    9230:	0038      	movs	r0, r7
    9232:	47a0      	blx	r4
    9234:	e7da      	b.n	91ec <usb_d_cb_trans_setup+0x34>
    9236:	46c0      	nop			; (mov r8, r8)
    9238:	00008fd9 	.word	0x00008fd9
    923c:	20000464 	.word	0x20000464
    9240:	0000b971 	.word	0x0000b971
    9244:	0000b811 	.word	0x0000b811

00009248 <usb_d_init>:

int32_t usb_d_init(void)
{
    9248:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    924a:	4b10      	ldr	r3, [pc, #64]	; (928c <usb_d_init+0x44>)
    924c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    924e:	2800      	cmp	r0, #0
    9250:	db1b      	blt.n	928a <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    9252:	4c0f      	ldr	r4, [pc, #60]	; (9290 <usb_d_init+0x48>)
    9254:	2280      	movs	r2, #128	; 0x80
    9256:	2100      	movs	r1, #0
    9258:	0020      	movs	r0, r4
    925a:	4b0e      	ldr	r3, [pc, #56]	; (9294 <usb_d_init+0x4c>)
    925c:	4798      	blx	r3
    925e:	0023      	movs	r3, r4
    9260:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    9262:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    9264:	4a0c      	ldr	r2, [pc, #48]	; (9298 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    9266:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    9268:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    926a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    926c:	61da      	str	r2, [r3, #28]
    926e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    9270:	42a3      	cmp	r3, r4
    9272:	d1f8      	bne.n	9266 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    9274:	4909      	ldr	r1, [pc, #36]	; (929c <usb_d_init+0x54>)
    9276:	2000      	movs	r0, #0
    9278:	4c09      	ldr	r4, [pc, #36]	; (92a0 <usb_d_init+0x58>)
    927a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    927c:	4909      	ldr	r1, [pc, #36]	; (92a4 <usb_d_init+0x5c>)
    927e:	2001      	movs	r0, #1
    9280:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    9282:	4909      	ldr	r1, [pc, #36]	; (92a8 <usb_d_init+0x60>)
    9284:	2002      	movs	r0, #2
    9286:	47a0      	blx	r4
	return ERR_NONE;
    9288:	2000      	movs	r0, #0
}
    928a:	bd10      	pop	{r4, pc}
    928c:	0000b1d1 	.word	0x0000b1d1
    9290:	20000464 	.word	0x20000464
    9294:	0000db5b 	.word	0x0000db5b
    9298:	0000901d 	.word	0x0000901d
    929c:	000091b9 	.word	0x000091b9
    92a0:	0000bc15 	.word	0x0000bc15
    92a4:	00009021 	.word	0x00009021
    92a8:	00009059 	.word	0x00009059

000092ac <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    92ac:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    92ae:	4b01      	ldr	r3, [pc, #4]	; (92b4 <usb_d_register_callback+0x8>)
    92b0:	4798      	blx	r3
}
    92b2:	bd10      	pop	{r4, pc}
    92b4:	0000bbf1 	.word	0x0000bbf1

000092b8 <usb_d_enable>:

int32_t usb_d_enable(void)
{
    92b8:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
    92ba:	4b01      	ldr	r3, [pc, #4]	; (92c0 <usb_d_enable+0x8>)
    92bc:	4798      	blx	r3
}
    92be:	bd10      	pop	{r4, pc}
    92c0:	0000b2bd 	.word	0x0000b2bd

000092c4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    92c4:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
    92c6:	4b01      	ldr	r3, [pc, #4]	; (92cc <usb_d_attach+0x8>)
    92c8:	4798      	blx	r3
}
    92ca:	bd10      	pop	{r4, pc}
    92cc:	0000b315 	.word	0x0000b315

000092d0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    92d0:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
    92d2:	4b01      	ldr	r3, [pc, #4]	; (92d8 <usb_d_set_address+0x8>)
    92d4:	4798      	blx	r3
}
    92d6:	bd10      	pop	{r4, pc}
    92d8:	0000b323 	.word	0x0000b323

000092dc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    92dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92de:	0005      	movs	r5, r0
    92e0:	000e      	movs	r6, r1
    92e2:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    92e4:	4b0f      	ldr	r3, [pc, #60]	; (9324 <usb_d_ep_init+0x48>)
    92e6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    92e8:	2800      	cmp	r0, #0
    92ea:	da14      	bge.n	9316 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    92ec:	20ff      	movs	r0, #255	; 0xff
    92ee:	4b0d      	ldr	r3, [pc, #52]	; (9324 <usb_d_ep_init+0x48>)
    92f0:	4798      	blx	r3
    92f2:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
    92f4:	db12      	blt.n	931c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    92f6:	003a      	movs	r2, r7
    92f8:	0031      	movs	r1, r6
    92fa:	0028      	movs	r0, r5
    92fc:	4b0a      	ldr	r3, [pc, #40]	; (9328 <usb_d_ep_init+0x4c>)
    92fe:	4798      	blx	r3
	if (rc < 0) {
    9300:	2800      	cmp	r0, #0
    9302:	db07      	blt.n	9314 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    9304:	4a09      	ldr	r2, [pc, #36]	; (932c <usb_d_ep_init+0x50>)
    9306:	0164      	lsls	r4, r4, #5
    9308:	1913      	adds	r3, r2, r4
    930a:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    930c:	2303      	movs	r3, #3
    930e:	401e      	ands	r6, r3
    9310:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
    9312:	2000      	movs	r0, #0
}
    9314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    9316:	2014      	movs	r0, #20
    9318:	4240      	negs	r0, r0
    931a:	e7fb      	b.n	9314 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    931c:	2015      	movs	r0, #21
    931e:	4240      	negs	r0, r0
    9320:	e7f8      	b.n	9314 <usb_d_ep_init+0x38>
    9322:	46c0      	nop			; (mov r8, r8)
    9324:	00008fd9 	.word	0x00008fd9
    9328:	0000b331 	.word	0x0000b331
    932c:	20000464 	.word	0x20000464

00009330 <usb_d_ep0_init>:
{
    9330:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    9332:	b282      	uxth	r2, r0
    9334:	2100      	movs	r1, #0
    9336:	2000      	movs	r0, #0
    9338:	4b01      	ldr	r3, [pc, #4]	; (9340 <usb_d_ep0_init+0x10>)
    933a:	4798      	blx	r3
}
    933c:	bd10      	pop	{r4, pc}
    933e:	46c0      	nop			; (mov r8, r8)
    9340:	000092dd 	.word	0x000092dd

00009344 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    9344:	b570      	push	{r4, r5, r6, lr}
    9346:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    9348:	4b06      	ldr	r3, [pc, #24]	; (9364 <usb_d_ep_deinit+0x20>)
    934a:	4798      	blx	r3
    934c:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    934e:	db07      	blt.n	9360 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    9350:	0028      	movs	r0, r5
    9352:	4b05      	ldr	r3, [pc, #20]	; (9368 <usb_d_ep_deinit+0x24>)
    9354:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    9356:	0164      	lsls	r4, r4, #5
    9358:	4b04      	ldr	r3, [pc, #16]	; (936c <usb_d_ep_deinit+0x28>)
    935a:	191c      	adds	r4, r3, r4
    935c:	23ff      	movs	r3, #255	; 0xff
    935e:	7063      	strb	r3, [r4, #1]
}
    9360:	bd70      	pop	{r4, r5, r6, pc}
    9362:	46c0      	nop			; (mov r8, r8)
    9364:	00008fd9 	.word	0x00008fd9
    9368:	0000b45d 	.word	0x0000b45d
    936c:	20000464 	.word	0x20000464

00009370 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    9370:	b570      	push	{r4, r5, r6, lr}
    9372:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    9374:	4b0e      	ldr	r3, [pc, #56]	; (93b0 <usb_d_ep_enable+0x40>)
    9376:	4798      	blx	r3
    9378:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    937a:	db15      	blt.n	93a8 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    937c:	0143      	lsls	r3, r0, #5
    937e:	4a0d      	ldr	r2, [pc, #52]	; (93b4 <usb_d_ep_enable+0x44>)
    9380:	5c9b      	ldrb	r3, [r3, r2]
    9382:	425a      	negs	r2, r3
    9384:	4153      	adcs	r3, r2
    9386:	3301      	adds	r3, #1
    9388:	0141      	lsls	r1, r0, #5
    938a:	4a0a      	ldr	r2, [pc, #40]	; (93b4 <usb_d_ep_enable+0x44>)
    938c:	1852      	adds	r2, r2, r1
    938e:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    9390:	0020      	movs	r0, r4
    9392:	4b09      	ldr	r3, [pc, #36]	; (93b8 <usb_d_ep_enable+0x48>)
    9394:	4798      	blx	r3
	if (rc < 0) {
    9396:	2800      	cmp	r0, #0
    9398:	db00      	blt.n	939c <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    939a:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    939c:	016d      	lsls	r5, r5, #5
    939e:	4b05      	ldr	r3, [pc, #20]	; (93b4 <usb_d_ep_enable+0x44>)
    93a0:	195d      	adds	r5, r3, r5
    93a2:	2300      	movs	r3, #0
    93a4:	70ab      	strb	r3, [r5, #2]
    93a6:	e7f8      	b.n	939a <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
    93a8:	2012      	movs	r0, #18
    93aa:	4240      	negs	r0, r0
    93ac:	e7f5      	b.n	939a <usb_d_ep_enable+0x2a>
    93ae:	46c0      	nop			; (mov r8, r8)
    93b0:	00008fd9 	.word	0x00008fd9
    93b4:	20000464 	.word	0x20000464
    93b8:	0000b52d 	.word	0x0000b52d

000093bc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    93bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    93be:	46d6      	mov	lr, sl
    93c0:	464f      	mov	r7, r9
    93c2:	4646      	mov	r6, r8
    93c4:	b5c0      	push	{r6, r7, lr}
    93c6:	b086      	sub	sp, #24
    93c8:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    93ca:	7a07      	ldrb	r7, [r0, #8]
    93cc:	0038      	movs	r0, r7
    93ce:	4b40      	ldr	r3, [pc, #256]	; (94d0 <usb_d_ep_transfer+0x114>)
    93d0:	4798      	blx	r3
    93d2:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    93d4:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
    93d6:	6863      	ldr	r3, [r4, #4]
    93d8:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    93da:	2800      	cmp	r0, #0
    93dc:	da00      	bge.n	93e0 <usb_d_ep_transfer+0x24>
    93de:	e071      	b.n	94c4 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    93e0:	a804      	add	r0, sp, #16
    93e2:	4b3c      	ldr	r3, [pc, #240]	; (94d4 <usb_d_ep_transfer+0x118>)
    93e4:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    93e6:	016a      	lsls	r2, r5, #5
    93e8:	4b3b      	ldr	r3, [pc, #236]	; (94d8 <usb_d_ep_transfer+0x11c>)
    93ea:	189b      	adds	r3, r3, r2
    93ec:	789a      	ldrb	r2, [r3, #2]
    93ee:	2317      	movs	r3, #23
    93f0:	446b      	add	r3, sp
    93f2:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
    93f4:	781b      	ldrb	r3, [r3, #0]
    93f6:	2b01      	cmp	r3, #1
    93f8:	d010      	beq.n	941c <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    93fa:	a804      	add	r0, sp, #16
    93fc:	4b37      	ldr	r3, [pc, #220]	; (94dc <usb_d_ep_transfer+0x120>)
    93fe:	4798      	blx	r3
		switch (state) {
    9400:	2317      	movs	r3, #23
    9402:	446b      	add	r3, sp
    9404:	781b      	ldrb	r3, [r3, #0]
    9406:	b2db      	uxtb	r3, r3
    9408:	2b05      	cmp	r3, #5
    940a:	d05e      	beq.n	94ca <usb_d_ep_transfer+0x10e>
    940c:	2b06      	cmp	r3, #6
    940e:	d023      	beq.n	9458 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    9410:	2001      	movs	r0, #1
		switch (state) {
    9412:	2b00      	cmp	r3, #0
    9414:	d13c      	bne.n	9490 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
    9416:	2013      	movs	r0, #19
    9418:	4240      	negs	r0, r0
    941a:	e039      	b.n	9490 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    941c:	4b2e      	ldr	r3, [pc, #184]	; (94d8 <usb_d_ep_transfer+0x11c>)
    941e:	4699      	mov	r9, r3
    9420:	016b      	lsls	r3, r5, #5
    9422:	469a      	mov	sl, r3
    9424:	464b      	mov	r3, r9
    9426:	4453      	add	r3, sl
    9428:	2203      	movs	r2, #3
    942a:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    942c:	a804      	add	r0, sp, #16
    942e:	4b2b      	ldr	r3, [pc, #172]	; (94dc <usb_d_ep_transfer+0x120>)
    9430:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    9432:	464b      	mov	r3, r9
    9434:	4652      	mov	r2, sl
    9436:	5cd3      	ldrb	r3, [r2, r3]
    9438:	2b00      	cmp	r3, #0
    943a:	d010      	beq.n	945e <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    943c:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    943e:	1e72      	subs	r2, r6, #1
    9440:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    9442:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
    9444:	6822      	ldr	r2, [r4, #0]
    9446:	9201      	str	r2, [sp, #4]
    9448:	4642      	mov	r2, r8
    944a:	9202      	str	r2, [sp, #8]
    944c:	b27f      	sxtb	r7, r7
    944e:	2f00      	cmp	r7, #0
    9450:	db17      	blt.n	9482 <usb_d_ep_transfer+0xc6>
    9452:	220f      	movs	r2, #15
    9454:	4013      	ands	r3, r2
    9456:	e016      	b.n	9486 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
    9458:	2010      	movs	r0, #16
    945a:	4240      	negs	r0, r0
    945c:	e018      	b.n	9490 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    945e:	016b      	lsls	r3, r5, #5
    9460:	4a1d      	ldr	r2, [pc, #116]	; (94d8 <usb_d_ep_transfer+0x11c>)
    9462:	18d2      	adds	r2, r2, r3
    9464:	7cd1      	ldrb	r1, [r2, #19]
    9466:	0209      	lsls	r1, r1, #8
    9468:	7c93      	ldrb	r3, [r2, #18]
    946a:	185b      	adds	r3, r3, r1
    946c:	b29b      	uxth	r3, r3
		if (req_len == 0) {
    946e:	2b00      	cmp	r3, #0
    9470:	d114      	bne.n	949c <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    9472:	2304      	movs	r3, #4
    9474:	7093      	strb	r3, [r2, #2]
			len                 = 0;
    9476:	2200      	movs	r2, #0
			zlp                 = true;
    9478:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    947a:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    947c:	6821      	ldr	r1, [r4, #0]
    947e:	9101      	str	r1, [sp, #4]
    9480:	9202      	str	r2, [sp, #8]
    9482:	2280      	movs	r2, #128	; 0x80
    9484:	4313      	orrs	r3, r2
    9486:	a801      	add	r0, sp, #4
    9488:	7203      	strb	r3, [r0, #8]
    948a:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
    948c:	4b14      	ldr	r3, [pc, #80]	; (94e0 <usb_d_ep_transfer+0x124>)
    948e:	4798      	blx	r3
	return rc;
}
    9490:	b006      	add	sp, #24
    9492:	bc1c      	pop	{r2, r3, r4}
    9494:	4690      	mov	r8, r2
    9496:	4699      	mov	r9, r3
    9498:	46a2      	mov	sl, r4
    949a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    949c:	4642      	mov	r2, r8
    949e:	429a      	cmp	r2, r3
    94a0:	d900      	bls.n	94a4 <usb_d_ep_transfer+0xe8>
    94a2:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    94a4:	016d      	lsls	r5, r5, #5
    94a6:	490c      	ldr	r1, [pc, #48]	; (94d8 <usb_d_ep_transfer+0x11c>)
    94a8:	194d      	adds	r5, r1, r5
			if (dir) {
    94aa:	7b29      	ldrb	r1, [r5, #12]
    94ac:	297f      	cmp	r1, #127	; 0x7f
    94ae:	d805      	bhi.n	94bc <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    94b0:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
    94b2:	6821      	ldr	r1, [r4, #0]
    94b4:	9101      	str	r1, [sp, #4]
    94b6:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    94b8:	2600      	movs	r6, #0
    94ba:	e7ca      	b.n	9452 <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
    94bc:	429a      	cmp	r2, r3
    94be:	41b6      	sbcs	r6, r6
    94c0:	4276      	negs	r6, r6
    94c2:	e7da      	b.n	947a <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
    94c4:	2012      	movs	r0, #18
    94c6:	4240      	negs	r0, r0
    94c8:	e7e2      	b.n	9490 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
    94ca:	2002      	movs	r0, #2
    94cc:	e7e0      	b.n	9490 <usb_d_ep_transfer+0xd4>
    94ce:	46c0      	nop			; (mov r8, r8)
    94d0:	00008fd9 	.word	0x00008fd9
    94d4:	00008791 	.word	0x00008791
    94d8:	20000464 	.word	0x20000464
    94dc:	0000879f 	.word	0x0000879f
    94e0:	0000b9dd 	.word	0x0000b9dd

000094e4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    94e4:	b570      	push	{r4, r5, r6, lr}
    94e6:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    94e8:	2900      	cmp	r1, #0
    94ea:	d005      	beq.n	94f8 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    94ec:	2901      	cmp	r1, #1
    94ee:	d021      	beq.n	9534 <usb_d_ep_halt+0x50>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    94f0:	2102      	movs	r1, #2
    94f2:	4b13      	ldr	r3, [pc, #76]	; (9540 <usb_d_ep_halt+0x5c>)
    94f4:	4798      	blx	r3
	}
}
    94f6:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    94f8:	4b12      	ldr	r3, [pc, #72]	; (9544 <usb_d_ep_halt+0x60>)
    94fa:	4798      	blx	r3
    94fc:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
    94fe:	db1c      	blt.n	953a <usb_d_ep_halt+0x56>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    9500:	2102      	movs	r1, #2
    9502:	0020      	movs	r0, r4
    9504:	4b0e      	ldr	r3, [pc, #56]	; (9540 <usb_d_ep_halt+0x5c>)
    9506:	4798      	blx	r3
    9508:	2800      	cmp	r0, #0
    950a:	d0f4      	beq.n	94f6 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    950c:	2100      	movs	r1, #0
    950e:	0020      	movs	r0, r4
    9510:	4b0b      	ldr	r3, [pc, #44]	; (9540 <usb_d_ep_halt+0x5c>)
    9512:	4798      	blx	r3
		if (rc < 0) {
    9514:	2800      	cmp	r0, #0
    9516:	dbee      	blt.n	94f6 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    9518:	016d      	lsls	r5, r5, #5
    951a:	4b0b      	ldr	r3, [pc, #44]	; (9548 <usb_d_ep_halt+0x64>)
    951c:	195d      	adds	r5, r3, r5
    951e:	2301      	movs	r3, #1
    9520:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    9522:	3302      	adds	r3, #2
    9524:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    9526:	69eb      	ldr	r3, [r5, #28]
    9528:	2200      	movs	r2, #0
    952a:	2103      	movs	r1, #3
    952c:	0020      	movs	r0, r4
    952e:	4798      	blx	r3
	return ERR_NONE;
    9530:	2000      	movs	r0, #0
    9532:	e7e0      	b.n	94f6 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    9534:	4b02      	ldr	r3, [pc, #8]	; (9540 <usb_d_ep_halt+0x5c>)
    9536:	4798      	blx	r3
    9538:	e7dd      	b.n	94f6 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
    953a:	2012      	movs	r0, #18
    953c:	4240      	negs	r0, r0
    953e:	e7da      	b.n	94f6 <usb_d_ep_halt+0x12>
    9540:	0000b811 	.word	0x0000b811
    9544:	00008fd9 	.word	0x00008fd9
    9548:	20000464 	.word	0x20000464

0000954c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    954c:	b570      	push	{r4, r5, r6, lr}
    954e:	000d      	movs	r5, r1
    9550:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    9552:	4b0f      	ldr	r3, [pc, #60]	; (9590 <usb_d_ep_register_callback+0x44>)
    9554:	4798      	blx	r3
    9556:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    9558:	1e22      	subs	r2, r4, #0
    955a:	d008      	beq.n	956e <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
    955c:	2b00      	cmp	r3, #0
    955e:	db05      	blt.n	956c <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    9560:	2d01      	cmp	r5, #1
    9562:	d00b      	beq.n	957c <usb_d_ep_register_callback+0x30>
    9564:	2d00      	cmp	r5, #0
    9566:	d004      	beq.n	9572 <usb_d_ep_register_callback+0x26>
    9568:	2d02      	cmp	r5, #2
    956a:	d00c      	beq.n	9586 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    956c:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    956e:	4a09      	ldr	r2, [pc, #36]	; (9594 <usb_d_ep_register_callback+0x48>)
    9570:	e7f4      	b.n	955c <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    9572:	0140      	lsls	r0, r0, #5
    9574:	4b08      	ldr	r3, [pc, #32]	; (9598 <usb_d_ep_register_callback+0x4c>)
    9576:	1818      	adds	r0, r3, r0
    9578:	6142      	str	r2, [r0, #20]
		break;
    957a:	e7f7      	b.n	956c <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    957c:	0140      	lsls	r0, r0, #5
    957e:	4b06      	ldr	r3, [pc, #24]	; (9598 <usb_d_ep_register_callback+0x4c>)
    9580:	1818      	adds	r0, r3, r0
    9582:	6182      	str	r2, [r0, #24]
		break;
    9584:	e7f2      	b.n	956c <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    9586:	0140      	lsls	r0, r0, #5
    9588:	4b03      	ldr	r3, [pc, #12]	; (9598 <usb_d_ep_register_callback+0x4c>)
    958a:	1818      	adds	r0, r3, r0
    958c:	61c2      	str	r2, [r0, #28]
		break;
    958e:	e7ed      	b.n	956c <usb_d_ep_register_callback+0x20>
    9590:	00008fd9 	.word	0x00008fd9
    9594:	0000901d 	.word	0x0000901d
    9598:	20000464 	.word	0x20000464

0000959c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    959c:	2800      	cmp	r0, #0
    959e:	d100      	bne.n	95a2 <assert+0x6>
		__asm("BKPT #0");
    95a0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    95a2:	4770      	bx	lr

000095a4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    95a4:	6803      	ldr	r3, [r0, #0]
    95a6:	2b00      	cmp	r3, #0
    95a8:	d00a      	beq.n	95c0 <is_list_element+0x1c>
		if (it == element) {
    95aa:	428b      	cmp	r3, r1
    95ac:	d00a      	beq.n	95c4 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
    95ae:	681b      	ldr	r3, [r3, #0]
    95b0:	2b00      	cmp	r3, #0
    95b2:	d003      	beq.n	95bc <is_list_element+0x18>
		if (it == element) {
    95b4:	4299      	cmp	r1, r3
    95b6:	d1fa      	bne.n	95ae <is_list_element+0xa>
			return true;
    95b8:	2001      	movs	r0, #1
    95ba:	e000      	b.n	95be <is_list_element+0x1a>
		}
	}

	return false;
    95bc:	2000      	movs	r0, #0
}
    95be:	4770      	bx	lr
	return false;
    95c0:	2000      	movs	r0, #0
    95c2:	e7fc      	b.n	95be <is_list_element+0x1a>
			return true;
    95c4:	2001      	movs	r0, #1
    95c6:	e7fa      	b.n	95be <is_list_element+0x1a>

000095c8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    95c8:	b570      	push	{r4, r5, r6, lr}
    95ca:	0004      	movs	r4, r0
    95cc:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
    95ce:	4b06      	ldr	r3, [pc, #24]	; (95e8 <list_insert_as_head+0x20>)
    95d0:	4798      	blx	r3
    95d2:	2301      	movs	r3, #1
    95d4:	4058      	eors	r0, r3
    95d6:	b2c0      	uxtb	r0, r0
    95d8:	2239      	movs	r2, #57	; 0x39
    95da:	4904      	ldr	r1, [pc, #16]	; (95ec <list_insert_as_head+0x24>)
    95dc:	4b04      	ldr	r3, [pc, #16]	; (95f0 <list_insert_as_head+0x28>)
    95de:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    95e0:	6823      	ldr	r3, [r4, #0]
    95e2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    95e4:	6025      	str	r5, [r4, #0]
}
    95e6:	bd70      	pop	{r4, r5, r6, pc}
    95e8:	000095a5 	.word	0x000095a5
    95ec:	0000e930 	.word	0x0000e930
    95f0:	0000959d 	.word	0x0000959d

000095f4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    95f4:	6803      	ldr	r3, [r0, #0]
    95f6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    95f8:	6001      	str	r1, [r0, #0]
}
    95fa:	4770      	bx	lr

000095fc <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    95fc:	b570      	push	{r4, r5, r6, lr}
    95fe:	0005      	movs	r5, r0
    9600:	000e      	movs	r6, r1
	struct list_element *it = list->head;
    9602:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    9604:	4b0a      	ldr	r3, [pc, #40]	; (9630 <list_insert_at_end+0x34>)
    9606:	4798      	blx	r3
    9608:	2301      	movs	r3, #1
    960a:	4058      	eors	r0, r3
    960c:	b2c0      	uxtb	r0, r0
    960e:	224f      	movs	r2, #79	; 0x4f
    9610:	4908      	ldr	r1, [pc, #32]	; (9634 <list_insert_at_end+0x38>)
    9612:	4b09      	ldr	r3, [pc, #36]	; (9638 <list_insert_at_end+0x3c>)
    9614:	4798      	blx	r3

	if (!list->head) {
    9616:	682b      	ldr	r3, [r5, #0]
    9618:	2b00      	cmp	r3, #0
    961a:	d103      	bne.n	9624 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
    961c:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    961e:	6033      	str	r3, [r6, #0]
		return;
    9620:	e005      	b.n	962e <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
    9622:	001c      	movs	r4, r3
	while (it->next) {
    9624:	6823      	ldr	r3, [r4, #0]
    9626:	2b00      	cmp	r3, #0
    9628:	d1fb      	bne.n	9622 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
    962a:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    962c:	6033      	str	r3, [r6, #0]
}
    962e:	bd70      	pop	{r4, r5, r6, pc}
    9630:	000095a5 	.word	0x000095a5
    9634:	0000e930 	.word	0x0000e930
    9638:	0000959d 	.word	0x0000959d

0000963c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    963c:	6803      	ldr	r3, [r0, #0]
    963e:	2b00      	cmp	r3, #0
    9640:	d001      	beq.n	9646 <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    9642:	681a      	ldr	r2, [r3, #0]
    9644:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    9646:	0018      	movs	r0, r3
    9648:	4770      	bx	lr
	...

0000964c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    964c:	b570      	push	{r4, r5, r6, lr}
    964e:	0004      	movs	r4, r0
    9650:	000e      	movs	r6, r1
    9652:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
    9654:	2800      	cmp	r0, #0
    9656:	d00b      	beq.n	9670 <ringbuffer_init+0x24>
    9658:	2900      	cmp	r1, #0
    965a:	d018      	beq.n	968e <ringbuffer_init+0x42>
    965c:	2001      	movs	r0, #1
    965e:	2a00      	cmp	r2, #0
    9660:	d107      	bne.n	9672 <ringbuffer_init+0x26>
    9662:	2228      	movs	r2, #40	; 0x28
    9664:	490c      	ldr	r1, [pc, #48]	; (9698 <ringbuffer_init+0x4c>)
    9666:	2000      	movs	r0, #0
    9668:	4b0c      	ldr	r3, [pc, #48]	; (969c <ringbuffer_init+0x50>)
    966a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    966c:	1e6b      	subs	r3, r5, #1
    966e:	e007      	b.n	9680 <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
    9670:	2000      	movs	r0, #0
    9672:	2228      	movs	r2, #40	; 0x28
    9674:	4908      	ldr	r1, [pc, #32]	; (9698 <ringbuffer_init+0x4c>)
    9676:	4b09      	ldr	r3, [pc, #36]	; (969c <ringbuffer_init+0x50>)
    9678:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    967a:	1e6b      	subs	r3, r5, #1
    967c:	422b      	tst	r3, r5
    967e:	d108      	bne.n	9692 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    9680:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    9682:	2300      	movs	r3, #0
    9684:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
    9686:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    9688:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    968a:	2000      	movs	r0, #0
}
    968c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    968e:	2000      	movs	r0, #0
    9690:	e7ef      	b.n	9672 <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
    9692:	200d      	movs	r0, #13
    9694:	4240      	negs	r0, r0
    9696:	e7f9      	b.n	968c <ringbuffer_init+0x40>
    9698:	0000e950 	.word	0x0000e950
    969c:	0000959d 	.word	0x0000959d

000096a0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    96a0:	b570      	push	{r4, r5, r6, lr}
    96a2:	0004      	movs	r4, r0
    96a4:	000d      	movs	r5, r1
	ASSERT(rb && data);
    96a6:	2800      	cmp	r0, #0
    96a8:	d015      	beq.n	96d6 <ringbuffer_get+0x36>
    96aa:	0008      	movs	r0, r1
    96ac:	1e43      	subs	r3, r0, #1
    96ae:	4198      	sbcs	r0, r3
    96b0:	b2c0      	uxtb	r0, r0
    96b2:	2240      	movs	r2, #64	; 0x40
    96b4:	490a      	ldr	r1, [pc, #40]	; (96e0 <ringbuffer_get+0x40>)
    96b6:	4b0b      	ldr	r3, [pc, #44]	; (96e4 <ringbuffer_get+0x44>)
    96b8:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    96ba:	68a3      	ldr	r3, [r4, #8]
    96bc:	68e2      	ldr	r2, [r4, #12]
    96be:	429a      	cmp	r2, r3
    96c0:	d00b      	beq.n	96da <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
    96c2:	6862      	ldr	r2, [r4, #4]
    96c4:	4013      	ands	r3, r2
    96c6:	6822      	ldr	r2, [r4, #0]
    96c8:	5cd3      	ldrb	r3, [r2, r3]
    96ca:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    96cc:	68a3      	ldr	r3, [r4, #8]
    96ce:	3301      	adds	r3, #1
    96d0:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    96d2:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
    96d4:	bd70      	pop	{r4, r5, r6, pc}
    96d6:	2000      	movs	r0, #0
    96d8:	e7eb      	b.n	96b2 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
    96da:	200a      	movs	r0, #10
    96dc:	4240      	negs	r0, r0
    96de:	e7f9      	b.n	96d4 <ringbuffer_get+0x34>
    96e0:	0000e950 	.word	0x0000e950
    96e4:	0000959d 	.word	0x0000959d

000096e8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    96e8:	b570      	push	{r4, r5, r6, lr}
    96ea:	0004      	movs	r4, r0
    96ec:	000d      	movs	r5, r1
	ASSERT(rb);
    96ee:	1e43      	subs	r3, r0, #1
    96f0:	4198      	sbcs	r0, r3
    96f2:	b2c0      	uxtb	r0, r0
    96f4:	2251      	movs	r2, #81	; 0x51
    96f6:	490a      	ldr	r1, [pc, #40]	; (9720 <ringbuffer_put+0x38>)
    96f8:	4b0a      	ldr	r3, [pc, #40]	; (9724 <ringbuffer_put+0x3c>)
    96fa:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    96fc:	6863      	ldr	r3, [r4, #4]
    96fe:	68e2      	ldr	r2, [r4, #12]
    9700:	4013      	ands	r3, r2
    9702:	6822      	ldr	r2, [r4, #0]
    9704:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    9706:	68e3      	ldr	r3, [r4, #12]
    9708:	6861      	ldr	r1, [r4, #4]
    970a:	68a2      	ldr	r2, [r4, #8]
    970c:	1a9a      	subs	r2, r3, r2
    970e:	428a      	cmp	r2, r1
    9710:	d901      	bls.n	9716 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    9712:	1a59      	subs	r1, r3, r1
    9714:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
    9716:	3301      	adds	r3, #1
    9718:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    971a:	2000      	movs	r0, #0
    971c:	bd70      	pop	{r4, r5, r6, pc}
    971e:	46c0      	nop			; (mov r8, r8)
    9720:	0000e950 	.word	0x0000e950
    9724:	0000959d 	.word	0x0000959d

00009728 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    9728:	b510      	push	{r4, lr}
    972a:	0004      	movs	r4, r0
	ASSERT(rb);
    972c:	1e43      	subs	r3, r0, #1
    972e:	4198      	sbcs	r0, r3
    9730:	b2c0      	uxtb	r0, r0
    9732:	2267      	movs	r2, #103	; 0x67
    9734:	4903      	ldr	r1, [pc, #12]	; (9744 <ringbuffer_num+0x1c>)
    9736:	4b04      	ldr	r3, [pc, #16]	; (9748 <ringbuffer_num+0x20>)
    9738:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    973a:	68e0      	ldr	r0, [r4, #12]
    973c:	68a3      	ldr	r3, [r4, #8]
    973e:	1ac0      	subs	r0, r0, r3
}
    9740:	bd10      	pop	{r4, pc}
    9742:	46c0      	nop			; (mov r8, r8)
    9744:	0000e950 	.word	0x0000e950
    9748:	0000959d 	.word	0x0000959d

0000974c <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    974c:	b510      	push	{r4, lr}
    974e:	0004      	movs	r4, r0
	ASSERT(rb);
    9750:	1e43      	subs	r3, r0, #1
    9752:	4198      	sbcs	r0, r3
    9754:	b2c0      	uxtb	r0, r0
    9756:	2271      	movs	r2, #113	; 0x71
    9758:	4903      	ldr	r1, [pc, #12]	; (9768 <ringbuffer_flush+0x1c>)
    975a:	4b04      	ldr	r3, [pc, #16]	; (976c <ringbuffer_flush+0x20>)
    975c:	4798      	blx	r3

	rb->read_index = rb->write_index;
    975e:	68e3      	ldr	r3, [r4, #12]
    9760:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    9762:	2000      	movs	r0, #0
    9764:	bd10      	pop	{r4, pc}
    9766:	46c0      	nop			; (mov r8, r8)
    9768:	0000e950 	.word	0x0000e950
    976c:	0000959d 	.word	0x0000959d

00009770 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    9770:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    9772:	4a06      	ldr	r2, [pc, #24]	; (978c <_sbrk+0x1c>)
    9774:	6812      	ldr	r2, [r2, #0]
    9776:	2a00      	cmp	r2, #0
    9778:	d004      	beq.n	9784 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    977a:	4a04      	ldr	r2, [pc, #16]	; (978c <_sbrk+0x1c>)
    977c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    977e:	18c3      	adds	r3, r0, r3
    9780:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    9782:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    9784:	4902      	ldr	r1, [pc, #8]	; (9790 <_sbrk+0x20>)
    9786:	4a01      	ldr	r2, [pc, #4]	; (978c <_sbrk+0x1c>)
    9788:	6011      	str	r1, [r2, #0]
    978a:	e7f6      	b.n	977a <_sbrk+0xa>
    978c:	200004e4 	.word	0x200004e4
    9790:	20003100 	.word	0x20003100

00009794 <_adc_get_regs>:
		}
	}

	ASSERT(false);
	return 0;
}
    9794:	2000      	movs	r0, #0
    9796:	4770      	bx	lr

00009798 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    9798:	b570      	push	{r4, r5, r6, lr}
    979a:	0004      	movs	r4, r0
    979c:	000d      	movs	r5, r1
	uint16_t calib_reg = 0;
	calib_reg          = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC_FUSES_BIASREFBUF_ADDR >> ADC_FUSES_BIASREFBUF_Pos))
    979e:	4b51      	ldr	r3, [pc, #324]	; (98e4 <_adc_init+0x14c>)
    97a0:	681b      	ldr	r3, [r3, #0]
    97a2:	021e      	lsls	r6, r3, #8
    97a4:	22e0      	movs	r2, #224	; 0xe0
    97a6:	00d2      	lsls	r2, r2, #3
    97a8:	4016      	ands	r6, r2
	            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC_FUSES_BIASCOMP_ADDR >> ADC_FUSES_BIASCOMP_Pos));
    97aa:	069b      	lsls	r3, r3, #26
    97ac:	0f5b      	lsrs	r3, r3, #29
	calib_reg          = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC_FUSES_BIASREFBUF_ADDR >> ADC_FUSES_BIASREFBUF_Pos))
    97ae:	431e      	orrs	r6, r3

	ASSERT(hw == ADC);
    97b0:	4b4d      	ldr	r3, [pc, #308]	; (98e8 <_adc_init+0x150>)
    97b2:	18c0      	adds	r0, r0, r3
    97b4:	4243      	negs	r3, r0
    97b6:	4158      	adcs	r0, r3
    97b8:	b2c0      	uxtb	r0, r0
    97ba:	22b2      	movs	r2, #178	; 0xb2
    97bc:	494b      	ldr	r1, [pc, #300]	; (98ec <_adc_init+0x154>)
    97be:	4b4c      	ldr	r3, [pc, #304]	; (98f0 <_adc_init+0x158>)
    97c0:	4798      	blx	r3
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    97c2:	8c23      	ldrh	r3, [r4, #32]

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    97c4:	07db      	lsls	r3, r3, #31
    97c6:	d418      	bmi.n	97fa <_adc_init+0x62>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    97c8:	2203      	movs	r2, #3
    97ca:	8c23      	ldrh	r3, [r4, #32]
    97cc:	4213      	tst	r3, r2
    97ce:	d1fc      	bne.n	97ca <_adc_init+0x32>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    97d0:	7823      	ldrb	r3, [r4, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    97d2:	079b      	lsls	r3, r3, #30
    97d4:	d50b      	bpl.n	97ee <_adc_init+0x56>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    97d6:	7823      	ldrb	r3, [r4, #0]
    97d8:	2202      	movs	r2, #2
    97da:	4393      	bics	r3, r2
    97dc:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    97de:	3201      	adds	r2, #1
    97e0:	8c23      	ldrh	r3, [r4, #32]
    97e2:	4213      	tst	r3, r2
    97e4:	d1fc      	bne.n	97e0 <_adc_init+0x48>
    97e6:	2202      	movs	r2, #2
    97e8:	8c23      	ldrh	r3, [r4, #32]
    97ea:	4213      	tst	r3, r2
    97ec:	d1fc      	bne.n	97e8 <_adc_init+0x50>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    97ee:	2301      	movs	r3, #1
    97f0:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    97f2:	2203      	movs	r2, #3
    97f4:	8c23      	ldrh	r3, [r4, #32]
    97f6:	4213      	tst	r3, r2
    97f8:	d1fc      	bne.n	97f4 <_adc_init+0x5c>
    97fa:	2201      	movs	r2, #1
    97fc:	8c23      	ldrh	r3, [r4, #32]
    97fe:	4213      	tst	r3, r2
    9800:	d1fc      	bne.n	97fc <_adc_init+0x64>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
    9802:	85a6      	strh	r6, [r4, #44]	; 0x2c
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    9804:	00ea      	lsls	r2, r5, #3
    9806:	1b52      	subs	r2, r2, r5
    9808:	0092      	lsls	r2, r2, #2
    980a:	4b3a      	ldr	r3, [pc, #232]	; (98f4 <_adc_init+0x15c>)
    980c:	189b      	adds	r3, r3, r2
    980e:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->CTRLB.reg = data;
    9810:	7062      	strb	r2, [r4, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    9812:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->REFCTRL.reg = data;
    9814:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    9816:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->EVCTRL.reg = data;
    9818:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    981a:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->INPUTCTRL.reg = data;
    981c:	8123      	strh	r3, [r4, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    981e:	8c23      	ldrh	r3, [r4, #32]
    9820:	055b      	lsls	r3, r3, #21
    9822:	d1fc      	bne.n	981e <_adc_init+0x86>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
    9824:	00eb      	lsls	r3, r5, #3
    9826:	1b5b      	subs	r3, r3, r5
    9828:	009b      	lsls	r3, r3, #2
    982a:	4a32      	ldr	r2, [pc, #200]	; (98f4 <_adc_init+0x15c>)
    982c:	18d3      	adds	r3, r2, r3
    982e:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->CTRLC.reg = data;
    9830:	8163      	strh	r3, [r4, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    9832:	8c23      	ldrh	r3, [r4, #32]
    9834:	055b      	lsls	r3, r3, #21
    9836:	d1fc      	bne.n	9832 <_adc_init+0x9a>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    9838:	00eb      	lsls	r3, r5, #3
    983a:	1b5b      	subs	r3, r3, r5
    983c:	009b      	lsls	r3, r3, #2
    983e:	4a2d      	ldr	r2, [pc, #180]	; (98f4 <_adc_init+0x15c>)
    9840:	18d3      	adds	r3, r2, r3
    9842:	7a9b      	ldrb	r3, [r3, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
    9844:	7323      	strb	r3, [r4, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    9846:	8c23      	ldrh	r3, [r4, #32]
    9848:	055b      	lsls	r3, r3, #21
    984a:	d1fc      	bne.n	9846 <_adc_init+0xae>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    984c:	00eb      	lsls	r3, r5, #3
    984e:	1b5b      	subs	r3, r3, r5
    9850:	009b      	lsls	r3, r3, #2
    9852:	4a28      	ldr	r2, [pc, #160]	; (98f4 <_adc_init+0x15c>)
    9854:	18d3      	adds	r3, r2, r3
    9856:	7adb      	ldrb	r3, [r3, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
    9858:	7363      	strb	r3, [r4, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    985a:	8c23      	ldrh	r3, [r4, #32]
    985c:	055b      	lsls	r3, r3, #21
    985e:	d1fc      	bne.n	985a <_adc_init+0xc2>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    9860:	00eb      	lsls	r3, r5, #3
    9862:	1b5b      	subs	r3, r3, r5
    9864:	009b      	lsls	r3, r3, #2
    9866:	4a23      	ldr	r2, [pc, #140]	; (98f4 <_adc_init+0x15c>)
    9868:	18d3      	adds	r3, r2, r3
    986a:	899b      	ldrh	r3, [r3, #12]
	((Adc *)hw)->WINLT.reg = data;
    986c:	81e3      	strh	r3, [r4, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    986e:	2240      	movs	r2, #64	; 0x40
    9870:	8c23      	ldrh	r3, [r4, #32]
    9872:	4213      	tst	r3, r2
    9874:	d1fc      	bne.n	9870 <_adc_init+0xd8>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    9876:	00eb      	lsls	r3, r5, #3
    9878:	1b5b      	subs	r3, r3, r5
    987a:	009b      	lsls	r3, r3, #2
    987c:	4a1d      	ldr	r2, [pc, #116]	; (98f4 <_adc_init+0x15c>)
    987e:	18d3      	adds	r3, r2, r3
    9880:	89db      	ldrh	r3, [r3, #14]
	((Adc *)hw)->WINUT.reg = data;
    9882:	8223      	strh	r3, [r4, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    9884:	2280      	movs	r2, #128	; 0x80
    9886:	8c23      	ldrh	r3, [r4, #32]
    9888:	4213      	tst	r3, r2
    988a:	d1fc      	bne.n	9886 <_adc_init+0xee>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    988c:	00eb      	lsls	r3, r5, #3
    988e:	1b5b      	subs	r3, r3, r5
    9890:	009b      	lsls	r3, r3, #2
    9892:	4a18      	ldr	r2, [pc, #96]	; (98f4 <_adc_init+0x15c>)
    9894:	18d3      	adds	r3, r2, r3
    9896:	8a1b      	ldrh	r3, [r3, #16]
	((Adc *)hw)->GAINCORR.reg = data;
    9898:	8263      	strh	r3, [r4, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    989a:	2280      	movs	r2, #128	; 0x80
    989c:	0052      	lsls	r2, r2, #1
    989e:	8c23      	ldrh	r3, [r4, #32]
    98a0:	4213      	tst	r3, r2
    98a2:	d1fc      	bne.n	989e <_adc_init+0x106>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    98a4:	00eb      	lsls	r3, r5, #3
    98a6:	1b5b      	subs	r3, r3, r5
    98a8:	009b      	lsls	r3, r3, #2
    98aa:	4a12      	ldr	r2, [pc, #72]	; (98f4 <_adc_init+0x15c>)
    98ac:	18d3      	adds	r3, r2, r3
    98ae:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
    98b0:	82a3      	strh	r3, [r4, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    98b2:	2280      	movs	r2, #128	; 0x80
    98b4:	0092      	lsls	r2, r2, #2
    98b6:	8c23      	ldrh	r3, [r4, #32]
    98b8:	4213      	tst	r3, r2
    98ba:	d1fc      	bne.n	98b6 <_adc_init+0x11e>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    98bc:	490d      	ldr	r1, [pc, #52]	; (98f4 <_adc_init+0x15c>)
    98be:	00eb      	lsls	r3, r5, #3
    98c0:	1b5a      	subs	r2, r3, r5
    98c2:	0092      	lsls	r2, r2, #2
    98c4:	188a      	adds	r2, r1, r2
    98c6:	7d12      	ldrb	r2, [r2, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    98c8:	7722      	strb	r2, [r4, #28]
	((Adc *)hw)->SEQCTRL.reg = data;
    98ca:	2200      	movs	r2, #0
    98cc:	62a2      	str	r2, [r4, #40]	; 0x28
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    98ce:	1b5d      	subs	r5, r3, r5
    98d0:	00ad      	lsls	r5, r5, #2
    98d2:	194d      	adds	r5, r1, r5
    98d4:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
    98d6:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    98d8:	3203      	adds	r2, #3
    98da:	8c23      	ldrh	r3, [r4, #32]
    98dc:	4213      	tst	r3, r2
    98de:	d1fc      	bne.n	98da <_adc_init+0x142>

	return ERR_NONE;
}
    98e0:	2000      	movs	r0, #0
    98e2:	bd70      	pop	{r4, r5, r6, pc}
    98e4:	00806020 	.word	0x00806020
    98e8:	bcfff400 	.word	0xbcfff400
    98ec:	0000e990 	.word	0x0000e990
    98f0:	0000959d 	.word	0x0000959d
    98f4:	0000e974 	.word	0x0000e974

000098f8 <_adc_async_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_async_init(struct _adc_async_device *const device, void *const hw)
{
    98f8:	b570      	push	{r4, r5, r6, lr}
    98fa:	0005      	movs	r5, r0
    98fc:	000c      	movs	r4, r1
	int32_t init_status;

	ASSERT(device);
    98fe:	1e43      	subs	r3, r0, #1
    9900:	4198      	sbcs	r0, r3
    9902:	b2c0      	uxtb	r0, r0
    9904:	22ee      	movs	r2, #238	; 0xee
    9906:	4911      	ldr	r1, [pc, #68]	; (994c <_adc_async_init+0x54>)
    9908:	4b11      	ldr	r3, [pc, #68]	; (9950 <_adc_async_init+0x58>)
    990a:	4798      	blx	r3

	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    990c:	0020      	movs	r0, r4
    990e:	4b11      	ldr	r3, [pc, #68]	; (9954 <_adc_async_init+0x5c>)
    9910:	4798      	blx	r3
    9912:	0001      	movs	r1, r0
    9914:	0020      	movs	r0, r4
    9916:	4b10      	ldr	r3, [pc, #64]	; (9958 <_adc_async_init+0x60>)
    9918:	4798      	blx	r3
	if (init_status) {
    991a:	2800      	cmp	r0, #0
    991c:	d000      	beq.n	9920 <_adc_async_init+0x28>
	NVIC_DisableIRQ(_adc_get_irq_num(device));
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device));
	NVIC_EnableIRQ(_adc_get_irq_num(device));

	return ERR_NONE;
}
    991e:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    9920:	616c      	str	r4, [r5, #20]
	if (hw == ADC) {
    9922:	4b0e      	ldr	r3, [pc, #56]	; (995c <_adc_async_init+0x64>)
    9924:	429c      	cmp	r4, r3
    9926:	d00d      	beq.n	9944 <_adc_async_init+0x4c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9928:	4b0d      	ldr	r3, [pc, #52]	; (9960 <_adc_async_init+0x68>)
    992a:	2280      	movs	r2, #128	; 0x80
    992c:	03d2      	lsls	r2, r2, #15
    992e:	2180      	movs	r1, #128	; 0x80
    9930:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    9932:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9936:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    993a:	3101      	adds	r1, #1
    993c:	31ff      	adds	r1, #255	; 0xff
    993e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9940:	601a      	str	r2, [r3, #0]
    9942:	e7ec      	b.n	991e <_adc_async_init+0x26>
		_adc0_dev = dev;
    9944:	4b07      	ldr	r3, [pc, #28]	; (9964 <_adc_async_init+0x6c>)
    9946:	601d      	str	r5, [r3, #0]
    9948:	e7ee      	b.n	9928 <_adc_async_init+0x30>
    994a:	46c0      	nop			; (mov r8, r8)
    994c:	0000e990 	.word	0x0000e990
    9950:	0000959d 	.word	0x0000959d
    9954:	00009795 	.word	0x00009795
    9958:	00009799 	.word	0x00009799
    995c:	43000c00 	.word	0x43000c00
    9960:	e000e100 	.word	0xe000e100
    9964:	200004e8 	.word	0x200004e8

00009968 <_adc_async_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_async_get_data_size(const struct _adc_async_device *const device)
{
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
    9968:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLC.reg;
    996a:	8958      	ldrh	r0, [r3, #10]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
    996c:	0680      	lsls	r0, r0, #26
    996e:	0f80      	lsrs	r0, r0, #30
    9970:	3803      	subs	r0, #3
    9972:	1e43      	subs	r3, r0, #1
    9974:	4198      	sbcs	r0, r3
    9976:	3001      	adds	r0, #1
}
    9978:	4770      	bx	lr
	...

0000997c <ADC_Handler>:
		device->adc_async_cb.window_cb(device, 0);
	}
}

void ADC_Handler(void)
{
    997c:	b510      	push	{r4, lr}
	_adc_interrupt_handler(_adc0_dev);
    997e:	4b10      	ldr	r3, [pc, #64]	; (99c0 <ADC_Handler+0x44>)
    9980:	6818      	ldr	r0, [r3, #0]
	void *const hw      = device->hw;
    9982:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    9984:	7991      	ldrb	r1, [r2, #6]
	return ((Adc *)hw)->INTENSET.reg;
    9986:	7953      	ldrb	r3, [r2, #5]
	intflag &= hri_adc_read_INTEN_reg(hw);
    9988:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    998a:	07d9      	lsls	r1, r3, #31
    998c:	d404      	bmi.n	9998 <ADC_Handler+0x1c>
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    998e:	0799      	lsls	r1, r3, #30
    9990:	d40a      	bmi.n	99a8 <ADC_Handler+0x2c>
	} else if (intflag & ADC_INTFLAG_WINMON) {
    9992:	075b      	lsls	r3, r3, #29
    9994:	d40e      	bmi.n	99b4 <ADC_Handler+0x38>
}
    9996:	bd10      	pop	{r4, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    9998:	2301      	movs	r3, #1
    999a:	7193      	strb	r3, [r2, #6]
	return ((Adc *)hw)->RESULT.reg;
    999c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    999e:	b292      	uxth	r2, r2
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    99a0:	6883      	ldr	r3, [r0, #8]
    99a2:	2100      	movs	r1, #0
    99a4:	4798      	blx	r3
    99a6:	e7f6      	b.n	9996 <ADC_Handler+0x1a>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    99a8:	2302      	movs	r3, #2
    99aa:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.error_cb(device, 0);
    99ac:	6843      	ldr	r3, [r0, #4]
    99ae:	2100      	movs	r1, #0
    99b0:	4798      	blx	r3
    99b2:	e7f0      	b.n	9996 <ADC_Handler+0x1a>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    99b4:	2304      	movs	r3, #4
    99b6:	7193      	strb	r3, [r2, #6]
		device->adc_async_cb.window_cb(device, 0);
    99b8:	6803      	ldr	r3, [r0, #0]
    99ba:	2100      	movs	r1, #0
    99bc:	4798      	blx	r3
}
    99be:	e7ea      	b.n	9996 <ADC_Handler+0x1a>
    99c0:	200004e8 	.word	0x200004e8

000099c4 <_irq_set>:
  if ((int32_t)(IRQn) >= 0)
    99c4:	b243      	sxtb	r3, r0
    99c6:	2b00      	cmp	r3, #0
    99c8:	db07      	blt.n	99da <_irq_set+0x16>
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    99ca:	231f      	movs	r3, #31
    99cc:	4018      	ands	r0, r3
    99ce:	3b1e      	subs	r3, #30
    99d0:	4083      	lsls	r3, r0
    99d2:	2280      	movs	r2, #128	; 0x80
    99d4:	0052      	lsls	r2, r2, #1
    99d6:	4901      	ldr	r1, [pc, #4]	; (99dc <_irq_set+0x18>)
    99d8:	508b      	str	r3, [r1, r2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    99da:	4770      	bx	lr
    99dc:	e000e100 	.word	0xe000e100

000099e0 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    99e0:	b510      	push	{r4, lr}
    99e2:	0003      	movs	r3, r0
		return (us * (freq / 100000) + 29) / 30;
    99e4:	0080      	lsls	r0, r0, #2
    99e6:	18c0      	adds	r0, r0, r3
    99e8:	0140      	lsls	r0, r0, #5
    99ea:	301d      	adds	r0, #29
    99ec:	211e      	movs	r1, #30
    99ee:	4b01      	ldr	r3, [pc, #4]	; (99f4 <_get_cycles_for_us+0x14>)
    99f0:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    99f2:	bd10      	pop	{r4, pc}
    99f4:	0000cce1 	.word	0x0000cce1

000099f8 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    99f8:	3901      	subs	r1, #1
    99fa:	d8fd      	bhi.n	99f8 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    99fc:	4770      	bx	lr
	...

00009a00 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    9a00:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    9a02:	4b09      	ldr	r3, [pc, #36]	; (9a28 <_init_chip+0x28>)
    9a04:	685a      	ldr	r2, [r3, #4]
    9a06:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
    9a08:	2002      	movs	r0, #2
    9a0a:	4b08      	ldr	r3, [pc, #32]	; (9a2c <_init_chip+0x2c>)
    9a0c:	4798      	blx	r3

	_osc32kctrl_init_sources();
    9a0e:	4b08      	ldr	r3, [pc, #32]	; (9a30 <_init_chip+0x30>)
    9a10:	4798      	blx	r3
	_oscctrl_init_sources();
    9a12:	4b08      	ldr	r3, [pc, #32]	; (9a34 <_init_chip+0x34>)
    9a14:	4798      	blx	r3
	_mclk_init();
    9a16:	4b08      	ldr	r3, [pc, #32]	; (9a38 <_init_chip+0x38>)
    9a18:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    9a1a:	4b08      	ldr	r3, [pc, #32]	; (9a3c <_init_chip+0x3c>)
    9a1c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    9a1e:	20ff      	movs	r0, #255	; 0xff
    9a20:	4b07      	ldr	r3, [pc, #28]	; (9a40 <_init_chip+0x40>)
    9a22:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    9a24:	bd10      	pop	{r4, pc}
    9a26:	46c0      	nop			; (mov r8, r8)
    9a28:	41004000 	.word	0x41004000
    9a2c:	00009c11 	.word	0x00009c11
    9a30:	00009ad9 	.word	0x00009ad9
    9a34:	00009b11 	.word	0x00009b11
    9a38:	00009ac5 	.word	0x00009ac5
    9a3c:	00009b81 	.word	0x00009b81
    9a40:	00009a45 	.word	0x00009a45

00009a44 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    9a44:	07c3      	lsls	r3, r0, #31
    9a46:	d507      	bpl.n	9a58 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    9a48:	4a18      	ldr	r2, [pc, #96]	; (9aac <_gclk_init_generators_by_fref+0x68>)
    9a4a:	4b19      	ldr	r3, [pc, #100]	; (9ab0 <_gclk_init_generators_by_fref+0x6c>)
    9a4c:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9a4e:	0019      	movs	r1, r3
    9a50:	4a18      	ldr	r2, [pc, #96]	; (9ab4 <_gclk_init_generators_by_fref+0x70>)
    9a52:	684b      	ldr	r3, [r1, #4]
    9a54:	4213      	tst	r3, r2
    9a56:	d1fc      	bne.n	9a52 <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    9a58:	0783      	lsls	r3, r0, #30
    9a5a:	d507      	bpl.n	9a6c <_gclk_init_generators_by_fref+0x28>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    9a5c:	4a16      	ldr	r2, [pc, #88]	; (9ab8 <_gclk_init_generators_by_fref+0x74>)
    9a5e:	4b14      	ldr	r3, [pc, #80]	; (9ab0 <_gclk_init_generators_by_fref+0x6c>)
    9a60:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9a62:	0019      	movs	r1, r3
    9a64:	4a13      	ldr	r2, [pc, #76]	; (9ab4 <_gclk_init_generators_by_fref+0x70>)
    9a66:	684b      	ldr	r3, [r1, #4]
    9a68:	4213      	tst	r3, r2
    9a6a:	d1fc      	bne.n	9a66 <_gclk_init_generators_by_fref+0x22>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    9a6c:	0743      	lsls	r3, r0, #29
    9a6e:	d507      	bpl.n	9a80 <_gclk_init_generators_by_fref+0x3c>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    9a70:	4a0e      	ldr	r2, [pc, #56]	; (9aac <_gclk_init_generators_by_fref+0x68>)
    9a72:	4b0f      	ldr	r3, [pc, #60]	; (9ab0 <_gclk_init_generators_by_fref+0x6c>)
    9a74:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9a76:	0019      	movs	r1, r3
    9a78:	4a0e      	ldr	r2, [pc, #56]	; (9ab4 <_gclk_init_generators_by_fref+0x70>)
    9a7a:	684b      	ldr	r3, [r1, #4]
    9a7c:	4213      	tst	r3, r2
    9a7e:	d1fc      	bne.n	9a7a <_gclk_init_generators_by_fref+0x36>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    9a80:	0703      	lsls	r3, r0, #28
    9a82:	d507      	bpl.n	9a94 <_gclk_init_generators_by_fref+0x50>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    9a84:	4a0d      	ldr	r2, [pc, #52]	; (9abc <_gclk_init_generators_by_fref+0x78>)
    9a86:	4b0a      	ldr	r3, [pc, #40]	; (9ab0 <_gclk_init_generators_by_fref+0x6c>)
    9a88:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9a8a:	0019      	movs	r1, r3
    9a8c:	4a09      	ldr	r2, [pc, #36]	; (9ab4 <_gclk_init_generators_by_fref+0x70>)
    9a8e:	684b      	ldr	r3, [r1, #4]
    9a90:	4213      	tst	r3, r2
    9a92:	d1fc      	bne.n	9a8e <_gclk_init_generators_by_fref+0x4a>
		        | (CONF_GCLK_GENERATOR_3_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_3_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_4_CONFIG == 1
	if (bm & (1ul << 4)) {
    9a94:	06c3      	lsls	r3, r0, #27
    9a96:	d507      	bpl.n	9aa8 <_gclk_init_generators_by_fref+0x64>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    9a98:	4a09      	ldr	r2, [pc, #36]	; (9ac0 <_gclk_init_generators_by_fref+0x7c>)
    9a9a:	4b05      	ldr	r3, [pc, #20]	; (9ab0 <_gclk_init_generators_by_fref+0x6c>)
    9a9c:	631a      	str	r2, [r3, #48]	; 0x30
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    9a9e:	0019      	movs	r1, r3
    9aa0:	4a04      	ldr	r2, [pc, #16]	; (9ab4 <_gclk_init_generators_by_fref+0x70>)
    9aa2:	684b      	ldr	r3, [r1, #4]
    9aa4:	4213      	tst	r3, r2
    9aa6:	d1fc      	bne.n	9aa2 <_gclk_init_generators_by_fref+0x5e>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    9aa8:	4770      	bx	lr
    9aaa:	46c0      	nop			; (mov r8, r8)
    9aac:	00010100 	.word	0x00010100
    9ab0:	40001800 	.word	0x40001800
    9ab4:	000007fd 	.word	0x000007fd
    9ab8:	00010107 	.word	0x00010107
    9abc:	00010103 	.word	0x00010103
    9ac0:	00010106 	.word	0x00010106

00009ac4 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
    9ac4:	4b03      	ldr	r3, [pc, #12]	; (9ad4 <_mclk_init+0x10>)
    9ac6:	2208      	movs	r2, #8
    9ac8:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
    9aca:	3a04      	subs	r2, #4
    9acc:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
    9ace:	3a03      	subs	r2, #3
    9ad0:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    9ad2:	4770      	bx	lr
    9ad4:	40000400 	.word	0x40000400

00009ad8 <_osc32kctrl_init_sources>:

#endif

#if CONF_OSC32K_CONFIG == 1
	/* OSC32K calibration value at bit 12:6 of memory 0x00806020 */
	calib = (*((uint32_t *)0x00806020) & 0x0001FC0) >> 6;
    9ad8:	4b0b      	ldr	r3, [pc, #44]	; (9b08 <_osc32kctrl_init_sources+0x30>)
    9ada:	681b      	ldr	r3, [r3, #0]
    9adc:	04db      	lsls	r3, r3, #19
	hri_osc32kctrl_write_OSC32K_reg(
	    hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	    OSC32KCTRL_OSC32K_CALIB(CONF_OSC32K_CALIB) |
#else
	    OSC32KCTRL_OSC32K_CALIB(calib) |
    9ade:	0e5b      	lsrs	r3, r3, #25
#endif
	        OSC32KCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP) | (CONF_OSC32K_ONDEMAND << OSC32KCTRL_OSC32K_ONDEMAND_Pos)
	        | (CONF_OSC32K_RUNSTDBY << OSC32KCTRL_OSC32K_RUNSTDBY_Pos)
    9ae0:	041b      	lsls	r3, r3, #16
	        | (CONF_OSC32K_EN1K << OSC32KCTRL_OSC32K_EN1K_Pos) | (CONF_OSC32K_EN32K << OSC32KCTRL_OSC32K_EN32K_Pos)
	        | (CONF_OSC32K_ENABLE << OSC32KCTRL_OSC32K_ENABLE_Pos));
    9ae2:	220a      	movs	r2, #10
    9ae4:	4313      	orrs	r3, r2
}

static inline void hri_osc32kctrl_write_OSC32K_reg(const void *const hw, hri_osc32kctrl_osc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSC32K.reg = data;
    9ae6:	4a09      	ldr	r2, [pc, #36]	; (9b0c <_osc32kctrl_init_sources+0x34>)
    9ae8:	6193      	str	r3, [r2, #24]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    9aea:	69d3      	ldr	r3, [r2, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    9aec:	21f8      	movs	r1, #248	; 0xf8
    9aee:	0149      	lsls	r1, r1, #5
    9af0:	400b      	ands	r3, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    9af2:	61d3      	str	r3, [r2, #28]
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_OSC32KRDY) >> OSC32KCTRL_STATUS_OSC32KRDY_Pos;
    9af4:	0011      	movs	r1, r2
#endif
#endif

#if CONF_OSC32K_CONFIG == 1
#if CONF_OSC32K_ENABLE == 1 && CONF_OSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_OSC32KRDY_bit(hw))
    9af6:	2202      	movs	r2, #2
    9af8:	68cb      	ldr	r3, [r1, #12]
    9afa:	421a      	tst	r2, r3
    9afc:	d0fc      	beq.n	9af8 <_osc32kctrl_init_sources+0x20>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    9afe:	2202      	movs	r2, #2
    9b00:	4b02      	ldr	r3, [pc, #8]	; (9b0c <_osc32kctrl_init_sources+0x34>)
    9b02:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    9b04:	4770      	bx	lr
    9b06:	46c0      	nop			; (mov r8, r8)
    9b08:	00806020 	.word	0x00806020
    9b0c:	40001000 	.word	0x40001000

00009b10 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL.reg = data;
    9b10:	4a19      	ldr	r2, [pc, #100]	; (9b78 <_oscctrl_init_sources+0x68>)
    9b12:	4b1a      	ldr	r3, [pc, #104]	; (9b7c <_oscctrl_init_sources+0x6c>)
    9b14:	821a      	strh	r2, [r3, #16]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    9b16:	0018      	movs	r0, r3
    9b18:	2138      	movs	r1, #56	; 0x38
    9b1a:	2202      	movs	r2, #2
    9b1c:	5c43      	ldrb	r3, [r0, r1]
    9b1e:	4213      	tst	r3, r2
    9b20:	d1fc      	bne.n	9b1c <_oscctrl_init_sources+0xc>
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    9b22:	2282      	movs	r2, #130	; 0x82
    9b24:	4b15      	ldr	r3, [pc, #84]	; (9b7c <_oscctrl_init_sources+0x6c>)
    9b26:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    9b28:	0018      	movs	r0, r3
    9b2a:	2138      	movs	r1, #56	; 0x38
    9b2c:	3a80      	subs	r2, #128	; 0x80
    9b2e:	5c43      	ldrb	r3, [r0, r1]
    9b30:	4213      	tst	r3, r2
    9b32:	d1fc      	bne.n	9b2e <_oscctrl_init_sources+0x1e>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY) >> OSCCTRL_STATUS_XOSCRDY_Pos;
    9b34:	4911      	ldr	r1, [pc, #68]	; (9b7c <_oscctrl_init_sources+0x6c>)
    9b36:	2201      	movs	r2, #1
    9b38:	68cb      	ldr	r3, [r1, #12]
	                                     | OSCCTRL_OSC16MCTRL_FSEL(CONF_OSC16M_FSEL));
#endif

#if CONF_XOSC_CONFIG == 1
#if CONF_XOSC_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY_bit(hw))
    9b3a:	421a      	tst	r2, r3
    9b3c:	d0fc      	beq.n	9b38 <_oscctrl_init_sources+0x28>
	((Oscctrl *)hw)->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ONDEMAND;
    9b3e:	4a0f      	ldr	r2, [pc, #60]	; (9b7c <_oscctrl_init_sources+0x6c>)
    9b40:	8a13      	ldrh	r3, [r2, #16]
    9b42:	2180      	movs	r1, #128	; 0x80
    9b44:	430b      	orrs	r3, r1
    9b46:	8213      	strh	r3, [r2, #16]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    9b48:	0010      	movs	r0, r2
    9b4a:	3948      	subs	r1, #72	; 0x48
    9b4c:	220e      	movs	r2, #14
    9b4e:	5c43      	ldrb	r3, [r0, r1]
    9b50:	4213      	tst	r3, r2
    9b52:	d1fc      	bne.n	9b4e <_oscctrl_init_sources+0x3e>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    9b54:	4909      	ldr	r1, [pc, #36]	; (9b7c <_oscctrl_init_sources+0x6c>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    9b56:	2210      	movs	r2, #16
    9b58:	68cb      	ldr	r3, [r1, #12]
    9b5a:	421a      	tst	r2, r3
    9b5c:	d0fc      	beq.n	9b58 <_oscctrl_init_sources+0x48>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    9b5e:	4a07      	ldr	r2, [pc, #28]	; (9b7c <_oscctrl_init_sources+0x6c>)
    9b60:	7d13      	ldrb	r3, [r2, #20]
    9b62:	2180      	movs	r1, #128	; 0x80
    9b64:	430b      	orrs	r3, r1
    9b66:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    9b68:	0010      	movs	r0, r2
    9b6a:	3948      	subs	r1, #72	; 0x48
    9b6c:	220e      	movs	r2, #14
    9b6e:	5c43      	ldrb	r3, [r0, r1]
    9b70:	4213      	tst	r3, r2
    9b72:	d1fc      	bne.n	9b6e <_oscctrl_init_sources+0x5e>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    9b74:	4770      	bx	lr
    9b76:	46c0      	nop			; (mov r8, r8)
    9b78:	00000306 	.word	0x00000306
    9b7c:	40000c00 	.word	0x40000c00

00009b80 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    9b80:	b510      	push	{r4, lr}
#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_OVERWRITE_CALIBRATION == 0
#define NVM_DFLL_COARSE_POS 26
#define NVM_DFLL_COARSE_SIZE 6
	uint32_t coarse;
	coarse = *((uint32_t *)(NVMCTRL_OTP5)) >> NVM_DFLL_COARSE_POS;
    9b82:	4b1f      	ldr	r3, [pc, #124]	; (9c00 <_oscctrl_init_referenced_generators+0x80>)
    9b84:	681c      	ldr	r4, [r3, #0]
    9b86:	0ea4      	lsrs	r4, r4, #26
}

static inline void hri_oscctrl_write_DFLLCTRL_reg(const void *const hw, hri_oscctrl_dfllctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRL.reg = data;
    9b88:	2202      	movs	r2, #2
    9b8a:	4b1e      	ldr	r3, [pc, #120]	; (9c04 <_oscctrl_init_referenced_generators+0x84>)
    9b8c:	831a      	strh	r2, [r3, #24]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    9b8e:	0018      	movs	r0, r3
    9b90:	2138      	movs	r1, #56	; 0x38
    9b92:	5c43      	ldrb	r3, [r0, r1]
    9b94:	4213      	tst	r3, r2
    9b96:	d1fc      	bne.n	9b92 <_oscctrl_init_referenced_generators+0x12>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    9b98:	491a      	ldr	r1, [pc, #104]	; (9c04 <_oscctrl_init_referenced_generators+0x84>)
#endif
#if CONF_DFLL_USBCRM != 1 && CONF_DFLL_MODE != 0
	hri_gclk_write_PCHCTRL_reg(GCLK, 0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_DFLL_GCLK));
#endif
	hri_oscctrl_write_DFLLCTRL_reg(hw, OSCCTRL_DFLLCTRL_ENABLE);
	while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    9b9a:	2280      	movs	r2, #128	; 0x80
    9b9c:	0052      	lsls	r2, r2, #1
    9b9e:	68cb      	ldr	r3, [r1, #12]
    9ba0:	4213      	tst	r3, r2
    9ba2:	d0fc      	beq.n	9b9e <_oscctrl_init_referenced_generators+0x1e>
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    9ba4:	4a18      	ldr	r2, [pc, #96]	; (9c08 <_oscctrl_init_referenced_generators+0x88>)
    9ba6:	4b17      	ldr	r3, [pc, #92]	; (9c04 <_oscctrl_init_referenced_generators+0x84>)
    9ba8:	621a      	str	r2, [r3, #32]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    9baa:	0019      	movs	r1, r3
		;
	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    9bac:	2280      	movs	r2, #128	; 0x80
    9bae:	0052      	lsls	r2, r2, #1
    9bb0:	68cb      	ldr	r3, [r1, #12]
    9bb2:	4213      	tst	r3, r2
    9bb4:	d0fc      	beq.n	9bb0 <_oscctrl_init_referenced_generators+0x30>
		;

#if CONF_DFLL_OVERWRITE_CALIBRATION == 0
	/* FINE is set to fixed value, which defined by DFLL48M Characteristics */
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(coarse) | OSCCTRL_DFLLVAL_FINE(512));
    9bb6:	02a4      	lsls	r4, r4, #10
    9bb8:	2380      	movs	r3, #128	; 0x80
    9bba:	009b      	lsls	r3, r3, #2
    9bbc:	4323      	orrs	r3, r4
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    9bbe:	4a11      	ldr	r2, [pc, #68]	; (9c04 <_oscctrl_init_referenced_generators+0x84>)
    9bc0:	61d3      	str	r3, [r2, #28]
	((Oscctrl *)hw)->DFLLCTRL.reg = data;
    9bc2:	2326      	movs	r3, #38	; 0x26
    9bc4:	8313      	strh	r3, [r2, #24]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    9bc6:	0010      	movs	r0, r2
    9bc8:	2138      	movs	r1, #56	; 0x38
    9bca:	2202      	movs	r2, #2
    9bcc:	5c43      	ldrb	r3, [r0, r1]
    9bce:	4213      	tst	r3, r2
    9bd0:	d1fc      	bne.n	9bcc <_oscctrl_init_referenced_generators+0x4c>
	tmp = ((Oscctrl *)hw)->DFLLCTRL.reg;
    9bd2:	4b0c      	ldr	r3, [pc, #48]	; (9c04 <_oscctrl_init_referenced_generators+0x84>)
    9bd4:	8b1b      	ldrh	r3, [r3, #24]
	                                    | (CONF_DPLL_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_DPLL_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRL_MODE_bit(hw)) {
    9bd6:	075b      	lsls	r3, r3, #29
    9bd8:	d50b      	bpl.n	9bf2 <_oscctrl_init_referenced_generators+0x72>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9bda:	490a      	ldr	r1, [pc, #40]	; (9c04 <_oscctrl_init_referenced_generators+0x84>)
	tmp &= mask;
    9bdc:	2290      	movs	r2, #144	; 0x90
    9bde:	0112      	lsls	r2, r2, #4
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    9be0:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    9be2:	4013      	ands	r3, r2
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    9be4:	4293      	cmp	r3, r2
    9be6:	d1fb      	bne.n	9be0 <_oscctrl_init_referenced_generators+0x60>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    9be8:	4a08      	ldr	r2, [pc, #32]	; (9c0c <_oscctrl_init_referenced_generators+0x8c>)
    9bea:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    9bec:	2b00      	cmp	r3, #0
    9bee:	d1fc      	bne.n	9bea <_oscctrl_init_referenced_generators+0x6a>
		;
#endif
	(void)hw, (void)tmp;
}
    9bf0:	bd10      	pop	{r4, pc}
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    9bf2:	4904      	ldr	r1, [pc, #16]	; (9c04 <_oscctrl_init_referenced_generators+0x84>)
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    9bf4:	2280      	movs	r2, #128	; 0x80
    9bf6:	0052      	lsls	r2, r2, #1
    9bf8:	68cb      	ldr	r3, [r1, #12]
    9bfa:	4213      	tst	r3, r2
    9bfc:	d0fc      	beq.n	9bf8 <_oscctrl_init_referenced_generators+0x78>
    9bfe:	e7f3      	b.n	9be8 <_oscctrl_init_referenced_generators+0x68>
    9c00:	00806020 	.word	0x00806020
    9c04:	40000c00 	.word	0x40000c00
    9c08:	0401bb80 	.word	0x0401bb80
    9c0c:	40001800 	.word	0x40001800

00009c10 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    9c10:	2380      	movs	r3, #128	; 0x80
    9c12:	05db      	lsls	r3, r3, #23
    9c14:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    9c16:	2203      	movs	r2, #3
    9c18:	4013      	ands	r3, r2
    9c1a:	4298      	cmp	r0, r3
    9c1c:	d00c      	beq.n	9c38 <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
    9c1e:	2280      	movs	r2, #128	; 0x80
    9c20:	05d2      	lsls	r2, r2, #23
    9c22:	23ff      	movs	r3, #255	; 0xff
    9c24:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    9c26:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    9c28:	2103      	movs	r1, #3
    9c2a:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
    9c2c:	4008      	ands	r0, r1
    9c2e:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
    9c30:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    9c32:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
    9c34:	2b00      	cmp	r3, #0
    9c36:	d0fc      	beq.n	9c32 <_set_performance_level+0x22>
			;
	}
}
    9c38:	4770      	bx	lr
	...

00009c3c <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    9c3c:	b510      	push	{r4, lr}
    9c3e:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
    9c40:	d033      	beq.n	9caa <_calendar_init+0x6e>
    9c42:	6800      	ldr	r0, [r0, #0]
    9c44:	1e43      	subs	r3, r0, #1
    9c46:	4198      	sbcs	r0, r3
    9c48:	b2c0      	uxtb	r0, r0
    9c4a:	222f      	movs	r2, #47	; 0x2f
    9c4c:	4918      	ldr	r1, [pc, #96]	; (9cb0 <_calendar_init+0x74>)
    9c4e:	4b19      	ldr	r3, [pc, #100]	; (9cb4 <_calendar_init+0x78>)
    9c50:	4798      	blx	r3

	_rtc_dev = dev;
    9c52:	4b19      	ldr	r3, [pc, #100]	; (9cb8 <_calendar_init+0x7c>)
    9c54:	601c      	str	r4, [r3, #0]

	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    9c56:	6822      	ldr	r2, [r4, #0]
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    9c58:	4918      	ldr	r1, [pc, #96]	; (9cbc <_calendar_init+0x80>)
    9c5a:	6913      	ldr	r3, [r2, #16]
    9c5c:	420b      	tst	r3, r1
    9c5e:	d1fc      	bne.n	9c5a <_calendar_init+0x1e>

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    9c60:	8813      	ldrh	r3, [r2, #0]
    9c62:	079b      	lsls	r3, r3, #30
    9c64:	d50c      	bpl.n	9c80 <_calendar_init+0x44>
}

static inline void hri_rtcmode0_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    9c66:	8813      	ldrh	r3, [r2, #0]
    9c68:	2102      	movs	r1, #2
    9c6a:	438b      	bics	r3, r1
    9c6c:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    9c6e:	4913      	ldr	r1, [pc, #76]	; (9cbc <_calendar_init+0x80>)
    9c70:	6913      	ldr	r3, [r2, #16]
    9c72:	420b      	tst	r3, r1
    9c74:	d1fc      	bne.n	9c70 <_calendar_init+0x34>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
    9c76:	6821      	ldr	r1, [r4, #0]
    9c78:	2202      	movs	r2, #2
    9c7a:	690b      	ldr	r3, [r1, #16]
    9c7c:	421a      	tst	r2, r3
    9c7e:	d1fc      	bne.n	9c7a <_calendar_init+0x3e>
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    9c80:	6822      	ldr	r2, [r4, #0]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    9c82:	8813      	ldrh	r3, [r2, #0]
    9c84:	2101      	movs	r1, #1
    9c86:	430b      	orrs	r3, r1
    9c88:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    9c8a:	6913      	ldr	r3, [r2, #16]
    9c8c:	4219      	tst	r1, r3
    9c8e:	d1fc      	bne.n	9c8a <_calendar_init+0x4e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    9c90:	6823      	ldr	r3, [r4, #0]
    9c92:	2101      	movs	r1, #1
    9c94:	691a      	ldr	r2, [r3, #16]
    9c96:	4211      	tst	r1, r2
    9c98:	d1fc      	bne.n	9c94 <_calendar_init+0x58>
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    9c9a:	4a09      	ldr	r2, [pc, #36]	; (9cc0 <_calendar_init+0x84>)
    9c9c:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    9c9e:	4907      	ldr	r1, [pc, #28]	; (9cbc <_calendar_init+0x80>)
    9ca0:	691a      	ldr	r2, [r3, #16]
    9ca2:	420a      	tst	r2, r1
    9ca4:	d1fc      	bne.n	9ca0 <_calendar_init+0x64>
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);

	return ERR_NONE;
}
    9ca6:	2000      	movs	r0, #0
    9ca8:	bd10      	pop	{r4, pc}
    9caa:	2000      	movs	r0, #0
    9cac:	e7cd      	b.n	9c4a <_calendar_init+0xe>
    9cae:	46c0      	nop			; (mov r8, r8)
    9cb0:	0000e9a8 	.word	0x0000e9a8
    9cb4:	0000959d 	.word	0x0000959d
    9cb8:	200004ec 	.word	0x200004ec
    9cbc:	00008003 	.word	0x00008003
    9cc0:	ffff8b00 	.word	0xffff8b00

00009cc4 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    9cc4:	b510      	push	{r4, lr}
	_rtc_interrupt_handler(_rtc_dev);
    9cc6:	4b07      	ldr	r3, [pc, #28]	; (9ce4 <RTC_Handler+0x20>)
    9cc8:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    9cca:	6823      	ldr	r3, [r4, #0]
    9ccc:	899b      	ldrh	r3, [r3, #12]
	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    9cce:	05db      	lsls	r3, r3, #23
    9cd0:	d400      	bmi.n	9cd4 <RTC_Handler+0x10>
}
    9cd2:	bd10      	pop	{r4, pc}
		dev->callback(dev);
    9cd4:	0020      	movs	r0, r4
    9cd6:	6863      	ldr	r3, [r4, #4]
    9cd8:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    9cda:	6823      	ldr	r3, [r4, #0]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    9cdc:	2280      	movs	r2, #128	; 0x80
    9cde:	0052      	lsls	r2, r2, #1
    9ce0:	819a      	strh	r2, [r3, #12]
}
    9ce2:	e7f6      	b.n	9cd2 <RTC_Handler+0xe>
    9ce4:	200004ec 	.word	0x200004ec

00009ce8 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    9ce8:	b510      	push	{r4, lr}
	void *hw = device->hw;
    9cea:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    9cec:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    9cee:	07db      	lsls	r3, r3, #31
    9cf0:	d502      	bpl.n	9cf8 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    9cf2:	7da3      	ldrb	r3, [r4, #22]
    9cf4:	07db      	lsls	r3, r3, #31
    9cf6:	d40f      	bmi.n	9d18 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    9cf8:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    9cfa:	079b      	lsls	r3, r3, #30
    9cfc:	d502      	bpl.n	9d04 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    9cfe:	7da3      	ldrb	r3, [r4, #22]
    9d00:	079b      	lsls	r3, r3, #30
    9d02:	d40e      	bmi.n	9d22 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    9d04:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    9d06:	075b      	lsls	r3, r3, #29
    9d08:	d515      	bpl.n	9d36 <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    9d0a:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    9d0c:	2337      	movs	r3, #55	; 0x37
    9d0e:	421a      	tst	r2, r3
    9d10:	d00c      	beq.n	9d2c <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    9d12:	3308      	adds	r3, #8
    9d14:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    9d16:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    9d18:	2301      	movs	r3, #1
    9d1a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    9d1c:	6803      	ldr	r3, [r0, #0]
    9d1e:	4798      	blx	r3
    9d20:	e7f9      	b.n	9d16 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    9d22:	2302      	movs	r3, #2
    9d24:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    9d26:	6883      	ldr	r3, [r0, #8]
    9d28:	4798      	blx	r3
    9d2a:	e7f4      	b.n	9d16 <_sercom_usart_interrupt_handler+0x2e>
	return ((Sercom *)hw)->USART.DATA.reg;
    9d2c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    9d2e:	b2c9      	uxtb	r1, r1
    9d30:	6843      	ldr	r3, [r0, #4]
    9d32:	4798      	blx	r3
    9d34:	e7ef      	b.n	9d16 <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    9d36:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    9d38:	09db      	lsrs	r3, r3, #7
    9d3a:	d0ec      	beq.n	9d16 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    9d3c:	2380      	movs	r3, #128	; 0x80
    9d3e:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    9d40:	68c3      	ldr	r3, [r0, #12]
    9d42:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    9d44:	8b63      	ldrh	r3, [r4, #26]
    9d46:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    9d48:	8363      	strh	r3, [r4, #26]
    9d4a:	e7e4      	b.n	9d16 <_sercom_usart_interrupt_handler+0x2e>

00009d4c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM3) {
    9d4c:	4b06      	ldr	r3, [pc, #24]	; (9d68 <_sercom_init_irq_param+0x1c>)
    9d4e:	4298      	cmp	r0, r3
    9d50:	d003      	beq.n	9d5a <_sercom_init_irq_param+0xe>
		_sercom3_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM4) {
    9d52:	4b06      	ldr	r3, [pc, #24]	; (9d6c <_sercom_init_irq_param+0x20>)
    9d54:	4298      	cmp	r0, r3
    9d56:	d003      	beq.n	9d60 <_sercom_init_irq_param+0x14>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}
}
    9d58:	4770      	bx	lr
		_sercom3_dev = (struct _usart_async_device *)dev;
    9d5a:	4b05      	ldr	r3, [pc, #20]	; (9d70 <_sercom_init_irq_param+0x24>)
    9d5c:	6019      	str	r1, [r3, #0]
    9d5e:	e7fb      	b.n	9d58 <_sercom_init_irq_param+0xc>
		_sercom4_dev = (struct _usart_async_device *)dev;
    9d60:	4b03      	ldr	r3, [pc, #12]	; (9d70 <_sercom_init_irq_param+0x24>)
    9d62:	6059      	str	r1, [r3, #4]
}
    9d64:	e7f8      	b.n	9d58 <_sercom_init_irq_param+0xc>
    9d66:	46c0      	nop			; (mov r8, r8)
    9d68:	42000c00 	.word	0x42000c00
    9d6c:	42001000 	.word	0x42001000
    9d70:	200004f0 	.word	0x200004f0

00009d74 <_sercom_get_irq_num>:
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    9d74:	4a05      	ldr	r2, [pc, #20]	; (9d8c <_sercom_get_irq_num+0x18>)
    9d76:	2305      	movs	r3, #5
    9d78:	4290      	cmp	r0, r2
    9d7a:	d004      	beq.n	9d86 <_sercom_get_irq_num+0x12>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    9d7c:	23be      	movs	r3, #190	; 0xbe
    9d7e:	061b      	lsls	r3, r3, #24
    9d80:	469c      	mov	ip, r3
    9d82:	4460      	add	r0, ip
    9d84:	0a83      	lsrs	r3, r0, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    9d86:	3308      	adds	r3, #8
    9d88:	b2d8      	uxtb	r0, r3
}
    9d8a:	4770      	bx	lr
    9d8c:	43000400 	.word	0x43000400

00009d90 <_get_i2cm_index>:
{
    9d90:	b510      	push	{r4, lr}
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    9d92:	4b0c      	ldr	r3, [pc, #48]	; (9dc4 <_get_i2cm_index+0x34>)
    9d94:	4298      	cmp	r0, r3
    9d96:	d00f      	beq.n	9db8 <_get_i2cm_index+0x28>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    9d98:	0380      	lsls	r0, r0, #14
    9d9a:	0e00      	lsrs	r0, r0, #24
		if (_i2cms[i].number == sercom_offset) {
    9d9c:	2802      	cmp	r0, #2
    9d9e:	d009      	beq.n	9db4 <_get_i2cm_index+0x24>
    9da0:	2805      	cmp	r0, #5
    9da2:	d00c      	beq.n	9dbe <_get_i2cm_index+0x2e>
	ASSERT(false);
    9da4:	4a08      	ldr	r2, [pc, #32]	; (9dc8 <_get_i2cm_index+0x38>)
    9da6:	4909      	ldr	r1, [pc, #36]	; (9dcc <_get_i2cm_index+0x3c>)
    9da8:	2000      	movs	r0, #0
    9daa:	4b09      	ldr	r3, [pc, #36]	; (9dd0 <_get_i2cm_index+0x40>)
    9dac:	4798      	blx	r3
	return -1;
    9dae:	2001      	movs	r0, #1
    9db0:	4240      	negs	r0, r0
}
    9db2:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    9db4:	2000      	movs	r0, #0
    9db6:	e000      	b.n	9dba <_get_i2cm_index+0x2a>
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    9db8:	2001      	movs	r0, #1
			return i;
    9dba:	b240      	sxtb	r0, r0
    9dbc:	e7f9      	b.n	9db2 <_get_i2cm_index+0x22>
    9dbe:	2001      	movs	r0, #1
    9dc0:	e7fb      	b.n	9dba <_get_i2cm_index+0x2a>
    9dc2:	46c0      	nop			; (mov r8, r8)
    9dc4:	43000400 	.word	0x43000400
    9dc8:	000003c9 	.word	0x000003c9
    9dcc:	0000ea18 	.word	0x0000ea18
    9dd0:	0000959d 	.word	0x0000959d

00009dd4 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    9dd4:	b570      	push	{r4, r5, r6, lr}
    9dd6:	0005      	movs	r5, r0
    9dd8:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    9dda:	0008      	movs	r0, r1
    9ddc:	4b31      	ldr	r3, [pc, #196]	; (9ea4 <_i2c_m_sync_init_impl+0xd0>)
    9dde:	4798      	blx	r3
    9de0:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    9de2:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    9de4:	07db      	lsls	r3, r3, #31
    9de6:	d421      	bmi.n	9e2c <_i2c_m_sync_init_impl+0x58>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    9de8:	0043      	lsls	r3, r0, #1
    9dea:	181b      	adds	r3, r3, r0
    9dec:	00db      	lsls	r3, r3, #3
    9dee:	4a2e      	ldr	r2, [pc, #184]	; (9ea8 <_i2c_m_sync_init_impl+0xd4>)
    9df0:	18d3      	adds	r3, r2, r3
    9df2:	6859      	ldr	r1, [r3, #4]
    9df4:	231c      	movs	r3, #28
    9df6:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    9df8:	2203      	movs	r2, #3
    9dfa:	69e3      	ldr	r3, [r4, #28]
    9dfc:	421a      	tst	r2, r3
    9dfe:	d1fc      	bne.n	9dfa <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    9e00:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    9e02:	079b      	lsls	r3, r3, #30
    9e04:	d50b      	bpl.n	9e1e <_i2c_m_sync_init_impl+0x4a>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    9e06:	6823      	ldr	r3, [r4, #0]
    9e08:	2202      	movs	r2, #2
    9e0a:	4393      	bics	r3, r2
    9e0c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    9e0e:	3201      	adds	r2, #1
    9e10:	69e3      	ldr	r3, [r4, #28]
    9e12:	421a      	tst	r2, r3
    9e14:	d1fc      	bne.n	9e10 <_i2c_m_sync_init_impl+0x3c>
    9e16:	2202      	movs	r2, #2
    9e18:	69e3      	ldr	r3, [r4, #28]
    9e1a:	421a      	tst	r2, r3
    9e1c:	d1fc      	bne.n	9e18 <_i2c_m_sync_init_impl+0x44>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    9e1e:	2301      	movs	r3, #1
    9e20:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    9e22:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    9e24:	2203      	movs	r2, #3
    9e26:	69e3      	ldr	r3, [r4, #28]
    9e28:	421a      	tst	r2, r3
    9e2a:	d1fc      	bne.n	9e26 <_i2c_m_sync_init_impl+0x52>
    9e2c:	2201      	movs	r2, #1
    9e2e:	69e3      	ldr	r3, [r4, #28]
    9e30:	421a      	tst	r2, r3
    9e32:	d1fc      	bne.n	9e2e <_i2c_m_sync_init_impl+0x5a>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    9e34:	0043      	lsls	r3, r0, #1
    9e36:	181b      	adds	r3, r3, r0
    9e38:	00db      	lsls	r3, r3, #3
    9e3a:	4a1b      	ldr	r2, [pc, #108]	; (9ea8 <_i2c_m_sync_init_impl+0xd4>)
    9e3c:	18d3      	adds	r3, r2, r3
    9e3e:	6859      	ldr	r1, [r3, #4]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    9e40:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    9e42:	2203      	movs	r2, #3
    9e44:	69e3      	ldr	r3, [r4, #28]
    9e46:	421a      	tst	r2, r3
    9e48:	d1fc      	bne.n	9e44 <_i2c_m_sync_init_impl+0x70>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    9e4a:	0043      	lsls	r3, r0, #1
    9e4c:	181b      	adds	r3, r3, r0
    9e4e:	00db      	lsls	r3, r3, #3
    9e50:	4a15      	ldr	r2, [pc, #84]	; (9ea8 <_i2c_m_sync_init_impl+0xd4>)
    9e52:	18d3      	adds	r3, r2, r3
    9e54:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    9e56:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    9e58:	2204      	movs	r2, #4
    9e5a:	69e3      	ldr	r3, [r4, #28]
    9e5c:	421a      	tst	r2, r3
    9e5e:	d1fc      	bne.n	9e5a <_i2c_m_sync_init_impl+0x86>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    9e60:	0043      	lsls	r3, r0, #1
    9e62:	181b      	adds	r3, r3, r0
    9e64:	00db      	lsls	r3, r3, #3
    9e66:	4a10      	ldr	r2, [pc, #64]	; (9ea8 <_i2c_m_sync_init_impl+0xd4>)
    9e68:	18d3      	adds	r3, r2, r3
    9e6a:	68db      	ldr	r3, [r3, #12]
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    9e6c:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    9e6e:	0189      	lsls	r1, r1, #6
    9e70:	0f89      	lsrs	r1, r1, #30
    9e72:	81a9      	strh	r1, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    9e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    9e76:	4e0d      	ldr	r6, [pc, #52]	; (9eac <_i2c_m_sync_init_impl+0xd8>)
    9e78:	401e      	ands	r6, r3
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    9e7a:	2301      	movs	r3, #1
    9e7c:	428b      	cmp	r3, r1
    9e7e:	419b      	sbcs	r3, r3
    9e80:	425b      	negs	r3, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    9e82:	039b      	lsls	r3, r3, #14
    9e84:	4333      	orrs	r3, r6
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    9e86:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    9e88:	2204      	movs	r2, #4
    9e8a:	69e3      	ldr	r3, [r4, #28]
    9e8c:	421a      	tst	r2, r3
    9e8e:	d1fc      	bne.n	9e8a <_i2c_m_sync_init_impl+0xb6>

	service->trise = _i2cms[i].trise;
    9e90:	0043      	lsls	r3, r0, #1
    9e92:	1818      	adds	r0, r3, r0
    9e94:	00c0      	lsls	r0, r0, #3
    9e96:	4b04      	ldr	r3, [pc, #16]	; (9ea8 <_i2c_m_sync_init_impl+0xd4>)
    9e98:	1818      	adds	r0, r3, r0
    9e9a:	8a43      	ldrh	r3, [r0, #18]
    9e9c:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    9e9e:	2000      	movs	r0, #0
    9ea0:	bd70      	pop	{r4, r5, r6, pc}
    9ea2:	46c0      	nop			; (mov r8, r8)
    9ea4:	00009d91 	.word	0x00009d91
    9ea8:	0000e9c0 	.word	0x0000e9c0
    9eac:	ffffbfff 	.word	0xffffbfff

00009eb0 <_usart_init>:
{
    9eb0:	b570      	push	{r4, r5, r6, lr}
    9eb2:	0004      	movs	r4, r0
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    9eb4:	4b44      	ldr	r3, [pc, #272]	; (9fc8 <_usart_init+0x118>)
    9eb6:	4298      	cmp	r0, r3
    9eb8:	d005      	beq.n	9ec6 <_usart_init+0x16>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    9eba:	0383      	lsls	r3, r0, #14
    9ebc:	0e1b      	lsrs	r3, r3, #24
		if (_usarts[i].number == sercom_offset) {
    9ebe:	2b03      	cmp	r3, #3
    9ec0:	d053      	beq.n	9f6a <_usart_init+0xba>
    9ec2:	2b04      	cmp	r3, #4
    9ec4:	d053      	beq.n	9f6e <_usart_init+0xbe>
	ASSERT(false);
    9ec6:	4a41      	ldr	r2, [pc, #260]	; (9fcc <_usart_init+0x11c>)
    9ec8:	4941      	ldr	r1, [pc, #260]	; (9fd0 <_usart_init+0x120>)
    9eca:	2000      	movs	r0, #0
    9ecc:	4b41      	ldr	r3, [pc, #260]	; (9fd4 <_usart_init+0x124>)
    9ece:	4798      	blx	r3
	return 0;
    9ed0:	2000      	movs	r0, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    9ed2:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    9ed4:	07db      	lsls	r3, r3, #31
    9ed6:	d421      	bmi.n	9f1c <_usart_init+0x6c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    9ed8:	0083      	lsls	r3, r0, #2
    9eda:	181b      	adds	r3, r3, r0
    9edc:	009b      	lsls	r3, r3, #2
    9ede:	4a3e      	ldr	r2, [pc, #248]	; (9fd8 <_usart_init+0x128>)
    9ee0:	18d3      	adds	r3, r2, r3
    9ee2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    9ee4:	231c      	movs	r3, #28
    9ee6:	4019      	ands	r1, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    9ee8:	2203      	movs	r2, #3
    9eea:	69e3      	ldr	r3, [r4, #28]
    9eec:	421a      	tst	r2, r3
    9eee:	d1fc      	bne.n	9eea <_usart_init+0x3a>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    9ef0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    9ef2:	079b      	lsls	r3, r3, #30
    9ef4:	d50b      	bpl.n	9f0e <_usart_init+0x5e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    9ef6:	6823      	ldr	r3, [r4, #0]
    9ef8:	2202      	movs	r2, #2
    9efa:	4393      	bics	r3, r2
    9efc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    9efe:	2303      	movs	r3, #3
    9f00:	69e2      	ldr	r2, [r4, #28]
    9f02:	4213      	tst	r3, r2
    9f04:	d1fc      	bne.n	9f00 <_usart_init+0x50>
    9f06:	2302      	movs	r3, #2
    9f08:	69e2      	ldr	r2, [r4, #28]
    9f0a:	4213      	tst	r3, r2
    9f0c:	d1fc      	bne.n	9f08 <_usart_init+0x58>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    9f0e:	2301      	movs	r3, #1
    9f10:	430b      	orrs	r3, r1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    9f12:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    9f14:	2203      	movs	r2, #3
    9f16:	69e3      	ldr	r3, [r4, #28]
    9f18:	421a      	tst	r2, r3
    9f1a:	d1fc      	bne.n	9f16 <_usart_init+0x66>
    9f1c:	2201      	movs	r2, #1
    9f1e:	69e3      	ldr	r3, [r4, #28]
    9f20:	421a      	tst	r2, r3
    9f22:	d1fc      	bne.n	9f1e <_usart_init+0x6e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    9f24:	0001      	movs	r1, r0
    9f26:	0083      	lsls	r3, r0, #2
    9f28:	181b      	adds	r3, r3, r0
    9f2a:	009b      	lsls	r3, r3, #2
    9f2c:	4a2a      	ldr	r2, [pc, #168]	; (9fd8 <_usart_init+0x128>)
    9f2e:	18d3      	adds	r3, r2, r3
    9f30:	6b58      	ldr	r0, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.CTRLA.reg = data;
    9f32:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    9f34:	2203      	movs	r2, #3
    9f36:	69e3      	ldr	r3, [r4, #28]
    9f38:	421a      	tst	r2, r3
    9f3a:	d1fc      	bne.n	9f36 <_usart_init+0x86>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    9f3c:	008b      	lsls	r3, r1, #2
    9f3e:	185b      	adds	r3, r3, r1
    9f40:	009b      	lsls	r3, r3, #2
    9f42:	4a25      	ldr	r2, [pc, #148]	; (9fd8 <_usart_init+0x128>)
    9f44:	18d3      	adds	r3, r2, r3
    9f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	((Sercom *)hw)->USART.CTRLB.reg = data;
    9f48:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    9f4a:	2207      	movs	r2, #7
    9f4c:	69e3      	ldr	r3, [r4, #28]
    9f4e:	421a      	tst	r2, r3
    9f50:	d1fc      	bne.n	9f4c <_usart_init+0x9c>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    9f52:	23c0      	movs	r3, #192	; 0xc0
    9f54:	01db      	lsls	r3, r3, #7
    9f56:	4218      	tst	r0, r3
    9f58:	d10b      	bne.n	9f72 <_usart_init+0xc2>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    9f5a:	008b      	lsls	r3, r1, #2
    9f5c:	185b      	adds	r3, r3, r1
    9f5e:	009b      	lsls	r3, r3, #2
    9f60:	4a1d      	ldr	r2, [pc, #116]	; (9fd8 <_usart_init+0x128>)
    9f62:	18d3      	adds	r3, r2, r3
    9f64:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
	((Sercom *)hw)->USART.BAUD.reg = data;
    9f66:	81a3      	strh	r3, [r4, #12]
    9f68:	e01d      	b.n	9fa6 <_usart_init+0xf6>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    9f6a:	2000      	movs	r0, #0
    9f6c:	e7b1      	b.n	9ed2 <_usart_init+0x22>
		if (_usarts[i].number == sercom_offset) {
    9f6e:	2001      	movs	r0, #1
    9f70:	e7af      	b.n	9ed2 <_usart_init+0x22>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    9f72:	4a19      	ldr	r2, [pc, #100]	; (9fd8 <_usart_init+0x128>)
    9f74:	0088      	lsls	r0, r1, #2
    9f76:	1843      	adds	r3, r0, r1
    9f78:	009b      	lsls	r3, r3, #2
    9f7a:	18d3      	adds	r3, r2, r3
    9f7c:	8f9d      	ldrh	r5, [r3, #60]	; 0x3c
    9f7e:	89a3      	ldrh	r3, [r4, #12]
    9f80:	04ed      	lsls	r5, r5, #19
    9f82:	0ced      	lsrs	r5, r5, #19
    9f84:	0b5b      	lsrs	r3, r3, #13
    9f86:	035b      	lsls	r3, r3, #13
    9f88:	432b      	orrs	r3, r5
    9f8a:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    9f8c:	3230      	adds	r2, #48	; 0x30
    9f8e:	1840      	adds	r0, r0, r1
    9f90:	0080      	lsls	r0, r0, #2
    9f92:	1812      	adds	r2, r2, r0
    9f94:	7b93      	ldrb	r3, [r2, #14]
    9f96:	2207      	movs	r2, #7
    9f98:	401a      	ands	r2, r3
    9f9a:	89a3      	ldrh	r3, [r4, #12]
    9f9c:	0352      	lsls	r2, r2, #13
    9f9e:	04db      	lsls	r3, r3, #19
    9fa0:	0cdb      	lsrs	r3, r3, #19
    9fa2:	4313      	orrs	r3, r2
    9fa4:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    9fa6:	4b0c      	ldr	r3, [pc, #48]	; (9fd8 <_usart_init+0x128>)
    9fa8:	0018      	movs	r0, r3
    9faa:	3030      	adds	r0, #48	; 0x30
    9fac:	008a      	lsls	r2, r1, #2
    9fae:	1855      	adds	r5, r2, r1
    9fb0:	00ad      	lsls	r5, r5, #2
    9fb2:	1940      	adds	r0, r0, r5
    9fb4:	7bc0      	ldrb	r0, [r0, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    9fb6:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    9fb8:	195b      	adds	r3, r3, r5
    9fba:	3340      	adds	r3, #64	; 0x40
    9fbc:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    9fbe:	2330      	movs	r3, #48	; 0x30
    9fc0:	54e2      	strb	r2, [r4, r3]
}
    9fc2:	2000      	movs	r0, #0
    9fc4:	bd70      	pop	{r4, r5, r6, pc}
    9fc6:	46c0      	nop			; (mov r8, r8)
    9fc8:	43000400 	.word	0x43000400
    9fcc:	00000263 	.word	0x00000263
    9fd0:	0000ea18 	.word	0x0000ea18
    9fd4:	0000959d 	.word	0x0000959d
    9fd8:	0000e9c0 	.word	0x0000e9c0

00009fdc <_usart_async_init>:
{
    9fdc:	b570      	push	{r4, r5, r6, lr}
    9fde:	0006      	movs	r6, r0
    9fe0:	000c      	movs	r4, r1
	ASSERT(device);
    9fe2:	1e43      	subs	r3, r0, #1
    9fe4:	4198      	sbcs	r0, r3
    9fe6:	b2c0      	uxtb	r0, r0
    9fe8:	22c6      	movs	r2, #198	; 0xc6
    9fea:	4912      	ldr	r1, [pc, #72]	; (a034 <_usart_async_init+0x58>)
    9fec:	4b12      	ldr	r3, [pc, #72]	; (a038 <_usart_async_init+0x5c>)
    9fee:	4798      	blx	r3
	init_status = _usart_init(hw);
    9ff0:	0020      	movs	r0, r4
    9ff2:	4b12      	ldr	r3, [pc, #72]	; (a03c <_usart_async_init+0x60>)
    9ff4:	4798      	blx	r3
    9ff6:	1e05      	subs	r5, r0, #0
	if (init_status) {
    9ff8:	d001      	beq.n	9ffe <_usart_async_init+0x22>
}
    9ffa:	0028      	movs	r0, r5
    9ffc:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    9ffe:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    a000:	0031      	movs	r1, r6
    a002:	0020      	movs	r0, r4
    a004:	4b0e      	ldr	r3, [pc, #56]	; (a040 <_usart_async_init+0x64>)
    a006:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    a008:	0020      	movs	r0, r4
    a00a:	4b0e      	ldr	r3, [pc, #56]	; (a044 <_usart_async_init+0x68>)
    a00c:	4798      	blx	r3
  if ((int32_t)(IRQn) >= 0)
    a00e:	0603      	lsls	r3, r0, #24
    a010:	d4f3      	bmi.n	9ffa <_usart_async_init+0x1e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a012:	231f      	movs	r3, #31
    a014:	4018      	ands	r0, r3
    a016:	3b1e      	subs	r3, #30
    a018:	4083      	lsls	r3, r0
    a01a:	4a0b      	ldr	r2, [pc, #44]	; (a048 <_usart_async_init+0x6c>)
    a01c:	2180      	movs	r1, #128	; 0x80
    a01e:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    a020:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a024:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a028:	3101      	adds	r1, #1
    a02a:	31ff      	adds	r1, #255	; 0xff
    a02c:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a02e:	6013      	str	r3, [r2, #0]
    a030:	e7e3      	b.n	9ffa <_usart_async_init+0x1e>
    a032:	46c0      	nop			; (mov r8, r8)
    a034:	0000ea18 	.word	0x0000ea18
    a038:	0000959d 	.word	0x0000959d
    a03c:	00009eb1 	.word	0x00009eb1
    a040:	00009d4d 	.word	0x00009d4d
    a044:	00009d75 	.word	0x00009d75
    a048:	e000e100 	.word	0xe000e100

0000a04c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    a04c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    a04e:	6813      	ldr	r3, [r2, #0]
    a050:	2102      	movs	r1, #2
    a052:	430b      	orrs	r3, r1
    a054:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    a056:	3101      	adds	r1, #1
    a058:	69d3      	ldr	r3, [r2, #28]
    a05a:	4219      	tst	r1, r3
    a05c:	d1fc      	bne.n	a058 <_usart_async_enable+0xc>
}
    a05e:	4770      	bx	lr

0000a060 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    a060:	6983      	ldr	r3, [r0, #24]
    a062:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    a064:	8519      	strh	r1, [r3, #40]	; 0x28
}
    a066:	4770      	bx	lr

0000a068 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    a068:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    a06a:	2201      	movs	r2, #1
    a06c:	759a      	strb	r2, [r3, #22]
}
    a06e:	4770      	bx	lr

0000a070 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    a070:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    a072:	2202      	movs	r2, #2
    a074:	759a      	strb	r2, [r3, #22]
}
    a076:	4770      	bx	lr

0000a078 <_usart_async_set_irq_state>:
{
    a078:	b570      	push	{r4, r5, r6, lr}
    a07a:	0004      	movs	r4, r0
    a07c:	000d      	movs	r5, r1
    a07e:	0016      	movs	r6, r2
	ASSERT(device);
    a080:	1e43      	subs	r3, r0, #1
    a082:	4198      	sbcs	r0, r3
    a084:	b2c0      	uxtb	r0, r0
    a086:	4a16      	ldr	r2, [pc, #88]	; (a0e0 <_usart_async_set_irq_state+0x68>)
    a088:	4916      	ldr	r1, [pc, #88]	; (a0e4 <_usart_async_set_irq_state+0x6c>)
    a08a:	4b17      	ldr	r3, [pc, #92]	; (a0e8 <_usart_async_set_irq_state+0x70>)
    a08c:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    a08e:	2302      	movs	r3, #2
    a090:	002a      	movs	r2, r5
    a092:	439a      	bics	r2, r3
    a094:	d10e      	bne.n	a0b4 <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    a096:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    a098:	2e00      	cmp	r6, #0
    a09a:	d105      	bne.n	a0a8 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    a09c:	2201      	movs	r2, #1
    a09e:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    a0a0:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    a0a2:	3201      	adds	r2, #1
    a0a4:	751a      	strb	r2, [r3, #20]
}
    a0a6:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    a0a8:	2201      	movs	r2, #1
    a0aa:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    a0ac:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    a0ae:	3201      	adds	r2, #1
    a0b0:	759a      	strb	r2, [r3, #22]
    a0b2:	e7f8      	b.n	a0a6 <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
    a0b4:	2d01      	cmp	r5, #1
    a0b6:	d007      	beq.n	a0c8 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
    a0b8:	2d03      	cmp	r5, #3
    a0ba:	d1f4      	bne.n	a0a6 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    a0bc:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    a0be:	2e00      	cmp	r6, #0
    a0c0:	d00b      	beq.n	a0da <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    a0c2:	2280      	movs	r2, #128	; 0x80
    a0c4:	759a      	strb	r2, [r3, #22]
}
    a0c6:	e7ee      	b.n	a0a6 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    a0c8:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    a0ca:	2e00      	cmp	r6, #0
    a0cc:	d102      	bne.n	a0d4 <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    a0ce:	2204      	movs	r2, #4
    a0d0:	751a      	strb	r2, [r3, #20]
    a0d2:	e7e8      	b.n	a0a6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    a0d4:	2204      	movs	r2, #4
    a0d6:	759a      	strb	r2, [r3, #22]
    a0d8:	e7e5      	b.n	a0a6 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    a0da:	2280      	movs	r2, #128	; 0x80
    a0dc:	751a      	strb	r2, [r3, #20]
    a0de:	e7e2      	b.n	a0a6 <_usart_async_set_irq_state+0x2e>
    a0e0:	00000223 	.word	0x00000223
    a0e4:	0000ea18 	.word	0x0000ea18
    a0e8:	0000959d 	.word	0x0000959d

0000a0ec <_i2c_m_sync_init>:
{
    a0ec:	b570      	push	{r4, r5, r6, lr}
    a0ee:	0004      	movs	r4, r0
    a0f0:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    a0f2:	1e43      	subs	r3, r0, #1
    a0f4:	4198      	sbcs	r0, r3
    a0f6:	b2c0      	uxtb	r0, r0
    a0f8:	22a7      	movs	r2, #167	; 0xa7
    a0fa:	00d2      	lsls	r2, r2, #3
    a0fc:	4904      	ldr	r1, [pc, #16]	; (a110 <_i2c_m_sync_init+0x24>)
    a0fe:	4b05      	ldr	r3, [pc, #20]	; (a114 <_i2c_m_sync_init+0x28>)
    a100:	4798      	blx	r3
	i2c_dev->hw = hw;
    a102:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    a104:	0029      	movs	r1, r5
    a106:	0020      	movs	r0, r4
    a108:	4b03      	ldr	r3, [pc, #12]	; (a118 <_i2c_m_sync_init+0x2c>)
    a10a:	4798      	blx	r3
}
    a10c:	bd70      	pop	{r4, r5, r6, pc}
    a10e:	46c0      	nop			; (mov r8, r8)
    a110:	0000ea18 	.word	0x0000ea18
    a114:	0000959d 	.word	0x0000959d
    a118:	00009dd5 	.word	0x00009dd5

0000a11c <_i2c_m_sync_enable>:
{
    a11c:	b570      	push	{r4, r5, r6, lr}
    a11e:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
    a120:	4d1a      	ldr	r5, [pc, #104]	; (a18c <_i2c_m_sync_enable+0x70>)
    a122:	1e43      	subs	r3, r0, #1
    a124:	4198      	sbcs	r0, r3
    a126:	b2c0      	uxtb	r0, r0
    a128:	4a19      	ldr	r2, [pc, #100]	; (a190 <_i2c_m_sync_enable+0x74>)
    a12a:	0029      	movs	r1, r5
    a12c:	4e19      	ldr	r6, [pc, #100]	; (a194 <_i2c_m_sync_enable+0x78>)
    a12e:	47b0      	blx	r6
	return _i2c_m_enable_implementation(i2c_dev->hw);
    a130:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    a132:	0020      	movs	r0, r4
    a134:	1e43      	subs	r3, r0, #1
    a136:	4198      	sbcs	r0, r3
    a138:	b2c0      	uxtb	r0, r0
    a13a:	4a17      	ldr	r2, [pc, #92]	; (a198 <_i2c_m_sync_enable+0x7c>)
    a13c:	0029      	movs	r1, r5
    a13e:	47b0      	blx	r6
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    a140:	6823      	ldr	r3, [r4, #0]
    a142:	2202      	movs	r2, #2
    a144:	4313      	orrs	r3, r2
    a146:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a148:	3201      	adds	r2, #1
    a14a:	69e3      	ldr	r3, [r4, #28]
    a14c:	421a      	tst	r2, r3
    a14e:	d1fc      	bne.n	a14a <_i2c_m_sync_enable+0x2e>
    a150:	2504      	movs	r5, #4
    a152:	2204      	movs	r2, #4
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    a154:	2003      	movs	r0, #3
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    a156:	2610      	movs	r6, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a158:	4910      	ldr	r1, [pc, #64]	; (a19c <_i2c_m_sync_enable+0x80>)
    a15a:	69e3      	ldr	r3, [r4, #28]
    a15c:	421a      	tst	r2, r3
    a15e:	d1fc      	bne.n	a15a <_i2c_m_sync_enable+0x3e>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    a160:	8b63      	ldrh	r3, [r4, #26]
    a162:	091b      	lsrs	r3, r3, #4
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    a164:	4003      	ands	r3, r0
    a166:	2b01      	cmp	r3, #1
    a168:	d00a      	beq.n	a180 <_i2c_m_sync_enable+0x64>
    a16a:	3901      	subs	r1, #1
		if (timeout <= 0) {
    a16c:	2900      	cmp	r1, #0
    a16e:	d1f4      	bne.n	a15a <_i2c_m_sync_enable+0x3e>
    a170:	3d01      	subs	r5, #1
			if (--timeout_attempt)
    a172:	2d00      	cmp	r5, #0
    a174:	d006      	beq.n	a184 <_i2c_m_sync_enable+0x68>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    a176:	8366      	strh	r6, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a178:	69e3      	ldr	r3, [r4, #28]
    a17a:	421a      	tst	r2, r3
    a17c:	d1fc      	bne.n	a178 <_i2c_m_sync_enable+0x5c>
    a17e:	e7eb      	b.n	a158 <_i2c_m_sync_enable+0x3c>
	return ERR_NONE;
    a180:	2000      	movs	r0, #0
}
    a182:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    a184:	2006      	movs	r0, #6
    a186:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
    a188:	e7fb      	b.n	a182 <_i2c_m_sync_enable+0x66>
    a18a:	46c0      	nop			; (mov r8, r8)
    a18c:	0000ea18 	.word	0x0000ea18
    a190:	00000555 	.word	0x00000555
    a194:	0000959d 	.word	0x0000959d
    a198:	00000625 	.word	0x00000625
    a19c:	0000ffff 	.word	0x0000ffff

0000a1a0 <_i2c_m_sync_transfer>:
{
    a1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1a2:	46de      	mov	lr, fp
    a1a4:	4657      	mov	r7, sl
    a1a6:	464e      	mov	r6, r9
    a1a8:	4645      	mov	r5, r8
    a1aa:	b5e0      	push	{r5, r6, r7, lr}
    a1ac:	b083      	sub	sp, #12
    a1ae:	0005      	movs	r5, r0
    a1b0:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
    a1b2:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    a1b4:	0006      	movs	r6, r0
    a1b6:	1e73      	subs	r3, r6, #1
    a1b8:	419e      	sbcs	r6, r3
    a1ba:	b2f3      	uxtb	r3, r6
    a1bc:	9301      	str	r3, [sp, #4]
    a1be:	4fb4      	ldr	r7, [pc, #720]	; (a490 <_i2c_m_sync_transfer+0x2f0>)
    a1c0:	22be      	movs	r2, #190	; 0xbe
    a1c2:	00d2      	lsls	r2, r2, #3
    a1c4:	0039      	movs	r1, r7
    a1c6:	0018      	movs	r0, r3
    a1c8:	4eb2      	ldr	r6, [pc, #712]	; (a494 <_i2c_m_sync_transfer+0x2f4>)
    a1ca:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    a1cc:	6928      	ldr	r0, [r5, #16]
    a1ce:	1e43      	subs	r3, r0, #1
    a1d0:	4198      	sbcs	r0, r3
    a1d2:	b2c0      	uxtb	r0, r0
    a1d4:	4ab0      	ldr	r2, [pc, #704]	; (a498 <_i2c_m_sync_transfer+0x2f8>)
    a1d6:	0039      	movs	r1, r7
    a1d8:	47b0      	blx	r6
	ASSERT(msg);
    a1da:	4640      	mov	r0, r8
    a1dc:	1e43      	subs	r3, r0, #1
    a1de:	4198      	sbcs	r0, r3
    a1e0:	b2c0      	uxtb	r0, r0
    a1e2:	4aae      	ldr	r2, [pc, #696]	; (a49c <_i2c_m_sync_transfer+0x2fc>)
    a1e4:	0039      	movs	r1, r7
    a1e6:	47b0      	blx	r6
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    a1e8:	886b      	ldrh	r3, [r5, #2]
    a1ea:	05db      	lsls	r3, r3, #23
    a1ec:	d500      	bpl.n	a1f0 <_i2c_m_sync_transfer+0x50>
    a1ee:	e224      	b.n	a63a <_i2c_m_sync_transfer+0x49a>
	msg->flags |= I2C_M_BUSY;
    a1f0:	4643      	mov	r3, r8
    a1f2:	885a      	ldrh	r2, [r3, #2]
    a1f4:	2380      	movs	r3, #128	; 0x80
    a1f6:	005b      	lsls	r3, r3, #1
    a1f8:	431a      	orrs	r2, r3
    a1fa:	4641      	mov	r1, r8
    a1fc:	804a      	strh	r2, [r1, #2]
	i2c_dev->service.msg = *msg;
    a1fe:	002a      	movs	r2, r5
    a200:	c9c1      	ldmia	r1!, {r0, r6, r7}
    a202:	c2c1      	stmia	r2!, {r0, r6, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    a204:	6862      	ldr	r2, [r4, #4]
    a206:	4313      	orrs	r3, r2
    a208:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a20a:	2204      	movs	r2, #4
    a20c:	69e3      	ldr	r3, [r4, #28]
    a20e:	421a      	tst	r2, r3
    a210:	d1fc      	bne.n	a20c <_i2c_m_sync_transfer+0x6c>
	void *             hw    = i2c_dev->hw;
    a212:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    a214:	683b      	ldr	r3, [r7, #0]
    a216:	4699      	mov	r9, r3
	ASSERT(i2c_dev);
    a218:	4aa1      	ldr	r2, [pc, #644]	; (a4a0 <_i2c_m_sync_transfer+0x300>)
    a21a:	499d      	ldr	r1, [pc, #628]	; (a490 <_i2c_m_sync_transfer+0x2f0>)
    a21c:	9801      	ldr	r0, [sp, #4]
    a21e:	4b9d      	ldr	r3, [pc, #628]	; (a494 <_i2c_m_sync_transfer+0x2f4>)
    a220:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    a222:	686b      	ldr	r3, [r5, #4]
    a224:	2b01      	cmp	r3, #1
    a226:	d05a      	beq.n	a2de <_i2c_m_sync_transfer+0x13e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    a228:	687b      	ldr	r3, [r7, #4]
    a22a:	4a9e      	ldr	r2, [pc, #632]	; (a4a4 <_i2c_m_sync_transfer+0x304>)
    a22c:	4013      	ands	r3, r2
    a22e:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a230:	2204      	movs	r2, #4
    a232:	69fb      	ldr	r3, [r7, #28]
    a234:	421a      	tst	r2, r3
    a236:	d1fc      	bne.n	a232 <_i2c_m_sync_transfer+0x92>
	if (msg->addr & I2C_M_TEN) {
    a238:	882b      	ldrh	r3, [r5, #0]
    a23a:	055a      	lsls	r2, r3, #21
    a23c:	d55c      	bpl.n	a2f8 <_i2c_m_sync_transfer+0x158>
		if (msg->flags & I2C_M_RD) {
    a23e:	886a      	ldrh	r2, [r5, #2]
    a240:	07d2      	lsls	r2, r2, #31
    a242:	d504      	bpl.n	a24e <_i2c_m_sync_transfer+0xae>
			msg->flags |= I2C_M_TEN;
    a244:	886a      	ldrh	r2, [r5, #2]
    a246:	2180      	movs	r1, #128	; 0x80
    a248:	00c9      	lsls	r1, r1, #3
    a24a:	430a      	orrs	r2, r1
    a24c:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    a24e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a250:	4995      	ldr	r1, [pc, #596]	; (a4a8 <_i2c_m_sync_transfer+0x308>)
    a252:	4019      	ands	r1, r3
    a254:	2204      	movs	r2, #4
    a256:	69fb      	ldr	r3, [r7, #28]
    a258:	421a      	tst	r2, r3
    a25a:	d1fc      	bne.n	a256 <_i2c_m_sync_transfer+0xb6>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a25e:	2280      	movs	r2, #128	; 0x80
    a260:	01d2      	lsls	r2, r2, #7
    a262:	401a      	ands	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
    a264:	2380      	movs	r3, #128	; 0x80
    a266:	021b      	lsls	r3, r3, #8
    a268:	4313      	orrs	r3, r2
    a26a:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    a26c:	6279      	str	r1, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a26e:	2204      	movs	r2, #4
    a270:	69fb      	ldr	r3, [r7, #28]
    a272:	421a      	tst	r2, r3
    a274:	d1fc      	bne.n	a270 <_i2c_m_sync_transfer+0xd0>
	void *   hw      = i2c_dev->hw;
    a276:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    a278:	7e0b      	ldrb	r3, [r1, #24]
    a27a:	b2db      	uxtb	r3, r3
    a27c:	4a8b      	ldr	r2, [pc, #556]	; (a4ac <_i2c_m_sync_transfer+0x30c>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    a27e:	2003      	movs	r0, #3
    a280:	4218      	tst	r0, r3
    a282:	d104      	bne.n	a28e <_i2c_m_sync_transfer+0xee>
    a284:	7e0b      	ldrb	r3, [r1, #24]
    a286:	b2db      	uxtb	r3, r3
    a288:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
    a28a:	2a00      	cmp	r2, #0
    a28c:	d1f8      	bne.n	a280 <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    a28e:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a290:	2104      	movs	r1, #4
    a292:	69fa      	ldr	r2, [r7, #28]
    a294:	4211      	tst	r1, r2
    a296:	d1fc      	bne.n	a292 <_i2c_m_sync_transfer+0xf2>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    a298:	8b7a      	ldrh	r2, [r7, #26]
    a29a:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    a29c:	07d9      	lsls	r1, r3, #31
    a29e:	d400      	bmi.n	a2a2 <_i2c_m_sync_transfer+0x102>
    a2a0:	e0a0      	b.n	a3e4 <_i2c_m_sync_transfer+0x244>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    a2a2:	0793      	lsls	r3, r2, #30
    a2a4:	d53e      	bpl.n	a324 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    a2a6:	2301      	movs	r3, #1
    a2a8:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
    a2aa:	886b      	ldrh	r3, [r5, #2]
    a2ac:	2180      	movs	r1, #128	; 0x80
    a2ae:	0149      	lsls	r1, r1, #5
    a2b0:	430b      	orrs	r3, r1
    a2b2:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    a2b4:	886b      	ldrh	r3, [r5, #2]
    a2b6:	497e      	ldr	r1, [pc, #504]	; (a4b0 <_i2c_m_sync_transfer+0x310>)
    a2b8:	400b      	ands	r3, r1
    a2ba:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    a2bc:	2001      	movs	r0, #1
    a2be:	0003      	movs	r3, r0
    a2c0:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
    a2c2:	4258      	negs	r0, r3
    a2c4:	4158      	adcs	r0, r3
    a2c6:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    a2c8:	886b      	ldrh	r3, [r5, #2]
    a2ca:	4a79      	ldr	r2, [pc, #484]	; (a4b0 <_i2c_m_sync_transfer+0x310>)
    a2cc:	4013      	ands	r3, r2
    a2ce:	806b      	strh	r3, [r5, #2]
}
    a2d0:	b003      	add	sp, #12
    a2d2:	bc3c      	pop	{r2, r3, r4, r5}
    a2d4:	4690      	mov	r8, r2
    a2d6:	4699      	mov	r9, r3
    a2d8:	46a2      	mov	sl, r4
    a2da:	46ab      	mov	fp, r5
    a2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
    a2de:	464b      	mov	r3, r9
    a2e0:	011b      	lsls	r3, r3, #4
    a2e2:	d5a1      	bpl.n	a228 <_i2c_m_sync_transfer+0x88>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a2e4:	687a      	ldr	r2, [r7, #4]
    a2e6:	2380      	movs	r3, #128	; 0x80
    a2e8:	02db      	lsls	r3, r3, #11
    a2ea:	4313      	orrs	r3, r2
    a2ec:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a2ee:	2204      	movs	r2, #4
    a2f0:	69fb      	ldr	r3, [r7, #28]
    a2f2:	421a      	tst	r2, r3
    a2f4:	d1fc      	bne.n	a2f0 <_i2c_m_sync_transfer+0x150>
    a2f6:	e79f      	b.n	a238 <_i2c_m_sync_transfer+0x98>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    a2f8:	886a      	ldrh	r2, [r5, #2]
    a2fa:	005b      	lsls	r3, r3, #1
    a2fc:	21ff      	movs	r1, #255	; 0xff
    a2fe:	400b      	ands	r3, r1
    a300:	39fe      	subs	r1, #254	; 0xfe
    a302:	4011      	ands	r1, r2
    a304:	4319      	orrs	r1, r3
    a306:	2204      	movs	r2, #4
    a308:	69fb      	ldr	r3, [r7, #28]
    a30a:	421a      	tst	r2, r3
    a30c:	d1fc      	bne.n	a308 <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a310:	2280      	movs	r2, #128	; 0x80
    a312:	01d2      	lsls	r2, r2, #7
    a314:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    a316:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    a318:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a31a:	2204      	movs	r2, #4
    a31c:	69fb      	ldr	r3, [r7, #28]
    a31e:	421a      	tst	r2, r3
    a320:	d1fc      	bne.n	a31c <_i2c_m_sync_transfer+0x17c>
    a322:	e7a8      	b.n	a276 <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    a324:	0753      	lsls	r3, r2, #29
    a326:	d41b      	bmi.n	a360 <_i2c_m_sync_transfer+0x1c0>
			if (msg->flags & I2C_M_TEN) {
    a328:	886b      	ldrh	r3, [r5, #2]
    a32a:	055b      	lsls	r3, r3, #21
    a32c:	d535      	bpl.n	a39a <_i2c_m_sync_transfer+0x1fa>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    a32e:	882b      	ldrh	r3, [r5, #0]
    a330:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a332:	2106      	movs	r1, #6
    a334:	4019      	ands	r1, r3
    a336:	2204      	movs	r2, #4
    a338:	69fb      	ldr	r3, [r7, #28]
    a33a:	421a      	tst	r2, r3
    a33c:	d1fc      	bne.n	a338 <_i2c_m_sync_transfer+0x198>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a340:	2280      	movs	r2, #128	; 0x80
    a342:	01d2      	lsls	r2, r2, #7
    a344:	4013      	ands	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    a346:	22f1      	movs	r2, #241	; 0xf1
    a348:	4313      	orrs	r3, r2
    a34a:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    a34c:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a34e:	3aed      	subs	r2, #237	; 0xed
    a350:	69fb      	ldr	r3, [r7, #28]
    a352:	421a      	tst	r2, r3
    a354:	d1fc      	bne.n	a350 <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
    a356:	886b      	ldrh	r3, [r5, #2]
    a358:	4a56      	ldr	r2, [pc, #344]	; (a4b4 <_i2c_m_sync_transfer+0x314>)
    a35a:	4013      	ands	r3, r2
    a35c:	806b      	strh	r3, [r5, #2]
    a35e:	e066      	b.n	a42e <_i2c_m_sync_transfer+0x28e>
				if (msg->len > 0) {
    a360:	686b      	ldr	r3, [r5, #4]
    a362:	2b00      	cmp	r3, #0
    a364:	dd04      	ble.n	a370 <_i2c_m_sync_transfer+0x1d0>
					msg->flags |= I2C_M_FAIL;
    a366:	886b      	ldrh	r3, [r5, #2]
    a368:	2280      	movs	r2, #128	; 0x80
    a36a:	0152      	lsls	r2, r2, #5
    a36c:	4313      	orrs	r3, r2
    a36e:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    a370:	886b      	ldrh	r3, [r5, #2]
    a372:	b21b      	sxth	r3, r3
    a374:	2b00      	cmp	r3, #0
    a376:	db06      	blt.n	a386 <_i2c_m_sync_transfer+0x1e6>
				msg->flags &= ~I2C_M_BUSY;
    a378:	886b      	ldrh	r3, [r5, #2]
    a37a:	4a4d      	ldr	r2, [pc, #308]	; (a4b0 <_i2c_m_sync_transfer+0x310>)
    a37c:	4013      	ands	r3, r2
    a37e:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    a380:	2002      	movs	r0, #2
    a382:	4240      	negs	r0, r0
    a384:	e7a0      	b.n	a2c8 <_i2c_m_sync_transfer+0x128>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    a386:	687a      	ldr	r2, [r7, #4]
    a388:	23c0      	movs	r3, #192	; 0xc0
    a38a:	029b      	lsls	r3, r3, #10
    a38c:	4313      	orrs	r3, r2
    a38e:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a390:	2304      	movs	r3, #4
    a392:	69fa      	ldr	r2, [r7, #28]
    a394:	4213      	tst	r3, r2
    a396:	d1fc      	bne.n	a392 <_i2c_m_sync_transfer+0x1f2>
    a398:	e7ee      	b.n	a378 <_i2c_m_sync_transfer+0x1d8>
			if (msg->len == 0) {
    a39a:	686b      	ldr	r3, [r5, #4]
    a39c:	2b00      	cmp	r3, #0
    a39e:	d112      	bne.n	a3c6 <_i2c_m_sync_transfer+0x226>
				if (msg->flags & I2C_M_STOP) {
    a3a0:	886b      	ldrh	r3, [r5, #2]
    a3a2:	b21b      	sxth	r3, r3
    a3a4:	2b00      	cmp	r3, #0
    a3a6:	db04      	blt.n	a3b2 <_i2c_m_sync_transfer+0x212>
				msg->flags &= ~I2C_M_BUSY;
    a3a8:	886b      	ldrh	r3, [r5, #2]
    a3aa:	4a41      	ldr	r2, [pc, #260]	; (a4b0 <_i2c_m_sync_transfer+0x310>)
    a3ac:	4013      	ands	r3, r2
    a3ae:	806b      	strh	r3, [r5, #2]
    a3b0:	e03d      	b.n	a42e <_i2c_m_sync_transfer+0x28e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    a3b2:	687a      	ldr	r2, [r7, #4]
    a3b4:	23c0      	movs	r3, #192	; 0xc0
    a3b6:	029b      	lsls	r3, r3, #10
    a3b8:	4313      	orrs	r3, r2
    a3ba:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a3bc:	2204      	movs	r2, #4
    a3be:	69fb      	ldr	r3, [r7, #28]
    a3c0:	421a      	tst	r2, r3
    a3c2:	d1fc      	bne.n	a3be <_i2c_m_sync_transfer+0x21e>
    a3c4:	e7f0      	b.n	a3a8 <_i2c_m_sync_transfer+0x208>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    a3c6:	68ab      	ldr	r3, [r5, #8]
    a3c8:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    a3ca:	2328      	movs	r3, #40	; 0x28
    a3cc:	54fa      	strb	r2, [r7, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a3ce:	2204      	movs	r2, #4
    a3d0:	69fb      	ldr	r3, [r7, #28]
    a3d2:	421a      	tst	r2, r3
    a3d4:	d1fc      	bne.n	a3d0 <_i2c_m_sync_transfer+0x230>
				msg->buffer++;
    a3d6:	68ab      	ldr	r3, [r5, #8]
    a3d8:	3301      	adds	r3, #1
    a3da:	60ab      	str	r3, [r5, #8]
				msg->len--;
    a3dc:	686b      	ldr	r3, [r5, #4]
    a3de:	3b01      	subs	r3, #1
    a3e0:	606b      	str	r3, [r5, #4]
    a3e2:	e024      	b.n	a42e <_i2c_m_sync_transfer+0x28e>
	} else if (flags & SB_FLAG) {
    a3e4:	079b      	lsls	r3, r3, #30
    a3e6:	d522      	bpl.n	a42e <_i2c_m_sync_transfer+0x28e>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    a3e8:	686b      	ldr	r3, [r5, #4]
    a3ea:	2b00      	cmp	r3, #0
    a3ec:	d040      	beq.n	a470 <_i2c_m_sync_transfer+0x2d0>
    a3ee:	0752      	lsls	r2, r2, #29
    a3f0:	d43e      	bmi.n	a470 <_i2c_m_sync_transfer+0x2d0>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    a3f2:	0136      	lsls	r6, r6, #4
    a3f4:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
    a3f6:	3b01      	subs	r3, #1
    a3f8:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	d000      	beq.n	a400 <_i2c_m_sync_transfer+0x260>
    a3fe:	e11f      	b.n	a640 <_i2c_m_sync_transfer+0x4a0>
    a400:	2e00      	cmp	r6, #0
    a402:	d100      	bne.n	a406 <_i2c_m_sync_transfer+0x266>
    a404:	e122      	b.n	a64c <_i2c_m_sync_transfer+0x4ac>
				if (msg->flags & I2C_M_STOP) {
    a406:	886b      	ldrh	r3, [r5, #2]
    a408:	b21b      	sxth	r3, r3
    a40a:	2b00      	cmp	r3, #0
    a40c:	db1d      	blt.n	a44a <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
    a40e:	886b      	ldrh	r3, [r5, #2]
    a410:	4a27      	ldr	r2, [pc, #156]	; (a4b0 <_i2c_m_sync_transfer+0x310>)
    a412:	4013      	ands	r3, r2
    a414:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    a416:	68a9      	ldr	r1, [r5, #8]
    a418:	1c4b      	adds	r3, r1, #1
    a41a:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a41c:	2204      	movs	r2, #4
    a41e:	69fb      	ldr	r3, [r7, #28]
    a420:	421a      	tst	r2, r3
    a422:	d1fc      	bne.n	a41e <_i2c_m_sync_transfer+0x27e>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    a424:	2328      	movs	r3, #40	; 0x28
    a426:	5cfb      	ldrb	r3, [r7, r3]
    a428:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    a42a:	2302      	movs	r3, #2
    a42c:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    a42e:	2600      	movs	r6, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    a430:	2380      	movs	r3, #128	; 0x80
    a432:	005b      	lsls	r3, r3, #1
    a434:	469a      	mov	sl, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    a436:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a438:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
    a43a:	3bff      	subs	r3, #255	; 0xff
    a43c:	469c      	mov	ip, r3
	} else if (flags & SB_FLAG) {
    a43e:	3301      	adds	r3, #1
    a440:	4699      	mov	r9, r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    a442:	3326      	adds	r3, #38	; 0x26
    a444:	469b      	mov	fp, r3
    a446:	9601      	str	r6, [sp, #4]
    a448:	e0c2      	b.n	a5d0 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    a44a:	687b      	ldr	r3, [r7, #4]
    a44c:	4a18      	ldr	r2, [pc, #96]	; (a4b0 <_i2c_m_sync_transfer+0x310>)
    a44e:	4013      	ands	r3, r2
    a450:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a452:	3206      	adds	r2, #6
    a454:	32ff      	adds	r2, #255	; 0xff
    a456:	69fb      	ldr	r3, [r7, #28]
    a458:	421a      	tst	r2, r3
    a45a:	d1fc      	bne.n	a456 <_i2c_m_sync_transfer+0x2b6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    a45c:	687a      	ldr	r2, [r7, #4]
    a45e:	23c0      	movs	r3, #192	; 0xc0
    a460:	029b      	lsls	r3, r3, #10
    a462:	4313      	orrs	r3, r2
    a464:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a466:	2204      	movs	r2, #4
    a468:	69fb      	ldr	r3, [r7, #28]
    a46a:	421a      	tst	r2, r3
    a46c:	d1fc      	bne.n	a468 <_i2c_m_sync_transfer+0x2c8>
    a46e:	e7ce      	b.n	a40e <_i2c_m_sync_transfer+0x26e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    a470:	2302      	movs	r3, #2
    a472:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
    a474:	2002      	movs	r0, #2
    a476:	4240      	negs	r0, r0
    a478:	e726      	b.n	a2c8 <_i2c_m_sync_transfer+0x128>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    a47a:	6862      	ldr	r2, [r4, #4]
    a47c:	23c0      	movs	r3, #192	; 0xc0
    a47e:	029b      	lsls	r3, r3, #10
    a480:	4313      	orrs	r3, r2
    a482:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a484:	2204      	movs	r2, #4
    a486:	69e3      	ldr	r3, [r4, #28]
    a488:	421a      	tst	r2, r3
    a48a:	d1fc      	bne.n	a486 <_i2c_m_sync_transfer+0x2e6>
    a48c:	e0b5      	b.n	a5fa <_i2c_m_sync_transfer+0x45a>
    a48e:	46c0      	nop			; (mov r8, r8)
    a490:	0000ea18 	.word	0x0000ea18
    a494:	0000959d 	.word	0x0000959d
    a498:	000005f1 	.word	0x000005f1
    a49c:	000005f2 	.word	0x000005f2
    a4a0:	000005c5 	.word	0x000005c5
    a4a4:	fffbffff 	.word	0xfffbffff
    a4a8:	000007fe 	.word	0x000007fe
    a4ac:	0000ffff 	.word	0x0000ffff
    a4b0:	fffffeff 	.word	0xfffffeff
    a4b4:	fffffbff 	.word	0xfffffbff
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    a4b8:	4202      	tst	r2, r0
    a4ba:	d11b      	bne.n	a4f4 <_i2c_m_sync_transfer+0x354>
			if (msg->flags & I2C_M_TEN) {
    a4bc:	886b      	ldrh	r3, [r5, #2]
    a4be:	055b      	lsls	r3, r3, #21
    a4c0:	d535      	bpl.n	a52e <_i2c_m_sync_transfer+0x38e>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    a4c2:	882b      	ldrh	r3, [r5, #0]
    a4c4:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    a4c6:	2006      	movs	r0, #6
    a4c8:	4018      	ands	r0, r3
    a4ca:	69e3      	ldr	r3, [r4, #28]
    a4cc:	421a      	tst	r2, r3
    a4ce:	d1fc      	bne.n	a4ca <_i2c_m_sync_transfer+0x32a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    a4d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a4d2:	2680      	movs	r6, #128	; 0x80
    a4d4:	01f6      	lsls	r6, r6, #7
    a4d6:	4033      	ands	r3, r6
				hri_sercomi2cm_write_ADDR_reg(hw,
    a4d8:	26f1      	movs	r6, #241	; 0xf1
    a4da:	4333      	orrs	r3, r6
    a4dc:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    a4de:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a4e0:	69e3      	ldr	r3, [r4, #28]
    a4e2:	421a      	tst	r2, r3
    a4e4:	d1fc      	bne.n	a4e0 <_i2c_m_sync_transfer+0x340>
				msg->flags &= ~I2C_M_TEN;
    a4e6:	886b      	ldrh	r3, [r5, #2]
    a4e8:	4878      	ldr	r0, [pc, #480]	; (a6cc <_i2c_m_sync_transfer+0x52c>)
    a4ea:	4003      	ands	r3, r0
    a4ec:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    a4ee:	2300      	movs	r3, #0
    a4f0:	9301      	str	r3, [sp, #4]
    a4f2:	e06d      	b.n	a5d0 <_i2c_m_sync_transfer+0x430>
				if (msg->len > 0) {
    a4f4:	686b      	ldr	r3, [r5, #4]
    a4f6:	2b00      	cmp	r3, #0
    a4f8:	dd04      	ble.n	a504 <_i2c_m_sync_transfer+0x364>
					msg->flags |= I2C_M_FAIL;
    a4fa:	886b      	ldrh	r3, [r5, #2]
    a4fc:	2080      	movs	r0, #128	; 0x80
    a4fe:	0140      	lsls	r0, r0, #5
    a500:	4303      	orrs	r3, r0
    a502:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    a504:	886b      	ldrh	r3, [r5, #2]
    a506:	b21b      	sxth	r3, r3
    a508:	2b00      	cmp	r3, #0
    a50a:	db07      	blt.n	a51c <_i2c_m_sync_transfer+0x37c>
				msg->flags &= ~I2C_M_BUSY;
    a50c:	886b      	ldrh	r3, [r5, #2]
    a50e:	4870      	ldr	r0, [pc, #448]	; (a6d0 <_i2c_m_sync_transfer+0x530>)
    a510:	4003      	ands	r3, r0
    a512:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    a514:	2302      	movs	r3, #2
    a516:	425b      	negs	r3, r3
    a518:	9301      	str	r3, [sp, #4]
    a51a:	e059      	b.n	a5d0 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    a51c:	6860      	ldr	r0, [r4, #4]
    a51e:	23c0      	movs	r3, #192	; 0xc0
    a520:	029b      	lsls	r3, r3, #10
    a522:	4303      	orrs	r3, r0
    a524:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a526:	69e3      	ldr	r3, [r4, #28]
    a528:	421a      	tst	r2, r3
    a52a:	d1fc      	bne.n	a526 <_i2c_m_sync_transfer+0x386>
    a52c:	e7ee      	b.n	a50c <_i2c_m_sync_transfer+0x36c>
			if (msg->len == 0) {
    a52e:	686b      	ldr	r3, [r5, #4]
    a530:	2b00      	cmp	r3, #0
    a532:	d113      	bne.n	a55c <_i2c_m_sync_transfer+0x3bc>
				if (msg->flags & I2C_M_STOP) {
    a534:	886b      	ldrh	r3, [r5, #2]
    a536:	b21b      	sxth	r3, r3
    a538:	2b00      	cmp	r3, #0
    a53a:	db06      	blt.n	a54a <_i2c_m_sync_transfer+0x3aa>
				msg->flags &= ~I2C_M_BUSY;
    a53c:	886b      	ldrh	r3, [r5, #2]
    a53e:	4864      	ldr	r0, [pc, #400]	; (a6d0 <_i2c_m_sync_transfer+0x530>)
    a540:	4003      	ands	r3, r0
    a542:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    a544:	2300      	movs	r3, #0
    a546:	9301      	str	r3, [sp, #4]
    a548:	e042      	b.n	a5d0 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    a54a:	6860      	ldr	r0, [r4, #4]
    a54c:	23c0      	movs	r3, #192	; 0xc0
    a54e:	029b      	lsls	r3, r3, #10
    a550:	4303      	orrs	r3, r0
    a552:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a554:	69e3      	ldr	r3, [r4, #28]
    a556:	421a      	tst	r2, r3
    a558:	d1fc      	bne.n	a554 <_i2c_m_sync_transfer+0x3b4>
    a55a:	e7ef      	b.n	a53c <_i2c_m_sync_transfer+0x39c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    a55c:	68ab      	ldr	r3, [r5, #8]
    a55e:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    a560:	4658      	mov	r0, fp
    a562:	5423      	strb	r3, [r4, r0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a564:	69e3      	ldr	r3, [r4, #28]
    a566:	421a      	tst	r2, r3
    a568:	d1fc      	bne.n	a564 <_i2c_m_sync_transfer+0x3c4>
				msg->buffer++;
    a56a:	68ab      	ldr	r3, [r5, #8]
    a56c:	3301      	adds	r3, #1
    a56e:	60ab      	str	r3, [r5, #8]
				msg->len--;
    a570:	686b      	ldr	r3, [r5, #4]
    a572:	3b01      	subs	r3, #1
    a574:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    a576:	2300      	movs	r3, #0
    a578:	9301      	str	r3, [sp, #4]
    a57a:	e029      	b.n	a5d0 <_i2c_m_sync_transfer+0x430>
	return I2C_OK;
    a57c:	2600      	movs	r6, #0
    a57e:	9601      	str	r6, [sp, #4]
	} else if (flags & SB_FLAG) {
    a580:	464e      	mov	r6, r9
    a582:	421e      	tst	r6, r3
    a584:	d024      	beq.n	a5d0 <_i2c_m_sync_transfer+0x430>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    a586:	686b      	ldr	r3, [r5, #4]
    a588:	2b00      	cmp	r3, #0
    a58a:	d04d      	beq.n	a628 <_i2c_m_sync_transfer+0x488>
    a58c:	4202      	tst	r2, r0
    a58e:	d14b      	bne.n	a628 <_i2c_m_sync_transfer+0x488>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    a590:	0eff      	lsrs	r7, r7, #27
    a592:	4660      	mov	r0, ip
    a594:	4007      	ands	r7, r0
			msg->len--;
    a596:	3b01      	subs	r3, #1
    a598:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    a59a:	2b00      	cmp	r3, #0
    a59c:	d000      	beq.n	a5a0 <_i2c_m_sync_transfer+0x400>
    a59e:	e082      	b.n	a6a6 <_i2c_m_sync_transfer+0x506>
    a5a0:	2f00      	cmp	r7, #0
    a5a2:	d100      	bne.n	a5a6 <_i2c_m_sync_transfer+0x406>
    a5a4:	e085      	b.n	a6b2 <_i2c_m_sync_transfer+0x512>
				if (msg->flags & I2C_M_STOP) {
    a5a6:	886b      	ldrh	r3, [r5, #2]
    a5a8:	b21b      	sxth	r3, r3
    a5aa:	2b00      	cmp	r3, #0
    a5ac:	db2c      	blt.n	a608 <_i2c_m_sync_transfer+0x468>
				msg->flags &= ~I2C_M_BUSY;
    a5ae:	886b      	ldrh	r3, [r5, #2]
    a5b0:	4847      	ldr	r0, [pc, #284]	; (a6d0 <_i2c_m_sync_transfer+0x530>)
    a5b2:	4003      	ands	r3, r0
    a5b4:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    a5b6:	68a8      	ldr	r0, [r5, #8]
    a5b8:	1c43      	adds	r3, r0, #1
    a5ba:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a5bc:	69e3      	ldr	r3, [r4, #28]
    a5be:	421a      	tst	r2, r3
    a5c0:	d1fc      	bne.n	a5bc <_i2c_m_sync_transfer+0x41c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    a5c2:	465b      	mov	r3, fp
    a5c4:	5ce3      	ldrb	r3, [r4, r3]
    a5c6:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    a5c8:	464b      	mov	r3, r9
    a5ca:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    a5cc:	2300      	movs	r3, #0
    a5ce:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    a5d0:	886b      	ldrh	r3, [r5, #2]
    a5d2:	4650      	mov	r0, sl
    a5d4:	4203      	tst	r3, r0
    a5d6:	d02d      	beq.n	a634 <_i2c_m_sync_transfer+0x494>
	void *   hw      = i2c_dev->hw;
    a5d8:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    a5da:	7e33      	ldrb	r3, [r6, #24]
    a5dc:	b2db      	uxtb	r3, r3
    a5de:	483d      	ldr	r0, [pc, #244]	; (a6d4 <_i2c_m_sync_transfer+0x534>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    a5e0:	4219      	tst	r1, r3
    a5e2:	d141      	bne.n	a668 <_i2c_m_sync_transfer+0x4c8>
    a5e4:	7e33      	ldrb	r3, [r6, #24]
    a5e6:	b2db      	uxtb	r3, r3
    a5e8:	3801      	subs	r0, #1
		if (timeout-- == 0) {
    a5ea:	2800      	cmp	r0, #0
    a5ec:	d1f8      	bne.n	a5e0 <_i2c_m_sync_transfer+0x440>
			if (msg->flags & I2C_M_STOP) {
    a5ee:	4643      	mov	r3, r8
    a5f0:	885b      	ldrh	r3, [r3, #2]
    a5f2:	b21b      	sxth	r3, r3
    a5f4:	2b00      	cmp	r3, #0
    a5f6:	da00      	bge.n	a5fa <_i2c_m_sync_transfer+0x45a>
    a5f8:	e73f      	b.n	a47a <_i2c_m_sync_transfer+0x2da>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    a5fa:	886b      	ldrh	r3, [r5, #2]
    a5fc:	4a34      	ldr	r2, [pc, #208]	; (a6d0 <_i2c_m_sync_transfer+0x530>)
    a5fe:	4013      	ands	r3, r2
    a600:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
    a602:	2005      	movs	r0, #5
    a604:	4240      	negs	r0, r0
			return ret;
    a606:	e663      	b.n	a2d0 <_i2c_m_sync_transfer+0x130>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    a608:	6863      	ldr	r3, [r4, #4]
    a60a:	4831      	ldr	r0, [pc, #196]	; (a6d0 <_i2c_m_sync_transfer+0x530>)
    a60c:	4003      	ands	r3, r0
    a60e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a610:	69e3      	ldr	r3, [r4, #28]
    a612:	421a      	tst	r2, r3
    a614:	d1fc      	bne.n	a610 <_i2c_m_sync_transfer+0x470>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    a616:	6860      	ldr	r0, [r4, #4]
    a618:	23c0      	movs	r3, #192	; 0xc0
    a61a:	029b      	lsls	r3, r3, #10
    a61c:	4303      	orrs	r3, r0
    a61e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a620:	69e3      	ldr	r3, [r4, #28]
    a622:	421a      	tst	r2, r3
    a624:	d1fc      	bne.n	a620 <_i2c_m_sync_transfer+0x480>
    a626:	e7c2      	b.n	a5ae <_i2c_m_sync_transfer+0x40e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    a628:	464b      	mov	r3, r9
    a62a:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    a62c:	2302      	movs	r3, #2
    a62e:	425b      	negs	r3, r3
    a630:	9301      	str	r3, [sp, #4]
    a632:	e7cd      	b.n	a5d0 <_i2c_m_sync_transfer+0x430>
    a634:	9e01      	ldr	r6, [sp, #4]
    a636:	0030      	movs	r0, r6
    a638:	e64a      	b.n	a2d0 <_i2c_m_sync_transfer+0x130>
		return I2C_ERR_BUSY;
    a63a:	2006      	movs	r0, #6
    a63c:	4240      	negs	r0, r0
    a63e:	e647      	b.n	a2d0 <_i2c_m_sync_transfer+0x130>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    a640:	2b01      	cmp	r3, #1
    a642:	d000      	beq.n	a646 <_i2c_m_sync_transfer+0x4a6>
    a644:	e6e7      	b.n	a416 <_i2c_m_sync_transfer+0x276>
    a646:	2e00      	cmp	r6, #0
    a648:	d100      	bne.n	a64c <_i2c_m_sync_transfer+0x4ac>
    a64a:	e6e4      	b.n	a416 <_i2c_m_sync_transfer+0x276>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a64c:	687a      	ldr	r2, [r7, #4]
    a64e:	2380      	movs	r3, #128	; 0x80
    a650:	02db      	lsls	r3, r3, #11
    a652:	4313      	orrs	r3, r2
    a654:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a656:	2204      	movs	r2, #4
    a658:	69fb      	ldr	r3, [r7, #28]
    a65a:	421a      	tst	r2, r3
    a65c:	d1fc      	bne.n	a658 <_i2c_m_sync_transfer+0x4b8>
			if (msg->len == 0) {
    a65e:	686b      	ldr	r3, [r5, #4]
    a660:	2b00      	cmp	r3, #0
    a662:	d100      	bne.n	a666 <_i2c_m_sync_transfer+0x4c6>
    a664:	e6cf      	b.n	a406 <_i2c_m_sync_transfer+0x266>
    a666:	e6d6      	b.n	a416 <_i2c_m_sync_transfer+0x276>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    a668:	6827      	ldr	r7, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a66a:	69e0      	ldr	r0, [r4, #28]
    a66c:	4202      	tst	r2, r0
    a66e:	d1fc      	bne.n	a66a <_i2c_m_sync_transfer+0x4ca>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    a670:	8b60      	ldrh	r0, [r4, #26]
    a672:	b280      	uxth	r0, r0
	if (flags & MB_FLAG) {
    a674:	4666      	mov	r6, ip
    a676:	421e      	tst	r6, r3
    a678:	d100      	bne.n	a67c <_i2c_m_sync_transfer+0x4dc>
    a67a:	e77f      	b.n	a57c <_i2c_m_sync_transfer+0x3dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    a67c:	464b      	mov	r3, r9
    a67e:	4203      	tst	r3, r0
    a680:	d100      	bne.n	a684 <_i2c_m_sync_transfer+0x4e4>
    a682:	e719      	b.n	a4b8 <_i2c_m_sync_transfer+0x318>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    a684:	7626      	strb	r6, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    a686:	886b      	ldrh	r3, [r5, #2]
    a688:	2680      	movs	r6, #128	; 0x80
    a68a:	0176      	lsls	r6, r6, #5
    a68c:	4333      	orrs	r3, r6
    a68e:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    a690:	886b      	ldrh	r3, [r5, #2]
    a692:	4e0f      	ldr	r6, [pc, #60]	; (a6d0 <_i2c_m_sync_transfer+0x530>)
    a694:	4033      	ands	r3, r6
    a696:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    a698:	4663      	mov	r3, ip
    a69a:	4018      	ands	r0, r3
			return I2C_ERR_BAD_ADDRESS;
    a69c:	4246      	negs	r6, r0
    a69e:	4146      	adcs	r6, r0
    a6a0:	1f73      	subs	r3, r6, #5
    a6a2:	9301      	str	r3, [sp, #4]
    a6a4:	e794      	b.n	a5d0 <_i2c_m_sync_transfer+0x430>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    a6a6:	2b01      	cmp	r3, #1
    a6a8:	d000      	beq.n	a6ac <_i2c_m_sync_transfer+0x50c>
    a6aa:	e784      	b.n	a5b6 <_i2c_m_sync_transfer+0x416>
    a6ac:	2f00      	cmp	r7, #0
    a6ae:	d100      	bne.n	a6b2 <_i2c_m_sync_transfer+0x512>
    a6b0:	e781      	b.n	a5b6 <_i2c_m_sync_transfer+0x416>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a6b2:	6860      	ldr	r0, [r4, #4]
    a6b4:	2380      	movs	r3, #128	; 0x80
    a6b6:	02db      	lsls	r3, r3, #11
    a6b8:	4303      	orrs	r3, r0
    a6ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    a6bc:	69e3      	ldr	r3, [r4, #28]
    a6be:	421a      	tst	r2, r3
    a6c0:	d1fc      	bne.n	a6bc <_i2c_m_sync_transfer+0x51c>
			if (msg->len == 0) {
    a6c2:	686b      	ldr	r3, [r5, #4]
    a6c4:	2b00      	cmp	r3, #0
    a6c6:	d100      	bne.n	a6ca <_i2c_m_sync_transfer+0x52a>
    a6c8:	e76d      	b.n	a5a6 <_i2c_m_sync_transfer+0x406>
    a6ca:	e774      	b.n	a5b6 <_i2c_m_sync_transfer+0x416>
    a6cc:	fffffbff 	.word	0xfffffbff
    a6d0:	fffffeff 	.word	0xfffffeff
    a6d4:	0000ffff 	.word	0x0000ffff

0000a6d8 <SERCOM3_Handler>:

	return NULL;
}

void SERCOM3_Handler(void)
{
    a6d8:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom3_dev);
    a6da:	4b02      	ldr	r3, [pc, #8]	; (a6e4 <SERCOM3_Handler+0xc>)
    a6dc:	6818      	ldr	r0, [r3, #0]
    a6de:	4b02      	ldr	r3, [pc, #8]	; (a6e8 <SERCOM3_Handler+0x10>)
    a6e0:	4798      	blx	r3
}
    a6e2:	bd10      	pop	{r4, pc}
    a6e4:	200004f0 	.word	0x200004f0
    a6e8:	00009ce9 	.word	0x00009ce9

0000a6ec <SERCOM4_Handler>:

void SERCOM4_Handler(void)
{
    a6ec:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    a6ee:	4b02      	ldr	r3, [pc, #8]	; (a6f8 <SERCOM4_Handler+0xc>)
    a6f0:	6858      	ldr	r0, [r3, #4]
    a6f2:	4b02      	ldr	r3, [pc, #8]	; (a6fc <SERCOM4_Handler+0x10>)
    a6f4:	4798      	blx	r3
}
    a6f6:	bd10      	pop	{r4, pc}
    a6f8:	200004f0 	.word	0x200004f0
    a6fc:	00009ce9 	.word	0x00009ce9

0000a700 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    a700:	b570      	push	{r4, r5, r6, lr}
    a702:	0005      	movs	r5, r0
    a704:	000c      	movs	r4, r1
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    a706:	4b38      	ldr	r3, [pc, #224]	; (a7e8 <_spi_m_sync_init+0xe8>)
    a708:	4299      	cmp	r1, r3
    a70a:	d002      	beq.n	a712 <_spi_m_sync_init+0x12>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    a70c:	038b      	lsls	r3, r1, #14
		if (sercomspi_regs[i].n == n) {
    a70e:	0e1b      	lsrs	r3, r3, #24
    a710:	d00c      	beq.n	a72c <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    a712:	2d00      	cmp	r5, #0
    a714:	d054      	beq.n	a7c0 <_spi_m_sync_init+0xc0>
    a716:	1e60      	subs	r0, r4, #1
    a718:	4184      	sbcs	r4, r0
    a71a:	b2e0      	uxtb	r0, r4
    a71c:	2296      	movs	r2, #150	; 0x96
    a71e:	0112      	lsls	r2, r2, #4
    a720:	4932      	ldr	r1, [pc, #200]	; (a7ec <_spi_m_sync_init+0xec>)
    a722:	4b33      	ldr	r3, [pc, #204]	; (a7f0 <_spi_m_sync_init+0xf0>)
    a724:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    a726:	200d      	movs	r0, #13
    a728:	4240      	negs	r0, r0
    a72a:	e048      	b.n	a7be <_spi_m_sync_init+0xbe>
	ASSERT(dev && hw);
    a72c:	2800      	cmp	r0, #0
    a72e:	d150      	bne.n	a7d2 <_spi_m_sync_init+0xd2>
    a730:	2296      	movs	r2, #150	; 0x96
    a732:	0112      	lsls	r2, r2, #4
    a734:	492d      	ldr	r1, [pc, #180]	; (a7ec <_spi_m_sync_init+0xec>)
    a736:	2000      	movs	r0, #0
    a738:	4b2d      	ldr	r3, [pc, #180]	; (a7f0 <_spi_m_sync_init+0xf0>)
    a73a:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    a73c:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    a73e:	07db      	lsls	r3, r3, #31
    a740:	d418      	bmi.n	a774 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    a742:	2203      	movs	r2, #3
    a744:	69e3      	ldr	r3, [r4, #28]
    a746:	421a      	tst	r2, r3
    a748:	d1fc      	bne.n	a744 <_spi_m_sync_init+0x44>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    a74a:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    a74c:	079b      	lsls	r3, r3, #30
    a74e:	d50b      	bpl.n	a768 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    a750:	6823      	ldr	r3, [r4, #0]
    a752:	2202      	movs	r2, #2
    a754:	4393      	bics	r3, r2
    a756:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    a758:	3201      	adds	r2, #1
    a75a:	69e3      	ldr	r3, [r4, #28]
    a75c:	421a      	tst	r2, r3
    a75e:	d1fc      	bne.n	a75a <_spi_m_sync_init+0x5a>
    a760:	2202      	movs	r2, #2
    a762:	69e3      	ldr	r3, [r4, #28]
    a764:	421a      	tst	r2, r3
    a766:	d1fc      	bne.n	a762 <_spi_m_sync_init+0x62>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    a768:	230d      	movs	r3, #13
    a76a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    a76c:	2203      	movs	r2, #3
    a76e:	69e3      	ldr	r3, [r4, #28]
    a770:	421a      	tst	r2, r3
    a772:	d1fc      	bne.n	a76e <_spi_m_sync_init+0x6e>
    a774:	2201      	movs	r2, #1
    a776:	69e3      	ldr	r3, [r4, #28]
    a778:	421a      	tst	r2, r3
    a77a:	d1fc      	bne.n	a776 <_spi_m_sync_init+0x76>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    a77c:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    a77e:	0020      	movs	r0, r4
    a780:	1e43      	subs	r3, r0, #1
    a782:	4198      	sbcs	r0, r3
    a784:	b2c0      	uxtb	r0, r0
    a786:	2292      	movs	r2, #146	; 0x92
    a788:	0112      	lsls	r2, r2, #4
    a78a:	4918      	ldr	r1, [pc, #96]	; (a7ec <_spi_m_sync_init+0xec>)
    a78c:	4b18      	ldr	r3, [pc, #96]	; (a7f0 <_spi_m_sync_init+0xf0>)
    a78e:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    a790:	4b18      	ldr	r3, [pc, #96]	; (a7f4 <_spi_m_sync_init+0xf4>)
    a792:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    a794:	2203      	movs	r2, #3
    a796:	69e3      	ldr	r3, [r4, #28]
    a798:	421a      	tst	r2, r3
    a79a:	d1fc      	bne.n	a796 <_spi_m_sync_init+0x96>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    a79c:	2380      	movs	r3, #128	; 0x80
    a79e:	029b      	lsls	r3, r3, #10
    a7a0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    a7a2:	2207      	movs	r2, #7
    a7a4:	69e3      	ldr	r3, [r4, #28]
    a7a6:	421a      	tst	r2, r3
    a7a8:	d1fc      	bne.n	a7a4 <_spi_m_sync_init+0xa4>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    a7aa:	239f      	movs	r3, #159	; 0x9f
    a7ac:	7323      	strb	r3, [r4, #12]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    a7ae:	2200      	movs	r2, #0
    a7b0:	3b6f      	subs	r3, #111	; 0x6f
    a7b2:	54e2      	strb	r2, [r4, r3]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    a7b4:	3b2f      	subs	r3, #47	; 0x2f
    a7b6:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    a7b8:	4b0f      	ldr	r3, [pc, #60]	; (a7f8 <_spi_m_sync_init+0xf8>)
    a7ba:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    a7bc:	2000      	movs	r0, #0
}
    a7be:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    a7c0:	2296      	movs	r2, #150	; 0x96
    a7c2:	0112      	lsls	r2, r2, #4
    a7c4:	4909      	ldr	r1, [pc, #36]	; (a7ec <_spi_m_sync_init+0xec>)
    a7c6:	2000      	movs	r0, #0
    a7c8:	4b09      	ldr	r3, [pc, #36]	; (a7f0 <_spi_m_sync_init+0xf0>)
    a7ca:	4798      	blx	r3
		return ERR_INVALID_ARG;
    a7cc:	200d      	movs	r0, #13
    a7ce:	4240      	negs	r0, r0
    a7d0:	e7f5      	b.n	a7be <_spi_m_sync_init+0xbe>
	ASSERT(dev && hw);
    a7d2:	0008      	movs	r0, r1
    a7d4:	1e43      	subs	r3, r0, #1
    a7d6:	4198      	sbcs	r0, r3
    a7d8:	b2c0      	uxtb	r0, r0
    a7da:	2296      	movs	r2, #150	; 0x96
    a7dc:	0112      	lsls	r2, r2, #4
    a7de:	4903      	ldr	r1, [pc, #12]	; (a7ec <_spi_m_sync_init+0xec>)
    a7e0:	4b03      	ldr	r3, [pc, #12]	; (a7f0 <_spi_m_sync_init+0xf0>)
    a7e2:	4798      	blx	r3
    a7e4:	e7aa      	b.n	a73c <_spi_m_sync_init+0x3c>
    a7e6:	46c0      	nop			; (mov r8, r8)
    a7e8:	43000400 	.word	0x43000400
    a7ec:	0000ea18 	.word	0x0000ea18
    a7f0:	0000959d 	.word	0x0000959d
    a7f4:	0001000c 	.word	0x0001000c
    a7f8:	000001ff 	.word	0x000001ff

0000a7fc <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    a7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7fe:	46de      	mov	lr, fp
    a800:	4657      	mov	r7, sl
    a802:	464e      	mov	r6, r9
    a804:	4645      	mov	r5, r8
    a806:	b5e0      	push	{r5, r6, r7, lr}
    a808:	b083      	sub	sp, #12
    a80a:	4681      	mov	r9, r0
    a80c:	000e      	movs	r6, r1
	void *                 hw   = dev->prvt;
    a80e:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    a810:	680b      	ldr	r3, [r1, #0]
    a812:	4698      	mov	r8, r3
    a814:	684d      	ldr	r5, [r1, #4]
    a816:	7903      	ldrb	r3, [r0, #4]
    a818:	9301      	str	r3, [sp, #4]

	ASSERT(dev && hw);
    a81a:	2800      	cmp	r0, #0
    a81c:	d016      	beq.n	a84c <_spi_m_sync_trans+0x50>
    a81e:	0020      	movs	r0, r4
    a820:	1e43      	subs	r3, r0, #1
    a822:	4198      	sbcs	r0, r3
    a824:	b2c0      	uxtb	r0, r0
    a826:	22ac      	movs	r2, #172	; 0xac
    a828:	0112      	lsls	r2, r2, #4
    a82a:	4935      	ldr	r1, [pc, #212]	; (a900 <_spi_m_sync_trans+0x104>)
    a82c:	4b35      	ldr	r3, [pc, #212]	; (a904 <_spi_m_sync_trans+0x108>)
    a82e:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    a830:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    a832:	075b      	lsls	r3, r3, #29
    a834:	d13f      	bne.n	a8b6 <_spi_m_sync_trans+0xba>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    a836:	2303      	movs	r3, #3
    a838:	69e0      	ldr	r0, [r4, #28]
    a83a:	4018      	ands	r0, r3
    a83c:	d1fc      	bne.n	a838 <_spi_m_sync_trans+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    a83e:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    a840:	079b      	lsls	r3, r3, #30
    a842:	d53b      	bpl.n	a8bc <_spi_m_sync_trans+0xc0>
    a844:	0002      	movs	r2, r0
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    a846:	2301      	movs	r3, #1
    a848:	469c      	mov	ip, r3
    a84a:	e009      	b.n	a860 <_spi_m_sync_trans+0x64>
    a84c:	2000      	movs	r0, #0
    a84e:	e7ea      	b.n	a826 <_spi_m_sync_trans+0x2a>
		*ctrl->rxbuf++ = (uint8_t)data;
    a850:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    a852:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    a854:	b25b      	sxtb	r3, r3
    a856:	2b00      	cmp	r3, #0
    a858:	db16      	blt.n	a888 <_spi_m_sync_trans+0x8c>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    a85a:	68b3      	ldr	r3, [r6, #8]
    a85c:	4283      	cmp	r3, r0
    a85e:	d927      	bls.n	a8b0 <_spi_m_sync_trans+0xb4>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    a860:	7e23      	ldrb	r3, [r4, #24]
    a862:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    a864:	2104      	movs	r1, #4
    a866:	4219      	tst	r1, r3
    a868:	d02b      	beq.n	a8c2 <_spi_m_sync_trans+0xc6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    a86a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    a86c:	2d00      	cmp	r5, #0
    a86e:	d0f0      	beq.n	a852 <_spi_m_sync_trans+0x56>
		*ctrl->rxbuf++ = (uint8_t)data;
    a870:	702f      	strb	r7, [r5, #0]
		if (ctrl->char_size > 1) {
    a872:	9901      	ldr	r1, [sp, #4]
    a874:	2901      	cmp	r1, #1
    a876:	d9eb      	bls.n	a850 <_spi_m_sync_trans+0x54>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    a878:	0a3f      	lsrs	r7, r7, #8
    a87a:	706f      	strb	r7, [r5, #1]
    a87c:	3502      	adds	r5, #2
    a87e:	e7e8      	b.n	a852 <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
    a880:	2101      	movs	r1, #1
    a882:	468b      	mov	fp, r1
    a884:	44d8      	add	r8, fp
    a886:	e037      	b.n	a8f8 <_spi_m_sync_trans+0xfc>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    a888:	2301      	movs	r3, #1
    a88a:	425b      	negs	r3, r3
    a88c:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    a88e:	3381      	adds	r3, #129	; 0x81
    a890:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    a892:	2013      	movs	r0, #19
    a894:	4240      	negs	r0, r0
	tmp &= mask;
    a896:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    a898:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    a89a:	4213      	tst	r3, r2
    a89c:	d0fc      	beq.n	a898 <_spi_m_sync_trans+0x9c>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    a89e:	2303      	movs	r3, #3
    a8a0:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    a8a2:	b003      	add	sp, #12
    a8a4:	bc3c      	pop	{r2, r3, r4, r5}
    a8a6:	4690      	mov	r8, r2
    a8a8:	4699      	mov	r9, r3
    a8aa:	46a2      	mov	sl, r4
    a8ac:	46ab      	mov	fp, r5
    a8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    a8b0:	4293      	cmp	r3, r2
    a8b2:	d8d5      	bhi.n	a860 <_spi_m_sync_trans+0x64>
    a8b4:	e7ef      	b.n	a896 <_spi_m_sync_trans+0x9a>
		return ERR_BUSY;
    a8b6:	2004      	movs	r0, #4
    a8b8:	4240      	negs	r0, r0
    a8ba:	e7f2      	b.n	a8a2 <_spi_m_sync_trans+0xa6>
		return ERR_NOT_INITIALIZED;
    a8bc:	2014      	movs	r0, #20
    a8be:	4240      	negs	r0, r0
    a8c0:	e7ef      	b.n	a8a2 <_spi_m_sync_trans+0xa6>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    a8c2:	4290      	cmp	r0, r2
    a8c4:	d8c6      	bhi.n	a854 <_spi_m_sync_trans+0x58>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    a8c6:	4667      	mov	r7, ip
    a8c8:	421f      	tst	r7, r3
    a8ca:	d0c3      	beq.n	a854 <_spi_m_sync_trans+0x58>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    a8cc:	464f      	mov	r7, r9
    a8ce:	88ff      	ldrh	r7, [r7, #6]
    a8d0:	46ba      	mov	sl, r7
	if (ctrl->txbuf) {
    a8d2:	4647      	mov	r7, r8
    a8d4:	2f00      	cmp	r7, #0
    a8d6:	d00f      	beq.n	a8f8 <_spi_m_sync_trans+0xfc>
		data = *ctrl->txbuf++;
    a8d8:	783f      	ldrb	r7, [r7, #0]
    a8da:	46ba      	mov	sl, r7
		if (ctrl->char_size > 1) {
    a8dc:	9901      	ldr	r1, [sp, #4]
    a8de:	2901      	cmp	r1, #1
    a8e0:	d9ce      	bls.n	a880 <_spi_m_sync_trans+0x84>
			data |= (*ctrl->txbuf) << 8;
    a8e2:	4647      	mov	r7, r8
    a8e4:	787f      	ldrb	r7, [r7, #1]
    a8e6:	023f      	lsls	r7, r7, #8
    a8e8:	46bb      	mov	fp, r7
    a8ea:	4657      	mov	r7, sl
    a8ec:	4659      	mov	r1, fp
    a8ee:	430f      	orrs	r7, r1
    a8f0:	46ba      	mov	sl, r7
			ctrl->txbuf++;
    a8f2:	2102      	movs	r1, #2
    a8f4:	468b      	mov	fp, r1
    a8f6:	44d8      	add	r8, fp
	ctrl->txcnt++;
    a8f8:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    a8fa:	4657      	mov	r7, sl
    a8fc:	62a7      	str	r7, [r4, #40]	; 0x28
    a8fe:	e7a9      	b.n	a854 <_spi_m_sync_trans+0x58>
    a900:	0000ea18 	.word	0x0000ea18
    a904:	0000959d 	.word	0x0000959d

0000a908 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    a908:	b510      	push	{r4, lr}
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	if ((uint32_t)TC4 == (uint32_t)hw) {
    a90a:	4b09      	ldr	r3, [pc, #36]	; (a930 <get_tc_index+0x28>)
    a90c:	4298      	cmp	r0, r3
    a90e:	d006      	beq.n	a91e <get_tc_index+0x16>
		return 4;
	}
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    a910:	4b08      	ldr	r3, [pc, #32]	; (a934 <get_tc_index+0x2c>)
    a912:	469c      	mov	ip, r3
    a914:	4460      	add	r0, ip
    a916:	0a80      	lsrs	r0, r0, #10
		if (_tcs[i].number == index) {
    a918:	b2c0      	uxtb	r0, r0
    a91a:	2800      	cmp	r0, #0
    a91c:	d007      	beq.n	a92e <get_tc_index+0x26>
	ASSERT(false);
    a91e:	229e      	movs	r2, #158	; 0x9e
    a920:	0052      	lsls	r2, r2, #1
    a922:	4905      	ldr	r1, [pc, #20]	; (a938 <get_tc_index+0x30>)
    a924:	2000      	movs	r0, #0
    a926:	4b05      	ldr	r3, [pc, #20]	; (a93c <get_tc_index+0x34>)
    a928:	4798      	blx	r3
	return -1;
    a92a:	2001      	movs	r0, #1
    a92c:	4240      	negs	r0, r0
}
    a92e:	bd10      	pop	{r4, pc}
    a930:	43000800 	.word	0x43000800
    a934:	bdffe000 	.word	0xbdffe000
    a938:	0000ea48 	.word	0x0000ea48
    a93c:	0000959d 	.word	0x0000959d

0000a940 <_timer_init>:
{
    a940:	b570      	push	{r4, r5, r6, lr}
    a942:	0006      	movs	r6, r0
    a944:	000c      	movs	r4, r1
	int8_t i = get_tc_index(hw);
    a946:	0008      	movs	r0, r1
    a948:	4b5b      	ldr	r3, [pc, #364]	; (aab8 <_timer_init+0x178>)
    a94a:	4798      	blx	r3
    a94c:	0005      	movs	r5, r0
	device->hw = hw;
    a94e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    a950:	228d      	movs	r2, #141	; 0x8d
    a952:	495a      	ldr	r1, [pc, #360]	; (aabc <_timer_init+0x17c>)
    a954:	2001      	movs	r0, #1
    a956:	4b5a      	ldr	r3, [pc, #360]	; (aac0 <_timer_init+0x180>)
    a958:	4798      	blx	r3
	};
}

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    a95a:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    a95c:	07db      	lsls	r3, r3, #31
    a95e:	d418      	bmi.n	a992 <_timer_init+0x52>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    a960:	2203      	movs	r2, #3
    a962:	6923      	ldr	r3, [r4, #16]
    a964:	421a      	tst	r2, r3
    a966:	d1fc      	bne.n	a962 <_timer_init+0x22>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    a968:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    a96a:	079b      	lsls	r3, r3, #30
    a96c:	d50b      	bpl.n	a986 <_timer_init+0x46>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    a96e:	6823      	ldr	r3, [r4, #0]
    a970:	2202      	movs	r2, #2
    a972:	4393      	bics	r3, r2
    a974:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    a976:	3201      	adds	r2, #1
    a978:	6923      	ldr	r3, [r4, #16]
    a97a:	421a      	tst	r2, r3
    a97c:	d1fc      	bne.n	a978 <_timer_init+0x38>
    a97e:	2202      	movs	r2, #2
    a980:	6923      	ldr	r3, [r4, #16]
    a982:	421a      	tst	r2, r3
    a984:	d1fc      	bne.n	a980 <_timer_init+0x40>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    a986:	2301      	movs	r3, #1
    a988:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    a98a:	2203      	movs	r2, #3
    a98c:	6923      	ldr	r3, [r4, #16]
    a98e:	421a      	tst	r2, r3
    a990:	d1fc      	bne.n	a98c <_timer_init+0x4c>
    a992:	2201      	movs	r2, #1
    a994:	6923      	ldr	r3, [r4, #16]
    a996:	421a      	tst	r2, r3
    a998:	d1fc      	bne.n	a994 <_timer_init+0x54>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    a99a:	00ab      	lsls	r3, r5, #2
    a99c:	195b      	adds	r3, r3, r5
    a99e:	009b      	lsls	r3, r3, #2
    a9a0:	4a48      	ldr	r2, [pc, #288]	; (aac4 <_timer_init+0x184>)
    a9a2:	18d3      	adds	r3, r2, r3
    a9a4:	6859      	ldr	r1, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    a9a6:	6021      	str	r1, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    a9a8:	2203      	movs	r2, #3
    a9aa:	6923      	ldr	r3, [r4, #16]
    a9ac:	421a      	tst	r2, r3
    a9ae:	d1fc      	bne.n	a9aa <_timer_init+0x6a>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    a9b0:	00ab      	lsls	r3, r5, #2
    a9b2:	195b      	adds	r3, r3, r5
    a9b4:	009b      	lsls	r3, r3, #2
    a9b6:	4a43      	ldr	r2, [pc, #268]	; (aac4 <_timer_init+0x184>)
    a9b8:	18d3      	adds	r3, r2, r3
    a9ba:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    a9bc:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    a9be:	891b      	ldrh	r3, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    a9c0:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    a9c2:	2301      	movs	r3, #1
    a9c4:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    a9c6:	330b      	adds	r3, #11
    a9c8:	400b      	ands	r3, r1
    a9ca:	2b08      	cmp	r3, #8
    a9cc:	d03f      	beq.n	aa4e <_timer_init+0x10e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    a9ce:	2b00      	cmp	r3, #0
    a9d0:	d14f      	bne.n	aa72 <_timer_init+0x132>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    a9d2:	00ab      	lsls	r3, r5, #2
    a9d4:	195b      	adds	r3, r3, r5
    a9d6:	009b      	lsls	r3, r3, #2
    a9d8:	4a3a      	ldr	r2, [pc, #232]	; (aac4 <_timer_init+0x184>)
    a9da:	18d3      	adds	r3, r2, r3
    a9dc:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    a9de:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    a9e0:	22c0      	movs	r2, #192	; 0xc0
    a9e2:	6923      	ldr	r3, [r4, #16]
    a9e4:	421a      	tst	r2, r3
    a9e6:	d1fc      	bne.n	a9e2 <_timer_init+0xa2>
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    a9e8:	2300      	movs	r3, #0
    a9ea:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    a9ec:	22c0      	movs	r2, #192	; 0xc0
    a9ee:	6923      	ldr	r3, [r4, #16]
    a9f0:	421a      	tst	r2, r3
    a9f2:	d1fc      	bne.n	a9ee <_timer_init+0xae>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    a9f4:	2301      	movs	r3, #1
    a9f6:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    a9f8:	4b33      	ldr	r3, [pc, #204]	; (aac8 <_timer_init+0x188>)
    a9fa:	429c      	cmp	r4, r3
    a9fc:	d058      	beq.n	aab0 <_timer_init+0x170>
	NVIC_DisableIRQ(_tcs[i].irq);
    a9fe:	00ab      	lsls	r3, r5, #2
    aa00:	195b      	adds	r3, r3, r5
    aa02:	009b      	lsls	r3, r3, #2
    aa04:	4a2f      	ldr	r2, [pc, #188]	; (aac4 <_timer_init+0x184>)
    aa06:	18d3      	adds	r3, r2, r3
    aa08:	785b      	ldrb	r3, [r3, #1]
    aa0a:	b25b      	sxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
    aa0c:	2b00      	cmp	r3, #0
    aa0e:	db1c      	blt.n	aa4a <_timer_init+0x10a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aa10:	221f      	movs	r2, #31
    aa12:	401a      	ands	r2, r3
    aa14:	2301      	movs	r3, #1
    aa16:	4093      	lsls	r3, r2
    aa18:	2280      	movs	r2, #128	; 0x80
    aa1a:	492c      	ldr	r1, [pc, #176]	; (aacc <_timer_init+0x18c>)
    aa1c:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    aa1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    aa22:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    aa26:	00ab      	lsls	r3, r5, #2
    aa28:	195d      	adds	r5, r3, r5
    aa2a:	00ad      	lsls	r5, r5, #2
    aa2c:	4b25      	ldr	r3, [pc, #148]	; (aac4 <_timer_init+0x184>)
    aa2e:	195d      	adds	r5, r3, r5
    aa30:	2301      	movs	r3, #1
    aa32:	56eb      	ldrsb	r3, [r5, r3]
  if ((int32_t)(IRQn) >= 0)
    aa34:	2b00      	cmp	r3, #0
    aa36:	db08      	blt.n	aa4a <_timer_init+0x10a>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aa38:	3a61      	subs	r2, #97	; 0x61
    aa3a:	401a      	ands	r2, r3
    aa3c:	2301      	movs	r3, #1
    aa3e:	4093      	lsls	r3, r2
    aa40:	000a      	movs	r2, r1
    aa42:	21c0      	movs	r1, #192	; 0xc0
    aa44:	0049      	lsls	r1, r1, #1
    aa46:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aa48:	6013      	str	r3, [r2, #0]
}
    aa4a:	2000      	movs	r0, #0
    aa4c:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    aa4e:	00ab      	lsls	r3, r5, #2
    aa50:	195b      	adds	r3, r3, r5
    aa52:	009b      	lsls	r3, r3, #2
    aa54:	4a1b      	ldr	r2, [pc, #108]	; (aac4 <_timer_init+0x184>)
    aa56:	18d3      	adds	r3, r2, r3
    aa58:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    aa5a:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    aa5c:	22c0      	movs	r2, #192	; 0xc0
    aa5e:	6923      	ldr	r3, [r4, #16]
    aa60:	421a      	tst	r2, r3
    aa62:	d1fc      	bne.n	aa5e <_timer_init+0x11e>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    aa64:	2300      	movs	r3, #0
    aa66:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    aa68:	22c0      	movs	r2, #192	; 0xc0
    aa6a:	6923      	ldr	r3, [r4, #16]
    aa6c:	421a      	tst	r2, r3
    aa6e:	d1fc      	bne.n	aa6a <_timer_init+0x12a>
    aa70:	e7c0      	b.n	a9f4 <_timer_init+0xb4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    aa72:	2b04      	cmp	r3, #4
    aa74:	d1be      	bne.n	a9f4 <_timer_init+0xb4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    aa76:	00ab      	lsls	r3, r5, #2
    aa78:	195b      	adds	r3, r3, r5
    aa7a:	009b      	lsls	r3, r3, #2
    aa7c:	4a11      	ldr	r2, [pc, #68]	; (aac4 <_timer_init+0x184>)
    aa7e:	18d3      	adds	r3, r2, r3
    aa80:	7b1b      	ldrb	r3, [r3, #12]
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    aa82:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    aa84:	22c0      	movs	r2, #192	; 0xc0
    aa86:	6923      	ldr	r3, [r4, #16]
    aa88:	421a      	tst	r2, r3
    aa8a:	d1fc      	bne.n	aa86 <_timer_init+0x146>
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    aa8c:	2300      	movs	r3, #0
    aa8e:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    aa90:	22c0      	movs	r2, #192	; 0xc0
    aa92:	6923      	ldr	r3, [r4, #16]
    aa94:	421a      	tst	r2, r3
    aa96:	d1fc      	bne.n	aa92 <_timer_init+0x152>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    aa98:	00ab      	lsls	r3, r5, #2
    aa9a:	195b      	adds	r3, r3, r5
    aa9c:	009b      	lsls	r3, r3, #2
    aa9e:	4a09      	ldr	r2, [pc, #36]	; (aac4 <_timer_init+0x184>)
    aaa0:	18d3      	adds	r3, r2, r3
    aaa2:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    aaa4:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    aaa6:	2220      	movs	r2, #32
    aaa8:	6923      	ldr	r3, [r4, #16]
    aaaa:	421a      	tst	r2, r3
    aaac:	d1fc      	bne.n	aaa8 <_timer_init+0x168>
    aaae:	e7a1      	b.n	a9f4 <_timer_init+0xb4>
		_tc0_dev = (struct _timer_device *)dev;
    aab0:	4b07      	ldr	r3, [pc, #28]	; (aad0 <_timer_init+0x190>)
    aab2:	601e      	str	r6, [r3, #0]
    aab4:	e7a3      	b.n	a9fe <_timer_init+0xbe>
    aab6:	46c0      	nop			; (mov r8, r8)
    aab8:	0000a909 	.word	0x0000a909
    aabc:	0000ea48 	.word	0x0000ea48
    aac0:	0000959d 	.word	0x0000959d
    aac4:	0000ea34 	.word	0x0000ea34
    aac8:	42002000 	.word	0x42002000
    aacc:	e000e100 	.word	0xe000e100
    aad0:	200004f8 	.word	0x200004f8

0000aad4 <_timer_start>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    aad4:	68c2      	ldr	r2, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    aad6:	6813      	ldr	r3, [r2, #0]
    aad8:	2102      	movs	r1, #2
    aada:	430b      	orrs	r3, r1
    aadc:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    aade:	3101      	adds	r1, #1
    aae0:	6913      	ldr	r3, [r2, #16]
    aae2:	4219      	tst	r1, r3
    aae4:	d1fc      	bne.n	aae0 <_timer_start+0xc>
}
    aae6:	4770      	bx	lr

0000aae8 <_timer_is_started>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    aae8:	68c2      	ldr	r2, [r0, #12]
    aaea:	2103      	movs	r1, #3
    aaec:	6913      	ldr	r3, [r2, #16]
    aaee:	4219      	tst	r1, r3
    aaf0:	d1fc      	bne.n	aaec <_timer_is_started+0x4>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    aaf2:	6810      	ldr	r0, [r2, #0]
	return (bool)tmp;
    aaf4:	0780      	lsls	r0, r0, #30
    aaf6:	0fc0      	lsrs	r0, r0, #31
}
    aaf8:	4770      	bx	lr

0000aafa <_tc_get_timer>:
}
    aafa:	2000      	movs	r0, #0
    aafc:	4770      	bx	lr
	...

0000ab00 <_timer_set_irq>:
{
    ab00:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    ab02:	68c0      	ldr	r0, [r0, #12]
    ab04:	4b08      	ldr	r3, [pc, #32]	; (ab28 <_timer_set_irq+0x28>)
    ab06:	4798      	blx	r3
    ab08:	0004      	movs	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    ab0a:	2210      	movs	r2, #16
    ab0c:	32ff      	adds	r2, #255	; 0xff
    ab0e:	4907      	ldr	r1, [pc, #28]	; (ab2c <_timer_set_irq+0x2c>)
    ab10:	2001      	movs	r0, #1
    ab12:	4b07      	ldr	r3, [pc, #28]	; (ab30 <_timer_set_irq+0x30>)
    ab14:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    ab16:	00a0      	lsls	r0, r4, #2
    ab18:	1900      	adds	r0, r0, r4
    ab1a:	0080      	lsls	r0, r0, #2
    ab1c:	4b05      	ldr	r3, [pc, #20]	; (ab34 <_timer_set_irq+0x34>)
    ab1e:	1818      	adds	r0, r3, r0
    ab20:	7840      	ldrb	r0, [r0, #1]
    ab22:	4b05      	ldr	r3, [pc, #20]	; (ab38 <_timer_set_irq+0x38>)
    ab24:	4798      	blx	r3
}
    ab26:	bd10      	pop	{r4, pc}
    ab28:	0000a909 	.word	0x0000a909
    ab2c:	0000ea48 	.word	0x0000ea48
    ab30:	0000959d 	.word	0x0000959d
    ab34:	0000ea34 	.word	0x0000ea34
    ab38:	000099c5 	.word	0x000099c5

0000ab3c <TC0_Handler>:
{
    ab3c:	b510      	push	{r4, lr}
	tc_interrupt_handler(_tc0_dev);
    ab3e:	4b06      	ldr	r3, [pc, #24]	; (ab58 <TC0_Handler+0x1c>)
    ab40:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    ab42:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    ab44:	7a9a      	ldrb	r2, [r3, #10]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    ab46:	07d2      	lsls	r2, r2, #31
    ab48:	d400      	bmi.n	ab4c <TC0_Handler+0x10>
}
    ab4a:	bd10      	pop	{r4, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    ab4c:	2201      	movs	r2, #1
    ab4e:	729a      	strb	r2, [r3, #10]
		device->timer_cb.period_expired(device);
    ab50:	6803      	ldr	r3, [r0, #0]
    ab52:	4798      	blx	r3
}
    ab54:	e7f9      	b.n	ab4a <TC0_Handler+0xe>
    ab56:	46c0      	nop			; (mov r8, r8)
    ab58:	200004f8 	.word	0x200004f8

0000ab5c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    ab5c:	2000      	movs	r0, #0
    ab5e:	4770      	bx	lr

0000ab60 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    ab60:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    ab62:	7c83      	ldrb	r3, [r0, #18]
    ab64:	220f      	movs	r2, #15
    ab66:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    ab68:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
    ab6a:	3a08      	subs	r2, #8
    ab6c:	400a      	ands	r2, r1
    ab6e:	2a01      	cmp	r2, #1
    ab70:	d00b      	beq.n	ab8a <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    ab72:	015a      	lsls	r2, r3, #5
    ab74:	491a      	ldr	r1, [pc, #104]	; (abe0 <_usb_d_dev_handle_setup+0x80>)
    ab76:	468c      	mov	ip, r1
    ab78:	4462      	add	r2, ip
    ab7a:	2110      	movs	r1, #16
    ab7c:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    ab7e:	015b      	lsls	r3, r3, #5
    ab80:	4a18      	ldr	r2, [pc, #96]	; (abe4 <_usb_d_dev_handle_setup+0x84>)
    ab82:	4694      	mov	ip, r2
    ab84:	4463      	add	r3, ip
    ab86:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    ab88:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
    ab8a:	064a      	lsls	r2, r1, #25
    ab8c:	d50f      	bpl.n	abae <_usb_d_dev_handle_setup+0x4e>
		ept->flags.bits.is_busy = 0;
    ab8e:	7cc2      	ldrb	r2, [r0, #19]
    ab90:	2140      	movs	r1, #64	; 0x40
    ab92:	438a      	bics	r2, r1
    ab94:	74c2      	strb	r2, [r0, #19]
    ab96:	015a      	lsls	r2, r3, #5
    ab98:	2482      	movs	r4, #130	; 0x82
    ab9a:	05e4      	lsls	r4, r4, #23
    ab9c:	46a4      	mov	ip, r4
    ab9e:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    aba0:	2580      	movs	r5, #128	; 0x80
    aba2:	2482      	movs	r4, #130	; 0x82
    aba4:	0064      	lsls	r4, r4, #1
    aba6:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    aba8:	2406      	movs	r4, #6
    abaa:	34ff      	adds	r4, #255	; 0xff
    abac:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
    abae:	7cc2      	ldrb	r2, [r0, #19]
    abb0:	2108      	movs	r1, #8
    abb2:	438a      	bics	r2, r1
    abb4:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    abb6:	490c      	ldr	r1, [pc, #48]	; (abe8 <_usb_d_dev_handle_setup+0x88>)
    abb8:	015a      	lsls	r2, r3, #5
    abba:	188c      	adds	r4, r1, r2
    abbc:	2500      	movs	r5, #0
    abbe:	72a5      	strb	r5, [r4, #10]
    abc0:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    abc2:	0013      	movs	r3, r2
    abc4:	4c06      	ldr	r4, [pc, #24]	; (abe0 <_usb_d_dev_handle_setup+0x80>)
    abc6:	46a4      	mov	ip, r4
    abc8:	4463      	add	r3, ip
    abca:	246f      	movs	r4, #111	; 0x6f
    abcc:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    abce:	4b05      	ldr	r3, [pc, #20]	; (abe4 <_usb_d_dev_handle_setup+0x84>)
    abd0:	469c      	mov	ip, r3
    abd2:	4462      	add	r2, ip
    abd4:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
    abd6:	7c80      	ldrb	r0, [r0, #18]
    abd8:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    abda:	4798      	blx	r3
    abdc:	e7d4      	b.n	ab88 <_usb_d_dev_handle_setup+0x28>
    abde:	46c0      	nop			; (mov r8, r8)
    abe0:	41000100 	.word	0x41000100
    abe4:	41000108 	.word	0x41000108
    abe8:	200004fc 	.word	0x200004fc

0000abec <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    abec:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    abee:	2220      	movs	r2, #32
    abf0:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    abf2:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
    abf4:	7c81      	ldrb	r1, [r0, #18]
    abf6:	230f      	movs	r3, #15
    abf8:	400b      	ands	r3, r1
    abfa:	015b      	lsls	r3, r3, #5
    abfc:	4905      	ldr	r1, [pc, #20]	; (ac14 <_usb_d_dev_handle_stall+0x28>)
    abfe:	468c      	mov	ip, r1
    ac00:	4463      	add	r3, ip
    ac02:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    ac04:	6882      	ldr	r2, [r0, #8]
    ac06:	7c80      	ldrb	r0, [r0, #18]
    ac08:	4b03      	ldr	r3, [pc, #12]	; (ac18 <_usb_d_dev_handle_stall+0x2c>)
    ac0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    ac0c:	2101      	movs	r1, #1
    ac0e:	4798      	blx	r3
}
    ac10:	bd10      	pop	{r4, pc}
    ac12:	46c0      	nop			; (mov r8, r8)
    ac14:	41000108 	.word	0x41000108
    ac18:	200004fc 	.word	0x200004fc

0000ac1c <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    ac1c:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    ac1e:	7c83      	ldrb	r3, [r0, #18]
    ac20:	2bff      	cmp	r3, #255	; 0xff
    ac22:	d002      	beq.n	ac2a <_usb_d_dev_trans_done+0xe>
    ac24:	7cc2      	ldrb	r2, [r0, #19]
    ac26:	0652      	lsls	r2, r2, #25
    ac28:	d400      	bmi.n	ac2c <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
    ac2a:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
    ac2c:	7cc2      	ldrb	r2, [r0, #19]
    ac2e:	2440      	movs	r4, #64	; 0x40
    ac30:	43a2      	bics	r2, r4
    ac32:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    ac34:	6882      	ldr	r2, [r0, #8]
    ac36:	4802      	ldr	r0, [pc, #8]	; (ac40 <_usb_d_dev_trans_done+0x24>)
    ac38:	6f04      	ldr	r4, [r0, #112]	; 0x70
    ac3a:	0018      	movs	r0, r3
    ac3c:	47a0      	blx	r4
    ac3e:	e7f4      	b.n	ac2a <_usb_d_dev_trans_done+0xe>
    ac40:	200004fc 	.word	0x200004fc

0000ac44 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    ac44:	b530      	push	{r4, r5, lr}
    ac46:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ac48:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    ac4a:	ac01      	add	r4, sp, #4
    ac4c:	2525      	movs	r5, #37	; 0x25
    ac4e:	7025      	strb	r5, [r4, #0]
    ac50:	3525      	adds	r5, #37	; 0x25
    ac52:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    ac54:	2bff      	cmp	r3, #255	; 0xff
    ac56:	d01b      	beq.n	ac90 <_usb_d_dev_trans_stop+0x4c>
    ac58:	7cc4      	ldrb	r4, [r0, #19]
    ac5a:	0664      	lsls	r4, r4, #25
    ac5c:	d518      	bpl.n	ac90 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ac5e:	240f      	movs	r4, #15
    ac60:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
    ac62:	2900      	cmp	r1, #0
    ac64:	d016      	beq.n	ac94 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    ac66:	015c      	lsls	r4, r3, #5
    ac68:	4d0e      	ldr	r5, [pc, #56]	; (aca4 <_usb_d_dev_trans_stop+0x60>)
    ac6a:	46ac      	mov	ip, r5
    ac6c:	4464      	add	r4, ip
    ac6e:	2580      	movs	r5, #128	; 0x80
    ac70:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    ac72:	ac01      	add	r4, sp, #4
    ac74:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    ac76:	0159      	lsls	r1, r3, #5
    ac78:	4d0a      	ldr	r5, [pc, #40]	; (aca4 <_usb_d_dev_trans_stop+0x60>)
    ac7a:	46ac      	mov	ip, r5
    ac7c:	4461      	add	r1, ip
    ac7e:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    ac80:	015b      	lsls	r3, r3, #5
    ac82:	4909      	ldr	r1, [pc, #36]	; (aca8 <_usb_d_dev_trans_stop+0x64>)
    ac84:	468c      	mov	ip, r1
    ac86:	4463      	add	r3, ip
    ac88:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    ac8a:	0011      	movs	r1, r2
    ac8c:	4b07      	ldr	r3, [pc, #28]	; (acac <_usb_d_dev_trans_stop+0x68>)
    ac8e:	4798      	blx	r3
}
    ac90:	b003      	add	sp, #12
    ac92:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    ac94:	015c      	lsls	r4, r3, #5
    ac96:	4d03      	ldr	r5, [pc, #12]	; (aca4 <_usb_d_dev_trans_stop+0x60>)
    ac98:	46ac      	mov	ip, r5
    ac9a:	4464      	add	r4, ip
    ac9c:	2540      	movs	r5, #64	; 0x40
    ac9e:	7165      	strb	r5, [r4, #5]
    aca0:	e7e7      	b.n	ac72 <_usb_d_dev_trans_stop+0x2e>
    aca2:	46c0      	nop			; (mov r8, r8)
    aca4:	41000100 	.word	0x41000100
    aca8:	41000108 	.word	0x41000108
    acac:	0000ac1d 	.word	0x0000ac1d

0000acb0 <_usb_d_dev_handle_trfail>:
{
    acb0:	b570      	push	{r4, r5, r6, lr}
    acb2:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    acb4:	7c83      	ldrb	r3, [r0, #18]
    acb6:	220f      	movs	r2, #15
    acb8:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    acba:	aa01      	add	r2, sp, #4
    acbc:	2404      	movs	r4, #4
    acbe:	7014      	strb	r4, [r2, #0]
    acc0:	3404      	adds	r4, #4
    acc2:	7054      	strb	r4, [r2, #1]
    acc4:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
    acc6:	2900      	cmp	r1, #0
    acc8:	d032      	beq.n	ad30 <_usb_d_dev_handle_trfail+0x80>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    acca:	001a      	movs	r2, r3
    accc:	3208      	adds	r2, #8
    acce:	0152      	lsls	r2, r2, #5
    acd0:	2482      	movs	r4, #130	; 0x82
    acd2:	05e4      	lsls	r4, r4, #23
    acd4:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    acd6:	0664      	lsls	r4, r4, #25
    acd8:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
    acda:	010a      	lsls	r2, r1, #4
    acdc:	1952      	adds	r2, r2, r5
    acde:	4d30      	ldr	r5, [pc, #192]	; (ada0 <_usb_d_dev_handle_trfail+0xf0>)
    ace0:	18aa      	adds	r2, r5, r2
    ace2:	7a95      	ldrb	r5, [r2, #10]
    ace4:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    ace6:	2c02      	cmp	r4, #2
    ace8:	d02b      	beq.n	ad42 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    acea:	07ac      	lsls	r4, r5, #30
    acec:	d542      	bpl.n	ad74 <_usb_d_dev_handle_trfail+0xc4>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    acee:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    acf0:	7a94      	ldrb	r4, [r2, #10]
    acf2:	2602      	movs	r6, #2
    acf4:	43b4      	bics	r4, r6
    acf6:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    acf8:	aa01      	add	r2, sp, #4
    acfa:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    acfc:	015a      	lsls	r2, r3, #5
    acfe:	4e29      	ldr	r6, [pc, #164]	; (ada4 <_usb_d_dev_handle_trfail+0xf4>)
    ad00:	46b4      	mov	ip, r6
    ad02:	4462      	add	r2, ip
    ad04:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    ad06:	015b      	lsls	r3, r3, #5
    ad08:	4a27      	ldr	r2, [pc, #156]	; (ada8 <_usb_d_dev_handle_trfail+0xf8>)
    ad0a:	4694      	mov	ip, r2
    ad0c:	4463      	add	r3, ip
    ad0e:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    ad10:	2307      	movs	r3, #7
    ad12:	402b      	ands	r3, r5
    ad14:	2b01      	cmp	r3, #1
    ad16:	d140      	bne.n	ad9a <_usb_d_dev_handle_trfail+0xea>
    ad18:	7cc3      	ldrb	r3, [r0, #19]
    ad1a:	065b      	lsls	r3, r3, #25
    ad1c:	d53d      	bpl.n	ad9a <_usb_d_dev_handle_trfail+0xea>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    ad1e:	7cc3      	ldrb	r3, [r0, #19]
    ad20:	09db      	lsrs	r3, r3, #7
    ad22:	4299      	cmp	r1, r3
    ad24:	d039      	beq.n	ad9a <_usb_d_dev_handle_trfail+0xea>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    ad26:	2200      	movs	r2, #0
    ad28:	0019      	movs	r1, r3
    ad2a:	4b20      	ldr	r3, [pc, #128]	; (adac <_usb_d_dev_handle_trfail+0xfc>)
    ad2c:	4798      	blx	r3
    ad2e:	e034      	b.n	ad9a <_usb_d_dev_handle_trfail+0xea>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ad30:	001a      	movs	r2, r3
    ad32:	3208      	adds	r2, #8
    ad34:	0152      	lsls	r2, r2, #5
    ad36:	2482      	movs	r4, #130	; 0x82
    ad38:	05e4      	lsls	r4, r4, #23
    ad3a:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    ad3c:	2207      	movs	r2, #7
    ad3e:	4014      	ands	r4, r2
    ad40:	e7cb      	b.n	acda <_usb_d_dev_handle_trfail+0x2a>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    ad42:	07ec      	lsls	r4, r5, #31
    ad44:	d5d1      	bpl.n	acea <_usb_d_dev_handle_trfail+0x3a>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    ad46:	7a94      	ldrb	r4, [r2, #10]
    ad48:	2501      	movs	r5, #1
    ad4a:	43ac      	bics	r4, r5
    ad4c:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    ad4e:	aa01      	add	r2, sp, #4
    ad50:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    ad52:	015a      	lsls	r2, r3, #5
    ad54:	4d13      	ldr	r5, [pc, #76]	; (ada4 <_usb_d_dev_handle_trfail+0xf4>)
    ad56:	46ac      	mov	ip, r5
    ad58:	4462      	add	r2, ip
    ad5a:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    ad5c:	015b      	lsls	r3, r3, #5
    ad5e:	4a12      	ldr	r2, [pc, #72]	; (ada8 <_usb_d_dev_handle_trfail+0xf8>)
    ad60:	4694      	mov	ip, r2
    ad62:	4463      	add	r3, ip
    ad64:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    ad66:	1e4b      	subs	r3, r1, #1
    ad68:	4199      	sbcs	r1, r3
    ad6a:	b2c9      	uxtb	r1, r1
    ad6c:	2204      	movs	r2, #4
    ad6e:	4b0f      	ldr	r3, [pc, #60]	; (adac <_usb_d_dev_handle_trfail+0xfc>)
    ad70:	4798      	blx	r3
    ad72:	e012      	b.n	ad9a <_usb_d_dev_handle_trfail+0xea>
	bank->STATUS_BK.reg     = 0;
    ad74:	005a      	lsls	r2, r3, #1
    ad76:	1852      	adds	r2, r2, r1
    ad78:	0112      	lsls	r2, r2, #4
    ad7a:	4809      	ldr	r0, [pc, #36]	; (ada0 <_usb_d_dev_handle_trfail+0xf0>)
    ad7c:	1882      	adds	r2, r0, r2
    ad7e:	2000      	movs	r0, #0
    ad80:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    ad82:	aa01      	add	r2, sp, #4
    ad84:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    ad86:	015a      	lsls	r2, r3, #5
    ad88:	4806      	ldr	r0, [pc, #24]	; (ada4 <_usb_d_dev_handle_trfail+0xf4>)
    ad8a:	4684      	mov	ip, r0
    ad8c:	4462      	add	r2, ip
    ad8e:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    ad90:	015b      	lsls	r3, r3, #5
    ad92:	4a05      	ldr	r2, [pc, #20]	; (ada8 <_usb_d_dev_handle_trfail+0xf8>)
    ad94:	4694      	mov	ip, r2
    ad96:	4463      	add	r3, ip
    ad98:	7019      	strb	r1, [r3, #0]
}
    ad9a:	b002      	add	sp, #8
    ad9c:	bd70      	pop	{r4, r5, r6, pc}
    ad9e:	46c0      	nop			; (mov r8, r8)
    ada0:	200004fc 	.word	0x200004fc
    ada4:	41000100 	.word	0x41000100
    ada8:	41000108 	.word	0x41000108
    adac:	0000ac45 	.word	0x0000ac45

0000adb0 <_usb_d_dev_reset_epts>:
{
    adb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    adb2:	46c6      	mov	lr, r8
    adb4:	b500      	push	{lr}
    adb6:	4d0c      	ldr	r5, [pc, #48]	; (ade8 <_usb_d_dev_reset_epts+0x38>)
    adb8:	002c      	movs	r4, r5
    adba:	3474      	adds	r4, #116	; 0x74
    adbc:	3529      	adds	r5, #41	; 0x29
    adbe:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    adc0:	4b0a      	ldr	r3, [pc, #40]	; (adec <_usb_d_dev_reset_epts+0x3c>)
    adc2:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
    adc4:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
    adc6:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    adc8:	2103      	movs	r1, #3
    adca:	0020      	movs	r0, r4
    adcc:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
    adce:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    add0:	74e6      	strb	r6, [r4, #19]
    add2:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    add4:	42ac      	cmp	r4, r5
    add6:	d1f7      	bne.n	adc8 <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    add8:	2260      	movs	r2, #96	; 0x60
    adda:	2100      	movs	r1, #0
    addc:	4802      	ldr	r0, [pc, #8]	; (ade8 <_usb_d_dev_reset_epts+0x38>)
    adde:	4b04      	ldr	r3, [pc, #16]	; (adf0 <_usb_d_dev_reset_epts+0x40>)
    ade0:	4798      	blx	r3
}
    ade2:	bc04      	pop	{r2}
    ade4:	4690      	mov	r8, r2
    ade6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ade8:	200004fc 	.word	0x200004fc
    adec:	0000ac1d 	.word	0x0000ac1d
    adf0:	0000db5b 	.word	0x0000db5b

0000adf4 <_usb_d_dev_in_next>:
{
    adf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    adf6:	46c6      	mov	lr, r8
    adf8:	b500      	push	{lr}
    adfa:	0004      	movs	r4, r0
    adfc:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    adfe:	7c83      	ldrb	r3, [r0, #18]
    ae00:	250f      	movs	r5, #15
    ae02:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    ae04:	2900      	cmp	r1, #0
    ae06:	d100      	bne.n	ae0a <_usb_d_dev_in_next+0x16>
    ae08:	e0aa      	b.n	af60 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    ae0a:	016a      	lsls	r2, r5, #5
    ae0c:	4b5a      	ldr	r3, [pc, #360]	; (af78 <_usb_d_dev_in_next+0x184>)
    ae0e:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    ae10:	6958      	ldr	r0, [r3, #20]
    ae12:	0480      	lsls	r0, r0, #18
    ae14:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    ae16:	8a23      	ldrh	r3, [r4, #16]
    ae18:	4a58      	ldr	r2, [pc, #352]	; (af7c <_usb_d_dev_in_next+0x188>)
    ae1a:	4293      	cmp	r3, r2
    ae1c:	d100      	bne.n	ae20 <_usb_d_dev_in_next+0x2c>
    ae1e:	e09a      	b.n	af56 <_usb_d_dev_in_next+0x162>
    ae20:	3b01      	subs	r3, #1
    ae22:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    ae24:	7ce3      	ldrb	r3, [r4, #19]
    ae26:	2707      	movs	r7, #7
    ae28:	401f      	ands	r7, r3
	if (isr) {
    ae2a:	2e00      	cmp	r6, #0
    ae2c:	d005      	beq.n	ae3a <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    ae2e:	016b      	lsls	r3, r5, #5
    ae30:	4953      	ldr	r1, [pc, #332]	; (af80 <_usb_d_dev_in_next+0x18c>)
    ae32:	468c      	mov	ip, r1
    ae34:	4463      	add	r3, ip
    ae36:	2102      	movs	r1, #2
    ae38:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
    ae3a:	68a3      	ldr	r3, [r4, #8]
    ae3c:	18c1      	adds	r1, r0, r3
    ae3e:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    ae40:	6863      	ldr	r3, [r4, #4]
    ae42:	4299      	cmp	r1, r3
    ae44:	d24a      	bcs.n	aedc <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
    ae46:	1a5b      	subs	r3, r3, r1
    ae48:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
    ae4a:	7ce2      	ldrb	r2, [r4, #19]
    ae4c:	0692      	lsls	r2, r2, #26
    ae4e:	d535      	bpl.n	aebc <_usb_d_dev_in_next+0xc8>
    ae50:	8a22      	ldrh	r2, [r4, #16]
    ae52:	1c10      	adds	r0, r2, #0
    ae54:	b292      	uxth	r2, r2
    ae56:	429a      	cmp	r2, r3
    ae58:	d900      	bls.n	ae5c <_usb_d_dev_in_next+0x68>
    ae5a:	1c18      	adds	r0, r3, #0
    ae5c:	b283      	uxth	r3, r0
    ae5e:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    ae60:	6823      	ldr	r3, [r4, #0]
    ae62:	469c      	mov	ip, r3
    ae64:	4461      	add	r1, ip
    ae66:	4642      	mov	r2, r8
    ae68:	68e0      	ldr	r0, [r4, #12]
    ae6a:	4b46      	ldr	r3, [pc, #280]	; (af84 <_usb_d_dev_in_next+0x190>)
    ae6c:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    ae6e:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
    ae70:	016a      	lsls	r2, r5, #5
    ae72:	4b41      	ldr	r3, [pc, #260]	; (af78 <_usb_d_dev_in_next+0x184>)
    ae74:	189b      	adds	r3, r3, r2
    ae76:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    ae78:	016a      	lsls	r2, r5, #5
    ae7a:	4b3f      	ldr	r3, [pc, #252]	; (af78 <_usb_d_dev_in_next+0x184>)
    ae7c:	189b      	adds	r3, r3, r2
    ae7e:	695a      	ldr	r2, [r3, #20]
    ae80:	4641      	mov	r1, r8
    ae82:	0489      	lsls	r1, r1, #18
    ae84:	0c89      	lsrs	r1, r1, #18
    ae86:	0b92      	lsrs	r2, r2, #14
    ae88:	0392      	lsls	r2, r2, #14
    ae8a:	430a      	orrs	r2, r1
    ae8c:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    ae8e:	695a      	ldr	r2, [r3, #20]
    ae90:	493d      	ldr	r1, [pc, #244]	; (af88 <_usb_d_dev_in_next+0x194>)
    ae92:	400a      	ands	r2, r1
    ae94:	615a      	str	r2, [r3, #20]
	if (!isr) {
    ae96:	2e00      	cmp	r6, #0
    ae98:	d107      	bne.n	aeaa <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
    ae9a:	2f01      	cmp	r7, #1
    ae9c:	d059      	beq.n	af52 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
    ae9e:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    aea0:	016b      	lsls	r3, r5, #5
    aea2:	493a      	ldr	r1, [pc, #232]	; (af8c <_usb_d_dev_in_next+0x198>)
    aea4:	468c      	mov	ip, r1
    aea6:	4463      	add	r3, ip
    aea8:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    aeaa:	016d      	lsls	r5, r5, #5
    aeac:	4b34      	ldr	r3, [pc, #208]	; (af80 <_usb_d_dev_in_next+0x18c>)
    aeae:	469c      	mov	ip, r3
    aeb0:	4465      	add	r5, ip
    aeb2:	2380      	movs	r3, #128	; 0x80
    aeb4:	716b      	strb	r3, [r5, #5]
}
    aeb6:	bc04      	pop	{r2}
    aeb8:	4690      	mov	r8, r2
    aeba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aebc:	1c1a      	adds	r2, r3, #0
    aebe:	2080      	movs	r0, #128	; 0x80
    aec0:	0180      	lsls	r0, r0, #6
    aec2:	4283      	cmp	r3, r0
    aec4:	d901      	bls.n	aeca <_usb_d_dev_in_next+0xd6>
    aec6:	4b32      	ldr	r3, [pc, #200]	; (af90 <_usb_d_dev_in_next+0x19c>)
    aec8:	881a      	ldrh	r2, [r3, #0]
    aeca:	b293      	uxth	r3, r2
    aecc:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    aece:	6823      	ldr	r3, [r4, #0]
    aed0:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
    aed2:	016a      	lsls	r2, r5, #5
    aed4:	4b28      	ldr	r3, [pc, #160]	; (af78 <_usb_d_dev_in_next+0x184>)
    aed6:	189b      	adds	r3, r3, r2
    aed8:	6119      	str	r1, [r3, #16]
    aeda:	e7cd      	b.n	ae78 <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
    aedc:	7ce3      	ldrb	r3, [r4, #19]
    aede:	06db      	lsls	r3, r3, #27
    aee0:	d50f      	bpl.n	af02 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
    aee2:	7ce3      	ldrb	r3, [r4, #19]
    aee4:	2210      	movs	r2, #16
    aee6:	4393      	bics	r3, r2
    aee8:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    aeea:	016a      	lsls	r2, r5, #5
    aeec:	4b22      	ldr	r3, [pc, #136]	; (af78 <_usb_d_dev_in_next+0x184>)
    aeee:	189b      	adds	r3, r3, r2
    aef0:	695a      	ldr	r2, [r3, #20]
    aef2:	0b92      	lsrs	r2, r2, #14
    aef4:	0392      	lsls	r2, r2, #14
    aef6:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    aef8:	695a      	ldr	r2, [r3, #20]
    aefa:	4923      	ldr	r1, [pc, #140]	; (af88 <_usb_d_dev_in_next+0x194>)
    aefc:	400a      	ands	r2, r1
    aefe:	615a      	str	r2, [r3, #20]
    af00:	e7c9      	b.n	ae96 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    af02:	2f01      	cmp	r7, #1
    af04:	d00e      	beq.n	af24 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    af06:	016d      	lsls	r5, r5, #5
    af08:	4b22      	ldr	r3, [pc, #136]	; (af94 <_usb_d_dev_in_next+0x1a0>)
    af0a:	469c      	mov	ip, r3
    af0c:	4465      	add	r5, ip
    af0e:	234a      	movs	r3, #74	; 0x4a
    af10:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
    af12:	8a21      	ldrh	r1, [r4, #16]
    af14:	4002      	ands	r2, r0
    af16:	4291      	cmp	r1, r2
    af18:	d00b      	beq.n	af32 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    af1a:	2100      	movs	r1, #0
    af1c:	0020      	movs	r0, r4
    af1e:	4b1e      	ldr	r3, [pc, #120]	; (af98 <_usb_d_dev_in_next+0x1a4>)
    af20:	4798      	blx	r3
	return;
    af22:	e7c8      	b.n	aeb6 <_usb_d_dev_in_next+0xc2>
    af24:	016d      	lsls	r5, r5, #5
    af26:	4b1b      	ldr	r3, [pc, #108]	; (af94 <_usb_d_dev_in_next+0x1a0>)
    af28:	469c      	mov	ip, r3
    af2a:	4465      	add	r5, ip
    af2c:	234b      	movs	r3, #75	; 0x4b
    af2e:	702b      	strb	r3, [r5, #0]
    af30:	e7ef      	b.n	af12 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
    af32:	7ce3      	ldrb	r3, [r4, #19]
    af34:	2240      	movs	r2, #64	; 0x40
    af36:	4393      	bics	r3, r2
    af38:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    af3a:	7ca0      	ldrb	r0, [r4, #18]
    af3c:	4b0e      	ldr	r3, [pc, #56]	; (af78 <_usb_d_dev_in_next+0x184>)
    af3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    af40:	68a1      	ldr	r1, [r4, #8]
    af42:	4798      	blx	r3
    af44:	2800      	cmp	r0, #0
    af46:	d1b6      	bne.n	aeb6 <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
    af48:	7ce3      	ldrb	r3, [r4, #19]
    af4a:	2240      	movs	r2, #64	; 0x40
    af4c:	4313      	orrs	r3, r2
    af4e:	74e3      	strb	r3, [r4, #19]
    af50:	e7e3      	b.n	af1a <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
    af52:	224e      	movs	r2, #78	; 0x4e
    af54:	e7a4      	b.n	aea0 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    af56:	7ce7      	ldrb	r7, [r4, #19]
    af58:	2307      	movs	r3, #7
    af5a:	401f      	ands	r7, r3
    af5c:	4a07      	ldr	r2, [pc, #28]	; (af7c <_usb_d_dev_in_next+0x188>)
    af5e:	e766      	b.n	ae2e <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    af60:	8a03      	ldrh	r3, [r0, #16]
    af62:	4a06      	ldr	r2, [pc, #24]	; (af7c <_usb_d_dev_in_next+0x188>)
    af64:	2000      	movs	r0, #0
    af66:	4293      	cmp	r3, r2
    af68:	d000      	beq.n	af6c <_usb_d_dev_in_next+0x178>
    af6a:	e759      	b.n	ae20 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    af6c:	7ce3      	ldrb	r3, [r4, #19]
    af6e:	2707      	movs	r7, #7
    af70:	401f      	ands	r7, r3
    af72:	2000      	movs	r0, #0
    af74:	4a01      	ldr	r2, [pc, #4]	; (af7c <_usb_d_dev_in_next+0x188>)
    af76:	e760      	b.n	ae3a <_usb_d_dev_in_next+0x46>
    af78:	200004fc 	.word	0x200004fc
    af7c:	000003ff 	.word	0x000003ff
    af80:	41000100 	.word	0x41000100
    af84:	0000db25 	.word	0x0000db25
    af88:	f0003fff 	.word	0xf0003fff
    af8c:	41000109 	.word	0x41000109
    af90:	0000ea5c 	.word	0x0000ea5c
    af94:	41000108 	.word	0x41000108
    af98:	0000ac1d 	.word	0x0000ac1d

0000af9c <_usb_d_dev_out_next>:
{
    af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af9e:	46de      	mov	lr, fp
    afa0:	4657      	mov	r7, sl
    afa2:	464e      	mov	r6, r9
    afa4:	4645      	mov	r5, r8
    afa6:	b5e0      	push	{r5, r6, r7, lr}
    afa8:	0004      	movs	r4, r0
    afaa:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    afac:	7c83      	ldrb	r3, [r0, #18]
    afae:	250f      	movs	r5, #15
    afb0:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    afb2:	2900      	cmp	r1, #0
    afb4:	d057      	beq.n	b066 <_usb_d_dev_out_next+0xca>
    afb6:	016a      	lsls	r2, r5, #5
    afb8:	4b7d      	ldr	r3, [pc, #500]	; (b1b0 <_usb_d_dev_out_next+0x214>)
    afba:	189b      	adds	r3, r3, r2
    afbc:	685a      	ldr	r2, [r3, #4]
    afbe:	0112      	lsls	r2, r2, #4
    afc0:	0c92      	lsrs	r2, r2, #18
    afc2:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    afc4:	685f      	ldr	r7, [r3, #4]
    afc6:	04bf      	lsls	r7, r7, #18
    afc8:	0cbf      	lsrs	r7, r7, #18
    afca:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    afcc:	8a06      	ldrh	r6, [r0, #16]
    afce:	4b79      	ldr	r3, [pc, #484]	; (b1b4 <_usb_d_dev_out_next+0x218>)
    afd0:	429e      	cmp	r6, r3
    afd2:	d100      	bne.n	afd6 <_usb_d_dev_out_next+0x3a>
    afd4:	e0cd      	b.n	b172 <_usb_d_dev_out_next+0x1d6>
    afd6:	3e01      	subs	r6, #1
    afd8:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    afda:	465f      	mov	r7, fp
    afdc:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    afde:	7ce3      	ldrb	r3, [r4, #19]
    afe0:	2207      	movs	r2, #7
    afe2:	401a      	ands	r2, r3
    afe4:	4691      	mov	r9, r2
	if (isr) {
    afe6:	4643      	mov	r3, r8
    afe8:	2b00      	cmp	r3, #0
    afea:	d005      	beq.n	aff8 <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    afec:	016b      	lsls	r3, r5, #5
    afee:	4a72      	ldr	r2, [pc, #456]	; (b1b8 <_usb_d_dev_out_next+0x21c>)
    aff0:	4694      	mov	ip, r2
    aff2:	4463      	add	r3, ip
    aff4:	2201      	movs	r2, #1
    aff6:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
    aff8:	7ce3      	ldrb	r3, [r4, #19]
    affa:	069b      	lsls	r3, r3, #26
    affc:	d50f      	bpl.n	b01e <_usb_d_dev_out_next+0x82>
    affe:	6863      	ldr	r3, [r4, #4]
    b000:	2b00      	cmp	r3, #0
    b002:	d039      	beq.n	b078 <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    b004:	68a0      	ldr	r0, [r4, #8]
    b006:	1a1b      	subs	r3, r3, r0
    b008:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    b00a:	6822      	ldr	r2, [r4, #0]
    b00c:	4694      	mov	ip, r2
    b00e:	4460      	add	r0, ip
    b010:	68e1      	ldr	r1, [r4, #12]
    b012:	001a      	movs	r2, r3
    b014:	42bb      	cmp	r3, r7
    b016:	d900      	bls.n	b01a <_usb_d_dev_out_next+0x7e>
    b018:	003a      	movs	r2, r7
    b01a:	4b68      	ldr	r3, [pc, #416]	; (b1bc <_usb_d_dev_out_next+0x220>)
    b01c:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    b01e:	6863      	ldr	r3, [r4, #4]
    b020:	2b00      	cmp	r3, #0
    b022:	d029      	beq.n	b078 <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
    b024:	4642      	mov	r2, r8
    b026:	2a00      	cmp	r2, #0
    b028:	d042      	beq.n	b0b0 <_usb_d_dev_out_next+0x114>
    b02a:	8a22      	ldrh	r2, [r4, #16]
    b02c:	42ba      	cmp	r2, r7
    b02e:	d93f      	bls.n	b0b0 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
    b030:	7ce3      	ldrb	r3, [r4, #19]
    b032:	2210      	movs	r2, #16
    b034:	4393      	bics	r3, r2
    b036:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    b038:	68a3      	ldr	r3, [r4, #8]
    b03a:	445b      	add	r3, fp
    b03c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    b03e:	464b      	mov	r3, r9
    b040:	2b01      	cmp	r3, #1
    b042:	d100      	bne.n	b046 <_usb_d_dev_out_next+0xaa>
    b044:	e087      	b.n	b156 <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    b046:	016b      	lsls	r3, r5, #5
    b048:	4a5d      	ldr	r2, [pc, #372]	; (b1c0 <_usb_d_dev_out_next+0x224>)
    b04a:	4694      	mov	ip, r2
    b04c:	4463      	add	r3, ip
    b04e:	2225      	movs	r2, #37	; 0x25
    b050:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
    b052:	2d00      	cmp	r5, #0
    b054:	d102      	bne.n	b05c <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
    b056:	4b56      	ldr	r3, [pc, #344]	; (b1b0 <_usb_d_dev_out_next+0x214>)
    b058:	68e2      	ldr	r2, [r4, #12]
    b05a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    b05c:	2100      	movs	r1, #0
    b05e:	0020      	movs	r0, r4
    b060:	4b58      	ldr	r3, [pc, #352]	; (b1c4 <_usb_d_dev_out_next+0x228>)
    b062:	4798      	blx	r3
	return;
    b064:	e059      	b.n	b11a <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    b066:	8a06      	ldrh	r6, [r0, #16]
    b068:	4b52      	ldr	r3, [pc, #328]	; (b1b4 <_usb_d_dev_out_next+0x218>)
    b06a:	429e      	cmp	r6, r3
    b06c:	d100      	bne.n	b070 <_usb_d_dev_out_next+0xd4>
    b06e:	e08e      	b.n	b18e <_usb_d_dev_out_next+0x1f2>
    b070:	2300      	movs	r3, #0
    b072:	469b      	mov	fp, r3
    b074:	469a      	mov	sl, r3
    b076:	e7ae      	b.n	afd6 <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    b078:	7ce3      	ldrb	r3, [r4, #19]
    b07a:	06db      	lsls	r3, r3, #27
    b07c:	d400      	bmi.n	b080 <_usb_d_dev_out_next+0xe4>
    b07e:	e07f      	b.n	b180 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
    b080:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    b082:	2210      	movs	r2, #16
    b084:	4393      	bics	r3, r2
    b086:	2220      	movs	r2, #32
    b088:	4313      	orrs	r3, r2
    b08a:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
    b08c:	4a48      	ldr	r2, [pc, #288]	; (b1b0 <_usb_d_dev_out_next+0x214>)
    b08e:	016b      	lsls	r3, r5, #5
    b090:	68e1      	ldr	r1, [r4, #12]
    b092:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    b094:	8a21      	ldrh	r1, [r4, #16]
    b096:	18d3      	adds	r3, r2, r3
    b098:	685a      	ldr	r2, [r3, #4]
    b09a:	0489      	lsls	r1, r1, #18
    b09c:	0909      	lsrs	r1, r1, #4
    b09e:	484a      	ldr	r0, [pc, #296]	; (b1c8 <_usb_d_dev_out_next+0x22c>)
    b0a0:	4002      	ands	r2, r0
    b0a2:	430a      	orrs	r2, r1
    b0a4:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    b0a6:	685a      	ldr	r2, [r3, #4]
    b0a8:	0b92      	lsrs	r2, r2, #14
    b0aa:	0392      	lsls	r2, r2, #14
    b0ac:	605a      	str	r2, [r3, #4]
    b0ae:	e022      	b.n	b0f6 <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
    b0b0:	68a2      	ldr	r2, [r4, #8]
    b0b2:	4452      	add	r2, sl
    b0b4:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    b0b6:	4293      	cmp	r3, r2
    b0b8:	d9c1      	bls.n	b03e <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
    b0ba:	1a9b      	subs	r3, r3, r2
    b0bc:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    b0be:	7ce1      	ldrb	r1, [r4, #19]
    b0c0:	0689      	lsls	r1, r1, #26
    b0c2:	d530      	bpl.n	b126 <_usb_d_dev_out_next+0x18a>
    b0c4:	8a22      	ldrh	r2, [r4, #16]
    b0c6:	1c11      	adds	r1, r2, #0
    b0c8:	b292      	uxth	r2, r2
    b0ca:	429a      	cmp	r2, r3
    b0cc:	d900      	bls.n	b0d0 <_usb_d_dev_out_next+0x134>
    b0ce:	1c19      	adds	r1, r3, #0
    b0d0:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b0d2:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    b0d4:	016a      	lsls	r2, r5, #5
    b0d6:	4936      	ldr	r1, [pc, #216]	; (b1b0 <_usb_d_dev_out_next+0x214>)
    b0d8:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    b0da:	016a      	lsls	r2, r5, #5
    b0dc:	4934      	ldr	r1, [pc, #208]	; (b1b0 <_usb_d_dev_out_next+0x214>)
    b0de:	1889      	adds	r1, r1, r2
    b0e0:	684a      	ldr	r2, [r1, #4]
    b0e2:	049b      	lsls	r3, r3, #18
    b0e4:	091b      	lsrs	r3, r3, #4
    b0e6:	4838      	ldr	r0, [pc, #224]	; (b1c8 <_usb_d_dev_out_next+0x22c>)
    b0e8:	4002      	ands	r2, r0
    b0ea:	4313      	orrs	r3, r2
    b0ec:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    b0ee:	684b      	ldr	r3, [r1, #4]
    b0f0:	0b9b      	lsrs	r3, r3, #14
    b0f2:	039b      	lsls	r3, r3, #14
    b0f4:	604b      	str	r3, [r1, #4]
	if (!isr) {
    b0f6:	4643      	mov	r3, r8
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d108      	bne.n	b10e <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
    b0fc:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
    b0fe:	464b      	mov	r3, r9
    b100:	2b01      	cmp	r3, #1
    b102:	d02f      	beq.n	b164 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    b104:	016b      	lsls	r3, r5, #5
    b106:	4931      	ldr	r1, [pc, #196]	; (b1cc <_usb_d_dev_out_next+0x230>)
    b108:	468c      	mov	ip, r1
    b10a:	4463      	add	r3, ip
    b10c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    b10e:	016d      	lsls	r5, r5, #5
    b110:	4b29      	ldr	r3, [pc, #164]	; (b1b8 <_usb_d_dev_out_next+0x21c>)
    b112:	469c      	mov	ip, r3
    b114:	4465      	add	r5, ip
    b116:	2340      	movs	r3, #64	; 0x40
    b118:	712b      	strb	r3, [r5, #4]
}
    b11a:	bc3c      	pop	{r2, r3, r4, r5}
    b11c:	4690      	mov	r8, r2
    b11e:	4699      	mov	r9, r3
    b120:	46a2      	mov	sl, r4
    b122:	46ab      	mov	fp, r5
    b124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
    b126:	8a21      	ldrh	r1, [r4, #16]
    b128:	428b      	cmp	r3, r1
    b12a:	d90a      	bls.n	b142 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    b12c:	2180      	movs	r1, #128	; 0x80
    b12e:	0189      	lsls	r1, r1, #6
    b130:	428b      	cmp	r3, r1
    b132:	d80d      	bhi.n	b150 <_usb_d_dev_out_next+0x1b4>
    b134:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    b136:	6821      	ldr	r1, [r4, #0]
    b138:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    b13a:	0169      	lsls	r1, r5, #5
    b13c:	481c      	ldr	r0, [pc, #112]	; (b1b0 <_usb_d_dev_out_next+0x214>)
    b13e:	500a      	str	r2, [r1, r0]
    b140:	e7cb      	b.n	b0da <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    b142:	428b      	cmp	r3, r1
    b144:	d2f7      	bcs.n	b136 <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    b146:	7ce1      	ldrb	r1, [r4, #19]
    b148:	2020      	movs	r0, #32
    b14a:	4301      	orrs	r1, r0
    b14c:	74e1      	strb	r1, [r4, #19]
    b14e:	e7f2      	b.n	b136 <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    b150:	2380      	movs	r3, #128	; 0x80
    b152:	019b      	lsls	r3, r3, #6
    b154:	e7ef      	b.n	b136 <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    b156:	016b      	lsls	r3, r5, #5
    b158:	4a19      	ldr	r2, [pc, #100]	; (b1c0 <_usb_d_dev_out_next+0x224>)
    b15a:	4694      	mov	ip, r2
    b15c:	4463      	add	r3, ip
    b15e:	222d      	movs	r2, #45	; 0x2d
    b160:	701a      	strb	r2, [r3, #0]
    b162:	e776      	b.n	b052 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    b164:	016a      	lsls	r2, r5, #5
    b166:	4b12      	ldr	r3, [pc, #72]	; (b1b0 <_usb_d_dev_out_next+0x214>)
    b168:	189b      	adds	r3, r3, r2
    b16a:	2200      	movs	r2, #0
    b16c:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    b16e:	322d      	adds	r2, #45	; 0x2d
    b170:	e7c8      	b.n	b104 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    b172:	05bf      	lsls	r7, r7, #22
    b174:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b176:	7cc3      	ldrb	r3, [r0, #19]
    b178:	2207      	movs	r2, #7
    b17a:	401a      	ands	r2, r3
    b17c:	4691      	mov	r9, r2
    b17e:	e735      	b.n	afec <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    b180:	4643      	mov	r3, r8
    b182:	2b00      	cmp	r3, #0
    b184:	d10c      	bne.n	b1a0 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    b186:	68a3      	ldr	r3, [r4, #8]
    b188:	4453      	add	r3, sl
    b18a:	60a3      	str	r3, [r4, #8]
    b18c:	e757      	b.n	b03e <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b18e:	7cc3      	ldrb	r3, [r0, #19]
    b190:	2207      	movs	r2, #7
    b192:	401a      	ands	r2, r3
    b194:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    b196:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b198:	2300      	movs	r3, #0
    b19a:	469b      	mov	fp, r3
    b19c:	469a      	mov	sl, r3
    b19e:	e72b      	b.n	aff8 <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    b1a0:	8a23      	ldrh	r3, [r4, #16]
    b1a2:	42bb      	cmp	r3, r7
    b1a4:	d900      	bls.n	b1a8 <_usb_d_dev_out_next+0x20c>
    b1a6:	e743      	b.n	b030 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    b1a8:	68a3      	ldr	r3, [r4, #8]
    b1aa:	4453      	add	r3, sl
    b1ac:	60a3      	str	r3, [r4, #8]
    b1ae:	e746      	b.n	b03e <_usb_d_dev_out_next+0xa2>
    b1b0:	200004fc 	.word	0x200004fc
    b1b4:	000003ff 	.word	0x000003ff
    b1b8:	41000100 	.word	0x41000100
    b1bc:	0000db25 	.word	0x0000db25
    b1c0:	41000108 	.word	0x41000108
    b1c4:	0000ac1d 	.word	0x0000ac1d
    b1c8:	f0003fff 	.word	0xf0003fff
    b1cc:	41000109 	.word	0x41000109

0000b1d0 <_usb_d_dev_init>:
{
    b1d0:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    b1d2:	2382      	movs	r3, #130	; 0x82
    b1d4:	05db      	lsls	r3, r3, #23
    b1d6:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    b1d8:	07db      	lsls	r3, r3, #31
    b1da:	d424      	bmi.n	b226 <_usb_d_dev_init+0x56>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    b1dc:	2182      	movs	r1, #130	; 0x82
    b1de:	05c9      	lsls	r1, r1, #23
    b1e0:	2203      	movs	r2, #3
    b1e2:	788b      	ldrb	r3, [r1, #2]
    b1e4:	4213      	tst	r3, r2
    b1e6:	d1fc      	bne.n	b1e2 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    b1e8:	2382      	movs	r3, #130	; 0x82
    b1ea:	05db      	lsls	r3, r3, #23
    b1ec:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    b1ee:	079b      	lsls	r3, r3, #30
    b1f0:	d510      	bpl.n	b214 <_usb_d_dev_init+0x44>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    b1f2:	2282      	movs	r2, #130	; 0x82
    b1f4:	05d2      	lsls	r2, r2, #23
    b1f6:	7813      	ldrb	r3, [r2, #0]
    b1f8:	2102      	movs	r1, #2
    b1fa:	438b      	bics	r3, r1
    b1fc:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    b1fe:	0011      	movs	r1, r2
    b200:	2203      	movs	r2, #3
    b202:	788b      	ldrb	r3, [r1, #2]
    b204:	4213      	tst	r3, r2
    b206:	d1fc      	bne.n	b202 <_usb_d_dev_init+0x32>
    b208:	2182      	movs	r1, #130	; 0x82
    b20a:	05c9      	lsls	r1, r1, #23
    b20c:	2202      	movs	r2, #2
    b20e:	788b      	ldrb	r3, [r1, #2]
    b210:	4213      	tst	r3, r2
    b212:	d1fc      	bne.n	b20e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    b214:	2201      	movs	r2, #1
    b216:	2382      	movs	r3, #130	; 0x82
    b218:	05db      	lsls	r3, r3, #23
    b21a:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    b21c:	0019      	movs	r1, r3
    b21e:	3202      	adds	r2, #2
    b220:	788b      	ldrb	r3, [r1, #2]
    b222:	4213      	tst	r3, r2
    b224:	d1fc      	bne.n	b220 <_usb_d_dev_init+0x50>
    b226:	2182      	movs	r1, #130	; 0x82
    b228:	05c9      	lsls	r1, r1, #23
    b22a:	2201      	movs	r2, #1
    b22c:	788b      	ldrb	r3, [r1, #2]
    b22e:	4213      	tst	r3, r2
    b230:	d1fc      	bne.n	b22c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    b232:	4b1e      	ldr	r3, [pc, #120]	; (b2ac <_usb_d_dev_init+0xdc>)
    b234:	4a1e      	ldr	r2, [pc, #120]	; (b2b0 <_usb_d_dev_init+0xe0>)
    b236:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    b238:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    b23a:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    b23c:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    b23e:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    b240:	4b1c      	ldr	r3, [pc, #112]	; (b2b4 <_usb_d_dev_init+0xe4>)
    b242:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    b244:	4b1c      	ldr	r3, [pc, #112]	; (b2b8 <_usb_d_dev_init+0xe8>)
    b246:	681b      	ldr	r3, [r3, #0]
    b248:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    b24a:	211f      	movs	r1, #31
    b24c:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    b24e:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    b250:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    b252:	019b      	lsls	r3, r3, #6
    b254:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    b256:	2a1f      	cmp	r2, #31
    b258:	d021      	beq.n	b29e <_usb_d_dev_init+0xce>
	if (pad_transp == 0x1F) {
    b25a:	291f      	cmp	r1, #31
    b25c:	d021      	beq.n	b2a2 <_usb_d_dev_init+0xd2>
	if (pad_trim == 0x7) {
    b25e:	2b07      	cmp	r3, #7
    b260:	d021      	beq.n	b2a6 <_usb_d_dev_init+0xd6>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    b262:	0192      	lsls	r2, r2, #6
    b264:	430a      	orrs	r2, r1
    b266:	031b      	lsls	r3, r3, #12
    b268:	4313      	orrs	r3, r2
    b26a:	2282      	movs	r2, #130	; 0x82
    b26c:	05d2      	lsls	r2, r2, #23
    b26e:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    b270:	78d3      	ldrb	r3, [r2, #3]
    b272:	2103      	movs	r1, #3
    b274:	430b      	orrs	r3, r1
    b276:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    b278:	78d3      	ldrb	r3, [r2, #3]
    b27a:	210c      	movs	r1, #12
    b27c:	430b      	orrs	r3, r1
    b27e:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    b280:	2304      	movs	r3, #4
    b282:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    b284:	0011      	movs	r1, r2
    b286:	2203      	movs	r2, #3
    b288:	788b      	ldrb	r3, [r1, #2]
    b28a:	4213      	tst	r3, r2
    b28c:	d1fc      	bne.n	b288 <_usb_d_dev_init+0xb8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    b28e:	2382      	movs	r3, #130	; 0x82
    b290:	05db      	lsls	r3, r3, #23
    b292:	4a06      	ldr	r2, [pc, #24]	; (b2ac <_usb_d_dev_init+0xdc>)
    b294:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    b296:	2201      	movs	r2, #1
    b298:	811a      	strh	r2, [r3, #8]
}
    b29a:	2000      	movs	r0, #0
    b29c:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    b29e:	3a1a      	subs	r2, #26
    b2a0:	e7db      	b.n	b25a <_usb_d_dev_init+0x8a>
		pad_transp = 29;
    b2a2:	3902      	subs	r1, #2
    b2a4:	e7db      	b.n	b25e <_usb_d_dev_init+0x8e>
		pad_trim = 5;
    b2a6:	3b02      	subs	r3, #2
    b2a8:	e7db      	b.n	b262 <_usb_d_dev_init+0x92>
    b2aa:	46c0      	nop			; (mov r8, r8)
    b2ac:	200004fc 	.word	0x200004fc
    b2b0:	0000ab5d 	.word	0x0000ab5d
    b2b4:	0000adb1 	.word	0x0000adb1
    b2b8:	0080601c 	.word	0x0080601c

0000b2bc <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    b2bc:	2382      	movs	r3, #130	; 0x82
    b2be:	05db      	lsls	r3, r3, #23
    b2c0:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    b2c2:	079b      	lsls	r3, r3, #30
    b2c4:	d11e      	bne.n	b304 <_usb_d_dev_enable+0x48>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    b2c6:	2182      	movs	r1, #130	; 0x82
    b2c8:	05c9      	lsls	r1, r1, #23
    b2ca:	2203      	movs	r2, #3
    b2cc:	788b      	ldrb	r3, [r1, #2]
    b2ce:	4213      	tst	r3, r2
    b2d0:	d1fc      	bne.n	b2cc <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    b2d2:	2382      	movs	r3, #130	; 0x82
    b2d4:	05db      	lsls	r3, r3, #23
    b2d6:	781b      	ldrb	r3, [r3, #0]
    b2d8:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    b2da:	079a      	lsls	r2, r3, #30
    b2dc:	d409      	bmi.n	b2f2 <_usb_d_dev_enable+0x36>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    b2de:	2202      	movs	r2, #2
    b2e0:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    b2e2:	2282      	movs	r2, #130	; 0x82
    b2e4:	05d2      	lsls	r2, r2, #23
    b2e6:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    b2e8:	0011      	movs	r1, r2
    b2ea:	2203      	movs	r2, #3
    b2ec:	788b      	ldrb	r3, [r1, #2]
    b2ee:	4213      	tst	r3, r2
    b2f0:	d1fc      	bne.n	b2ec <_usb_d_dev_enable+0x30>
    b2f2:	2240      	movs	r2, #64	; 0x40
    b2f4:	4b05      	ldr	r3, [pc, #20]	; (b30c <_usb_d_dev_enable+0x50>)
    b2f6:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    b2f8:	4a05      	ldr	r2, [pc, #20]	; (b310 <_usb_d_dev_enable+0x54>)
    b2fa:	2382      	movs	r3, #130	; 0x82
    b2fc:	05db      	lsls	r3, r3, #23
    b2fe:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    b300:	2000      	movs	r0, #0
}
    b302:	4770      	bx	lr
		return -USB_ERR_DENIED;
    b304:	2011      	movs	r0, #17
    b306:	4240      	negs	r0, r0
    b308:	e7fb      	b.n	b302 <_usb_d_dev_enable+0x46>
    b30a:	46c0      	nop			; (mov r8, r8)
    b30c:	e000e100 	.word	0xe000e100
    b310:	0000028d 	.word	0x0000028d

0000b314 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    b314:	2282      	movs	r2, #130	; 0x82
    b316:	05d2      	lsls	r2, r2, #23
    b318:	8913      	ldrh	r3, [r2, #8]
    b31a:	2101      	movs	r1, #1
    b31c:	438b      	bics	r3, r1
    b31e:	8113      	strh	r3, [r2, #8]
}
    b320:	4770      	bx	lr

0000b322 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    b322:	2380      	movs	r3, #128	; 0x80
    b324:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    b326:	2382      	movs	r3, #130	; 0x82
    b328:	05db      	lsls	r3, r3, #23
    b32a:	7298      	strb	r0, [r3, #10]
}
    b32c:	4770      	bx	lr
	...

0000b330 <_usb_d_dev_ep_init>:
{
    b330:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    b332:	240f      	movs	r4, #15
    b334:	4004      	ands	r4, r0
    b336:	b243      	sxtb	r3, r0
    b338:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b33a:	2c00      	cmp	r4, #0
    b33c:	d054      	beq.n	b3e8 <_usb_d_dev_ep_init+0xb8>
    b33e:	0025      	movs	r5, r4
    b340:	2b00      	cmp	r3, #0
    b342:	db07      	blt.n	b354 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    b344:	2303      	movs	r3, #3
    b346:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    b348:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    b34a:	2c02      	cmp	r4, #2
    b34c:	d950      	bls.n	b3f0 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    b34e:	2012      	movs	r0, #18
    b350:	4240      	negs	r0, r0
    b352:	e025      	b.n	b3a0 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b354:	1ca5      	adds	r5, r4, #2
    b356:	e7f5      	b.n	b344 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    b358:	4663      	mov	r3, ip
    b35a:	2b00      	cmp	r3, #0
    b35c:	db21      	blt.n	b3a2 <_usb_d_dev_ep_init+0x72>
    b35e:	007b      	lsls	r3, r7, #1
    b360:	19db      	adds	r3, r3, r7
    b362:	009b      	lsls	r3, r3, #2
    b364:	4c3b      	ldr	r4, [pc, #236]	; (b454 <_usb_d_dev_ep_init+0x124>)
    b366:	591b      	ldr	r3, [r3, r4]
    b368:	2b00      	cmp	r3, #0
    b36a:	d166      	bne.n	b43a <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    b36c:	007b      	lsls	r3, r7, #1
    b36e:	19df      	adds	r7, r3, r7
    b370:	00bf      	lsls	r7, r7, #2
    b372:	4b38      	ldr	r3, [pc, #224]	; (b454 <_usb_d_dev_ep_init+0x124>)
    b374:	58ff      	ldr	r7, [r7, r3]
    b376:	4b38      	ldr	r3, [pc, #224]	; (b458 <_usb_d_dev_ep_init+0x128>)
    b378:	00ae      	lsls	r6, r5, #2
    b37a:	1974      	adds	r4, r6, r5
    b37c:	00a4      	lsls	r4, r4, #2
    b37e:	191c      	adds	r4, r3, r4
    b380:	3480      	adds	r4, #128	; 0x80
    b382:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    b384:	3360      	adds	r3, #96	; 0x60
    b386:	1974      	adds	r4, r6, r5
    b388:	00a4      	lsls	r4, r4, #2
    b38a:	191c      	adds	r4, r3, r4
    b38c:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    b38e:	3427      	adds	r4, #39	; 0x27
    b390:	3101      	adds	r1, #1
    b392:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    b394:	1975      	adds	r5, r6, r5
    b396:	00ad      	lsls	r5, r5, #2
    b398:	195b      	adds	r3, r3, r5
    b39a:	3326      	adds	r3, #38	; 0x26
    b39c:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    b39e:	2000      	movs	r0, #0
}
    b3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    b3a2:	007b      	lsls	r3, r7, #1
    b3a4:	19db      	adds	r3, r3, r7
    b3a6:	009b      	lsls	r3, r3, #2
    b3a8:	4c2a      	ldr	r4, [pc, #168]	; (b454 <_usb_d_dev_ep_init+0x124>)
    b3aa:	18e3      	adds	r3, r4, r3
    b3ac:	685b      	ldr	r3, [r3, #4]
    b3ae:	2b00      	cmp	r3, #0
    b3b0:	d106      	bne.n	b3c0 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    b3b2:	007b      	lsls	r3, r7, #1
    b3b4:	19df      	adds	r7, r3, r7
    b3b6:	00bf      	lsls	r7, r7, #2
    b3b8:	4b26      	ldr	r3, [pc, #152]	; (b454 <_usb_d_dev_ep_init+0x124>)
    b3ba:	19df      	adds	r7, r3, r7
    b3bc:	687f      	ldr	r7, [r7, #4]
    b3be:	e7da      	b.n	b376 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    b3c0:	007b      	lsls	r3, r7, #1
    b3c2:	19db      	adds	r3, r3, r7
    b3c4:	009b      	lsls	r3, r3, #2
    b3c6:	4c23      	ldr	r4, [pc, #140]	; (b454 <_usb_d_dev_ep_init+0x124>)
    b3c8:	18e3      	adds	r3, r4, r3
    b3ca:	895b      	ldrh	r3, [r3, #10]
    b3cc:	4293      	cmp	r3, r2
    b3ce:	daf0      	bge.n	b3b2 <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    b3d0:	2013      	movs	r0, #19
    b3d2:	4240      	negs	r0, r0
    b3d4:	e7e4      	b.n	b3a0 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    b3d6:	2014      	movs	r0, #20
    b3d8:	4240      	negs	r0, r0
    b3da:	e7e1      	b.n	b3a0 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    b3dc:	2014      	movs	r0, #20
    b3de:	4240      	negs	r0, r0
    b3e0:	e7de      	b.n	b3a0 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    b3e2:	2013      	movs	r0, #19
    b3e4:	4240      	negs	r0, r0
    b3e6:	e7db      	b.n	b3a0 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    b3e8:	2303      	movs	r3, #3
    b3ea:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    b3ec:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    b3ee:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    b3f0:	00ab      	lsls	r3, r5, #2
    b3f2:	195b      	adds	r3, r3, r5
    b3f4:	009e      	lsls	r6, r3, #2
    b3f6:	4b18      	ldr	r3, [pc, #96]	; (b458 <_usb_d_dev_ep_init+0x128>)
    b3f8:	199b      	adds	r3, r3, r6
    b3fa:	3386      	adds	r3, #134	; 0x86
    b3fc:	781b      	ldrb	r3, [r3, #0]
    b3fe:	2bff      	cmp	r3, #255	; 0xff
    b400:	d1e9      	bne.n	b3d6 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    b402:	2900      	cmp	r1, #0
    b404:	d1a8      	bne.n	b358 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b406:	2c00      	cmp	r4, #0
    b408:	d004      	beq.n	b414 <_usb_d_dev_ep_init+0xe4>
    b40a:	4663      	mov	r3, ip
    b40c:	2b00      	cmp	r3, #0
    b40e:	db01      	blt.n	b414 <_usb_d_dev_ep_init+0xe4>
    b410:	3402      	adds	r4, #2
    b412:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    b414:	00a3      	lsls	r3, r4, #2
    b416:	191b      	adds	r3, r3, r4
    b418:	009b      	lsls	r3, r3, #2
    b41a:	4c0f      	ldr	r4, [pc, #60]	; (b458 <_usb_d_dev_ep_init+0x128>)
    b41c:	18e4      	adds	r4, r4, r3
    b41e:	3486      	adds	r4, #134	; 0x86
    b420:	7823      	ldrb	r3, [r4, #0]
    b422:	2bff      	cmp	r3, #255	; 0xff
    b424:	d1da      	bne.n	b3dc <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    b426:	007b      	lsls	r3, r7, #1
    b428:	19db      	adds	r3, r3, r7
    b42a:	009b      	lsls	r3, r3, #2
    b42c:	4c09      	ldr	r4, [pc, #36]	; (b454 <_usb_d_dev_ep_init+0x124>)
    b42e:	591b      	ldr	r3, [r3, r4]
    b430:	2b00      	cmp	r3, #0
    b432:	d0d6      	beq.n	b3e2 <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    b434:	4663      	mov	r3, ip
    b436:	2b00      	cmp	r3, #0
    b438:	dbb3      	blt.n	b3a2 <_usb_d_dev_ep_init+0x72>
    b43a:	007b      	lsls	r3, r7, #1
    b43c:	19db      	adds	r3, r3, r7
    b43e:	009b      	lsls	r3, r3, #2
    b440:	4c04      	ldr	r4, [pc, #16]	; (b454 <_usb_d_dev_ep_init+0x124>)
    b442:	18e3      	adds	r3, r4, r3
    b444:	891b      	ldrh	r3, [r3, #8]
    b446:	4293      	cmp	r3, r2
    b448:	db00      	blt.n	b44c <_usb_d_dev_ep_init+0x11c>
    b44a:	e78f      	b.n	b36c <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    b44c:	2013      	movs	r0, #19
    b44e:	4240      	negs	r0, r0
    b450:	e7a6      	b.n	b3a0 <_usb_d_dev_ep_init+0x70>
    b452:	46c0      	nop			; (mov r8, r8)
    b454:	0000ea60 	.word	0x0000ea60
    b458:	200004fc 	.word	0x200004fc

0000b45c <_usb_d_dev_ep_deinit>:
{
    b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b45e:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    b460:	240f      	movs	r4, #15
    b462:	4004      	ands	r4, r0
    b464:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b466:	2c00      	cmp	r4, #0
    b468:	d010      	beq.n	b48c <_usb_d_dev_ep_deinit+0x30>
    b46a:	0020      	movs	r0, r4
    b46c:	2f00      	cmp	r7, #0
    b46e:	db02      	blt.n	b476 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b470:	2c02      	cmp	r4, #2
    b472:	d902      	bls.n	b47a <_usb_d_dev_ep_deinit+0x1e>
}
    b474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b476:	1ca0      	adds	r0, r4, #2
    b478:	e7fa      	b.n	b470 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    b47a:	0006      	movs	r6, r0
    b47c:	3001      	adds	r0, #1
    b47e:	0083      	lsls	r3, r0, #2
    b480:	1818      	adds	r0, r3, r0
    b482:	0080      	lsls	r0, r0, #2
    b484:	4b27      	ldr	r3, [pc, #156]	; (b524 <_usb_d_dev_ep_deinit+0xc8>)
    b486:	3360      	adds	r3, #96	; 0x60
    b488:	1818      	adds	r0, r3, r0
    b48a:	e002      	b.n	b492 <_usb_d_dev_ep_deinit+0x36>
    b48c:	4825      	ldr	r0, [pc, #148]	; (b524 <_usb_d_dev_ep_deinit+0xc8>)
    b48e:	3074      	adds	r0, #116	; 0x74
    b490:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b492:	00b3      	lsls	r3, r6, #2
    b494:	199b      	adds	r3, r3, r6
    b496:	009a      	lsls	r2, r3, #2
    b498:	4b22      	ldr	r3, [pc, #136]	; (b524 <_usb_d_dev_ep_deinit+0xc8>)
    b49a:	189b      	adds	r3, r3, r2
    b49c:	3386      	adds	r3, #134	; 0x86
    b49e:	781b      	ldrb	r3, [r3, #0]
    b4a0:	2bff      	cmp	r3, #255	; 0xff
    b4a2:	d0e7      	beq.n	b474 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    b4a4:	0ff9      	lsrs	r1, r7, #31
    b4a6:	2203      	movs	r2, #3
    b4a8:	4b1f      	ldr	r3, [pc, #124]	; (b528 <_usb_d_dev_ep_deinit+0xcc>)
    b4aa:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b4ac:	00b3      	lsls	r3, r6, #2
    b4ae:	199b      	adds	r3, r3, r6
    b4b0:	009a      	lsls	r2, r3, #2
    b4b2:	4b1c      	ldr	r3, [pc, #112]	; (b524 <_usb_d_dev_ep_deinit+0xc8>)
    b4b4:	189b      	adds	r3, r3, r2
    b4b6:	3380      	adds	r3, #128	; 0x80
    b4b8:	79da      	ldrb	r2, [r3, #7]
    b4ba:	2307      	movs	r3, #7
    b4bc:	4013      	ands	r3, r2
    b4be:	2b01      	cmp	r3, #1
    b4c0:	d01c      	beq.n	b4fc <_usb_d_dev_ep_deinit+0xa0>
	} else if (USB_EP_GET_DIR(ep)) {
    b4c2:	2f00      	cmp	r7, #0
    b4c4:	db21      	blt.n	b50a <_usb_d_dev_ep_deinit+0xae>
    b4c6:	016d      	lsls	r5, r5, #5
    b4c8:	2382      	movs	r3, #130	; 0x82
    b4ca:	05db      	lsls	r3, r3, #23
    b4cc:	469c      	mov	ip, r3
    b4ce:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    b4d0:	2280      	movs	r2, #128	; 0x80
    b4d2:	0052      	lsls	r2, r2, #1
    b4d4:	5cab      	ldrb	r3, [r5, r2]
    b4d6:	2107      	movs	r1, #7
    b4d8:	438b      	bics	r3, r1
    b4da:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    b4dc:	4b11      	ldr	r3, [pc, #68]	; (b524 <_usb_d_dev_ep_deinit+0xc8>)
    b4de:	3360      	adds	r3, #96	; 0x60
    b4e0:	00b1      	lsls	r1, r6, #2
    b4e2:	198a      	adds	r2, r1, r6
    b4e4:	0092      	lsls	r2, r2, #2
    b4e6:	189a      	adds	r2, r3, r2
    b4e8:	3227      	adds	r2, #39	; 0x27
    b4ea:	2000      	movs	r0, #0
    b4ec:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    b4ee:	198e      	adds	r6, r1, r6
    b4f0:	00b6      	lsls	r6, r6, #2
    b4f2:	199b      	adds	r3, r3, r6
    b4f4:	3326      	adds	r3, #38	; 0x26
    b4f6:	22ff      	movs	r2, #255	; 0xff
    b4f8:	701a      	strb	r2, [r3, #0]
    b4fa:	e7bb      	b.n	b474 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    b4fc:	3508      	adds	r5, #8
    b4fe:	016d      	lsls	r5, r5, #5
    b500:	2200      	movs	r2, #0
    b502:	2382      	movs	r3, #130	; 0x82
    b504:	05db      	lsls	r3, r3, #23
    b506:	54ea      	strb	r2, [r5, r3]
    b508:	e7e8      	b.n	b4dc <_usb_d_dev_ep_deinit+0x80>
    b50a:	0164      	lsls	r4, r4, #5
    b50c:	2382      	movs	r3, #130	; 0x82
    b50e:	05db      	lsls	r3, r3, #23
    b510:	469c      	mov	ip, r3
    b512:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    b514:	2280      	movs	r2, #128	; 0x80
    b516:	0052      	lsls	r2, r2, #1
    b518:	5ca3      	ldrb	r3, [r4, r2]
    b51a:	2170      	movs	r1, #112	; 0x70
    b51c:	438b      	bics	r3, r1
    b51e:	54a3      	strb	r3, [r4, r2]
    b520:	e7dc      	b.n	b4dc <_usb_d_dev_ep_deinit+0x80>
    b522:	46c0      	nop			; (mov r8, r8)
    b524:	200004fc 	.word	0x200004fc
    b528:	0000ac45 	.word	0x0000ac45

0000b52c <_usb_d_dev_ep_enable>:
{
    b52c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b52e:	46c6      	mov	lr, r8
    b530:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    b532:	220f      	movs	r2, #15
    b534:	4002      	ands	r2, r0
    b536:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b538:	2a00      	cmp	r2, #0
    b53a:	d100      	bne.n	b53e <_usb_d_dev_ep_enable+0x12>
    b53c:	e095      	b.n	b66a <_usb_d_dev_ep_enable+0x13e>
    b53e:	0013      	movs	r3, r2
    b540:	2800      	cmp	r0, #0
    b542:	db0c      	blt.n	b55e <_usb_d_dev_ep_enable+0x32>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    b544:	0011      	movs	r1, r2
    b546:	3208      	adds	r2, #8
    b548:	0152      	lsls	r2, r2, #5
    b54a:	2482      	movs	r4, #130	; 0x82
    b54c:	05e4      	lsls	r4, r4, #23
    b54e:	5d15      	ldrb	r5, [r2, r4]
    b550:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b552:	2902      	cmp	r1, #2
    b554:	d800      	bhi.n	b558 <_usb_d_dev_ep_enable+0x2c>
    b556:	e090      	b.n	b67a <_usb_d_dev_ep_enable+0x14e>
		return -USB_ERR_PARAM;
    b558:	2012      	movs	r0, #18
    b55a:	4240      	negs	r0, r0
    b55c:	e0e9      	b.n	b732 <_usb_d_dev_ep_enable+0x206>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b55e:	1c93      	adds	r3, r2, #2
    b560:	e7f0      	b.n	b544 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    b562:	3276      	adds	r2, #118	; 0x76
    b564:	422a      	tst	r2, r5
    b566:	d177      	bne.n	b658 <_usb_d_dev_ep_enable+0x12c>
    b568:	2282      	movs	r2, #130	; 0x82
    b56a:	05d2      	lsls	r2, r2, #23
    b56c:	4690      	mov	r8, r2
    b56e:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    b570:	2011      	movs	r0, #17
    b572:	2280      	movs	r2, #128	; 0x80
    b574:	0052      	lsls	r2, r2, #1
    b576:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b578:	009a      	lsls	r2, r3, #2
    b57a:	18d2      	adds	r2, r2, r3
    b57c:	0095      	lsls	r5, r2, #2
    b57e:	4aa0      	ldr	r2, [pc, #640]	; (b800 <_usb_d_dev_ep_enable+0x2d4>)
    b580:	3260      	adds	r2, #96	; 0x60
    b582:	1952      	adds	r2, r2, r5
    b584:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    b586:	0395      	lsls	r5, r2, #14
    b588:	489e      	ldr	r0, [pc, #632]	; (b804 <_usb_d_dev_ep_enable+0x2d8>)
    b58a:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    b58c:	2080      	movs	r0, #128	; 0x80
    b58e:	0080      	lsls	r0, r0, #2
    b590:	4282      	cmp	r2, r0
    b592:	d900      	bls.n	b596 <_usb_d_dev_ep_enable+0x6a>
    b594:	e0d0      	b.n	b738 <_usb_d_dev_ep_enable+0x20c>
    b596:	3801      	subs	r0, #1
    b598:	38ff      	subs	r0, #255	; 0xff
    b59a:	4282      	cmp	r2, r0
    b59c:	d900      	bls.n	b5a0 <_usb_d_dev_ep_enable+0x74>
    b59e:	e117      	b.n	b7d0 <_usb_d_dev_ep_enable+0x2a4>
    b5a0:	2a80      	cmp	r2, #128	; 0x80
    b5a2:	d900      	bls.n	b5a6 <_usb_d_dev_ep_enable+0x7a>
    b5a4:	e104      	b.n	b7b0 <_usb_d_dev_ep_enable+0x284>
    b5a6:	2a40      	cmp	r2, #64	; 0x40
    b5a8:	d900      	bls.n	b5ac <_usb_d_dev_ep_enable+0x80>
    b5aa:	e119      	b.n	b7e0 <_usb_d_dev_ep_enable+0x2b4>
    b5ac:	2a20      	cmp	r2, #32
    b5ae:	d900      	bls.n	b5b2 <_usb_d_dev_ep_enable+0x86>
    b5b0:	e106      	b.n	b7c0 <_usb_d_dev_ep_enable+0x294>
    b5b2:	2a10      	cmp	r2, #16
    b5b4:	d900      	bls.n	b5b8 <_usb_d_dev_ep_enable+0x8c>
    b5b6:	e11b      	b.n	b7f0 <_usb_d_dev_ep_enable+0x2c4>
    b5b8:	38f8      	subs	r0, #248	; 0xf8
    b5ba:	4290      	cmp	r0, r2
    b5bc:	4180      	sbcs	r0, r0
    b5be:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b5c0:	0706      	lsls	r6, r0, #28
    b5c2:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b5c4:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b5c6:	0495      	lsls	r5, r2, #18
    b5c8:	0cad      	lsrs	r5, r5, #18
    b5ca:	e0bc      	b.n	b746 <_usb_d_dev_ep_enable+0x21a>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    b5cc:	2270      	movs	r2, #112	; 0x70
    b5ce:	422a      	tst	r2, r5
    b5d0:	d145      	bne.n	b65e <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    b5d2:	488b      	ldr	r0, [pc, #556]	; (b800 <_usb_d_dev_ep_enable+0x2d4>)
    b5d4:	009e      	lsls	r6, r3, #2
    b5d6:	18f2      	adds	r2, r6, r3
    b5d8:	0092      	lsls	r2, r2, #2
    b5da:	1882      	adds	r2, r0, r2
    b5dc:	3280      	adds	r2, #128	; 0x80
    b5de:	79d2      	ldrb	r2, [r2, #7]
    b5e0:	0752      	lsls	r2, r2, #29
    b5e2:	0e52      	lsrs	r2, r2, #25
    b5e4:	4315      	orrs	r5, r2
    b5e6:	2282      	movs	r2, #130	; 0x82
    b5e8:	05d2      	lsls	r2, r2, #23
    b5ea:	4694      	mov	ip, r2
    b5ec:	4464      	add	r4, ip
    b5ee:	2280      	movs	r2, #128	; 0x80
    b5f0:	0052      	lsls	r2, r2, #1
    b5f2:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b5f4:	3060      	adds	r0, #96	; 0x60
    b5f6:	18f6      	adds	r6, r6, r3
    b5f8:	00b6      	lsls	r6, r6, #2
    b5fa:	1980      	adds	r0, r0, r6
    b5fc:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    b5fe:	0485      	lsls	r5, r0, #18
    b600:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    b602:	3201      	adds	r2, #1
    b604:	32ff      	adds	r2, #255	; 0xff
    b606:	2307      	movs	r3, #7
    b608:	4290      	cmp	r0, r2
    b60a:	d814      	bhi.n	b636 <_usb_d_dev_ep_enable+0x10a>
    b60c:	3a01      	subs	r2, #1
    b60e:	3aff      	subs	r2, #255	; 0xff
    b610:	3b01      	subs	r3, #1
    b612:	4290      	cmp	r0, r2
    b614:	d80f      	bhi.n	b636 <_usb_d_dev_ep_enable+0x10a>
    b616:	3b01      	subs	r3, #1
    b618:	2880      	cmp	r0, #128	; 0x80
    b61a:	d80c      	bhi.n	b636 <_usb_d_dev_ep_enable+0x10a>
    b61c:	3b01      	subs	r3, #1
    b61e:	2840      	cmp	r0, #64	; 0x40
    b620:	d809      	bhi.n	b636 <_usb_d_dev_ep_enable+0x10a>
    b622:	3b01      	subs	r3, #1
    b624:	2820      	cmp	r0, #32
    b626:	d806      	bhi.n	b636 <_usb_d_dev_ep_enable+0x10a>
    b628:	3b01      	subs	r3, #1
    b62a:	2810      	cmp	r0, #16
    b62c:	d803      	bhi.n	b636 <_usb_d_dev_ep_enable+0x10a>
    b62e:	3af8      	subs	r2, #248	; 0xf8
    b630:	4282      	cmp	r2, r0
    b632:	4192      	sbcs	r2, r2
    b634:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b636:	071b      	lsls	r3, r3, #28
    b638:	432b      	orrs	r3, r5
    b63a:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    b63c:	2280      	movs	r2, #128	; 0x80
    b63e:	2382      	movs	r3, #130	; 0x82
    b640:	005b      	lsls	r3, r3, #1
    b642:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    b644:	0149      	lsls	r1, r1, #5
    b646:	4b6e      	ldr	r3, [pc, #440]	; (b800 <_usb_d_dev_ep_enable+0x2d4>)
    b648:	1859      	adds	r1, r3, r1
    b64a:	2300      	movs	r3, #0
    b64c:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    b64e:	2000      	movs	r0, #0
    b650:	e06f      	b.n	b732 <_usb_d_dev_ep_enable+0x206>
		return -USB_ERR_PARAM;
    b652:	2012      	movs	r0, #18
    b654:	4240      	negs	r0, r0
    b656:	e06c      	b.n	b732 <_usb_d_dev_ep_enable+0x206>
			return -USB_ERR_REDO;
    b658:	2014      	movs	r0, #20
    b65a:	4240      	negs	r0, r0
    b65c:	e069      	b.n	b732 <_usb_d_dev_ep_enable+0x206>
			return -USB_ERR_REDO;
    b65e:	2014      	movs	r0, #20
    b660:	4240      	negs	r0, r0
    b662:	e066      	b.n	b732 <_usb_d_dev_ep_enable+0x206>
			return -USB_ERR_REDO;
    b664:	2014      	movs	r0, #20
    b666:	4240      	negs	r0, r0
    b668:	e063      	b.n	b732 <_usb_d_dev_ep_enable+0x206>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    b66a:	2380      	movs	r3, #128	; 0x80
    b66c:	005b      	lsls	r3, r3, #1
    b66e:	2282      	movs	r2, #130	; 0x82
    b670:	05d2      	lsls	r2, r2, #23
    b672:	5cd5      	ldrb	r5, [r2, r3]
    b674:	b2ed      	uxtb	r5, r5
    b676:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    b678:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    b67a:	009a      	lsls	r2, r3, #2
    b67c:	18d2      	adds	r2, r2, r3
    b67e:	0094      	lsls	r4, r2, #2
    b680:	4a5f      	ldr	r2, [pc, #380]	; (b800 <_usb_d_dev_ep_enable+0x2d4>)
    b682:	1912      	adds	r2, r2, r4
    b684:	3286      	adds	r2, #134	; 0x86
    b686:	7812      	ldrb	r2, [r2, #0]
    b688:	4694      	mov	ip, r2
    b68a:	2aff      	cmp	r2, #255	; 0xff
    b68c:	d0e1      	beq.n	b652 <_usb_d_dev_ep_enable+0x126>
    b68e:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    b690:	4a5b      	ldr	r2, [pc, #364]	; (b800 <_usb_d_dev_ep_enable+0x2d4>)
    b692:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    b694:	009e      	lsls	r6, r3, #2
    b696:	18f6      	adds	r6, r6, r3
    b698:	00b6      	lsls	r6, r6, #2
    b69a:	1992      	adds	r2, r2, r6
    b69c:	3280      	adds	r2, #128	; 0x80
    b69e:	79d6      	ldrb	r6, [r2, #7]
    b6a0:	2207      	movs	r2, #7
    b6a2:	4032      	ands	r2, r6
    b6a4:	2a01      	cmp	r2, #1
    b6a6:	d100      	bne.n	b6aa <_usb_d_dev_ep_enable+0x17e>
    b6a8:	e75b      	b.n	b562 <_usb_d_dev_ep_enable+0x36>
	} else if (dir) {
    b6aa:	2800      	cmp	r0, #0
    b6ac:	db8e      	blt.n	b5cc <_usb_d_dev_ep_enable+0xa0>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    b6ae:	076a      	lsls	r2, r5, #29
    b6b0:	d1d8      	bne.n	b664 <_usb_d_dev_ep_enable+0x138>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    b6b2:	4853      	ldr	r0, [pc, #332]	; (b800 <_usb_d_dev_ep_enable+0x2d4>)
    b6b4:	009e      	lsls	r6, r3, #2
    b6b6:	18f2      	adds	r2, r6, r3
    b6b8:	0092      	lsls	r2, r2, #2
    b6ba:	1882      	adds	r2, r0, r2
    b6bc:	3280      	adds	r2, #128	; 0x80
    b6be:	79d2      	ldrb	r2, [r2, #7]
    b6c0:	0752      	lsls	r2, r2, #29
    b6c2:	0f52      	lsrs	r2, r2, #29
    b6c4:	4315      	orrs	r5, r2
    b6c6:	2282      	movs	r2, #130	; 0x82
    b6c8:	05d2      	lsls	r2, r2, #23
    b6ca:	4694      	mov	ip, r2
    b6cc:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    b6ce:	2280      	movs	r2, #128	; 0x80
    b6d0:	0052      	lsls	r2, r2, #1
    b6d2:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b6d4:	3060      	adds	r0, #96	; 0x60
    b6d6:	18f6      	adds	r6, r6, r3
    b6d8:	00b6      	lsls	r6, r6, #2
    b6da:	1980      	adds	r0, r0, r6
    b6dc:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    b6de:	03ab      	lsls	r3, r5, #14
    b6e0:	4848      	ldr	r0, [pc, #288]	; (b804 <_usb_d_dev_ep_enable+0x2d8>)
    b6e2:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    b6e4:	3201      	adds	r2, #1
    b6e6:	32ff      	adds	r2, #255	; 0xff
    b6e8:	2307      	movs	r3, #7
    b6ea:	4295      	cmp	r5, r2
    b6ec:	d814      	bhi.n	b718 <_usb_d_dev_ep_enable+0x1ec>
    b6ee:	3a01      	subs	r2, #1
    b6f0:	3aff      	subs	r2, #255	; 0xff
    b6f2:	3b01      	subs	r3, #1
    b6f4:	4295      	cmp	r5, r2
    b6f6:	d80f      	bhi.n	b718 <_usb_d_dev_ep_enable+0x1ec>
    b6f8:	3b01      	subs	r3, #1
    b6fa:	2d80      	cmp	r5, #128	; 0x80
    b6fc:	d80c      	bhi.n	b718 <_usb_d_dev_ep_enable+0x1ec>
    b6fe:	3b01      	subs	r3, #1
    b700:	2d40      	cmp	r5, #64	; 0x40
    b702:	d809      	bhi.n	b718 <_usb_d_dev_ep_enable+0x1ec>
    b704:	3b01      	subs	r3, #1
    b706:	2d20      	cmp	r5, #32
    b708:	d806      	bhi.n	b718 <_usb_d_dev_ep_enable+0x1ec>
    b70a:	3b01      	subs	r3, #1
    b70c:	2d10      	cmp	r5, #16
    b70e:	d803      	bhi.n	b718 <_usb_d_dev_ep_enable+0x1ec>
    b710:	3af8      	subs	r2, #248	; 0xf8
    b712:	42aa      	cmp	r2, r5
    b714:	4192      	sbcs	r2, r2
    b716:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b718:	071b      	lsls	r3, r3, #28
    b71a:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b71c:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    b71e:	2240      	movs	r2, #64	; 0x40
    b720:	2306      	movs	r3, #6
    b722:	33ff      	adds	r3, #255	; 0xff
    b724:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    b726:	0149      	lsls	r1, r1, #5
    b728:	4b35      	ldr	r3, [pc, #212]	; (b800 <_usb_d_dev_ep_enable+0x2d4>)
    b72a:	1859      	adds	r1, r3, r1
    b72c:	2300      	movs	r3, #0
    b72e:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    b730:	2000      	movs	r0, #0
}
    b732:	bc04      	pop	{r2}
    b734:	4690      	mov	r8, r2
    b736:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b738:	20e0      	movs	r0, #224	; 0xe0
    b73a:	05c0      	lsls	r0, r0, #23
    b73c:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b73e:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b740:	0495      	lsls	r5, r2, #18
    b742:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    b744:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b746:	0700      	lsls	r0, r0, #28
    b748:	4328      	orrs	r0, r5
    b74a:	6178      	str	r0, [r7, #20]
    b74c:	2506      	movs	r5, #6
    b74e:	35ff      	adds	r5, #255	; 0xff
    b750:	2640      	movs	r6, #64	; 0x40
    b752:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    b754:	2782      	movs	r7, #130	; 0x82
    b756:	007f      	lsls	r7, r7, #1
    b758:	2080      	movs	r0, #128	; 0x80
    b75a:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    b75c:	4828      	ldr	r0, [pc, #160]	; (b800 <_usb_d_dev_ep_enable+0x2d4>)
    b75e:	0149      	lsls	r1, r1, #5
    b760:	1841      	adds	r1, r0, r1
    b762:	2400      	movs	r4, #0
    b764:	728c      	strb	r4, [r1, #10]
    b766:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b768:	340f      	adds	r4, #15
    b76a:	4661      	mov	r1, ip
    b76c:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    b76e:	0099      	lsls	r1, r3, #2
    b770:	18c9      	adds	r1, r1, r3
    b772:	0089      	lsls	r1, r1, #2
    b774:	1841      	adds	r1, r0, r1
    b776:	3180      	adds	r1, #128	; 0x80
    b778:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    b77a:	0163      	lsls	r3, r4, #5
    b77c:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    b77e:	18c0      	adds	r0, r0, r3
    b780:	6841      	ldr	r1, [r0, #4]
    b782:	0492      	lsls	r2, r2, #18
    b784:	0914      	lsrs	r4, r2, #4
    b786:	4a20      	ldr	r2, [pc, #128]	; (b808 <_usb_d_dev_ep_enable+0x2dc>)
    b788:	400a      	ands	r2, r1
    b78a:	4322      	orrs	r2, r4
    b78c:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    b78e:	6842      	ldr	r2, [r0, #4]
    b790:	0b92      	lsrs	r2, r2, #14
    b792:	0392      	lsls	r2, r2, #14
    b794:	6042      	str	r2, [r0, #4]
    b796:	2282      	movs	r2, #130	; 0x82
    b798:	05d2      	lsls	r2, r2, #23
    b79a:	189a      	adds	r2, r3, r2
    b79c:	21b0      	movs	r1, #176	; 0xb0
    b79e:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    b7a0:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    b7a2:	4a1a      	ldr	r2, [pc, #104]	; (b80c <_usb_d_dev_ep_enable+0x2e0>)
    b7a4:	4694      	mov	ip, r2
    b7a6:	4463      	add	r3, ip
    b7a8:	2210      	movs	r2, #16
    b7aa:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    b7ac:	2000      	movs	r0, #0
    b7ae:	e7c0      	b.n	b732 <_usb_d_dev_ep_enable+0x206>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b7b0:	20a0      	movs	r0, #160	; 0xa0
    b7b2:	05c0      	lsls	r0, r0, #23
    b7b4:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b7b6:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b7b8:	0495      	lsls	r5, r2, #18
    b7ba:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    b7bc:	2005      	movs	r0, #5
    b7be:	e7c2      	b.n	b746 <_usb_d_dev_ep_enable+0x21a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b7c0:	20c0      	movs	r0, #192	; 0xc0
    b7c2:	0580      	lsls	r0, r0, #22
    b7c4:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b7c6:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b7c8:	0495      	lsls	r5, r2, #18
    b7ca:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    b7cc:	2003      	movs	r0, #3
    b7ce:	e7ba      	b.n	b746 <_usb_d_dev_ep_enable+0x21a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b7d0:	20c0      	movs	r0, #192	; 0xc0
    b7d2:	05c0      	lsls	r0, r0, #23
    b7d4:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b7d6:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b7d8:	0495      	lsls	r5, r2, #18
    b7da:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    b7dc:	2006      	movs	r0, #6
    b7de:	e7b2      	b.n	b746 <_usb_d_dev_ep_enable+0x21a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b7e0:	2080      	movs	r0, #128	; 0x80
    b7e2:	05c0      	lsls	r0, r0, #23
    b7e4:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b7e6:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b7e8:	0495      	lsls	r5, r2, #18
    b7ea:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    b7ec:	2004      	movs	r0, #4
    b7ee:	e7aa      	b.n	b746 <_usb_d_dev_ep_enable+0x21a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b7f0:	2080      	movs	r0, #128	; 0x80
    b7f2:	0580      	lsls	r0, r0, #22
    b7f4:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    b7f6:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    b7f8:	0495      	lsls	r5, r2, #18
    b7fa:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    b7fc:	2002      	movs	r0, #2
    b7fe:	e7a2      	b.n	b746 <_usb_d_dev_ep_enable+0x21a>
    b800:	200004fc 	.word	0x200004fc
    b804:	0fffc000 	.word	0x0fffc000
    b808:	f0003fff 	.word	0xf0003fff
    b80c:	41000109 	.word	0x41000109

0000b810 <_usb_d_dev_ep_stall>:
{
    b810:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    b812:	230f      	movs	r3, #15
    b814:	4003      	ands	r3, r0
    b816:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    b818:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b81a:	2b00      	cmp	r3, #0
    b81c:	d009      	beq.n	b832 <_usb_d_dev_ep_stall+0x22>
    b81e:	001a      	movs	r2, r3
    b820:	2800      	cmp	r0, #0
    b822:	db04      	blt.n	b82e <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    b824:	2b02      	cmp	r3, #2
    b826:	d905      	bls.n	b834 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    b828:	2012      	movs	r0, #18
    b82a:	4240      	negs	r0, r0
    b82c:	e019      	b.n	b862 <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b82e:	1c9a      	adds	r2, r3, #2
    b830:	e7f8      	b.n	b824 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    b832:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    b834:	2901      	cmp	r1, #1
    b836:	d015      	beq.n	b864 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    b838:	2900      	cmp	r1, #0
    b83a:	d036      	beq.n	b8aa <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b83c:	0093      	lsls	r3, r2, #2
    b83e:	189b      	adds	r3, r3, r2
    b840:	009b      	lsls	r3, r3, #2
    b842:	4a47      	ldr	r2, [pc, #284]	; (b960 <_usb_d_dev_ep_stall+0x150>)
    b844:	18d2      	adds	r2, r2, r3
    b846:	3286      	adds	r2, #134	; 0x86
    b848:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    b84a:	230f      	movs	r3, #15
    b84c:	4013      	ands	r3, r2
    b84e:	015b      	lsls	r3, r3, #5
    b850:	4a44      	ldr	r2, [pc, #272]	; (b964 <_usb_d_dev_ep_stall+0x154>)
    b852:	4694      	mov	ip, r2
    b854:	4463      	add	r3, ip
    b856:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b858:	2310      	movs	r3, #16
    b85a:	40a3      	lsls	r3, r4
    b85c:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    b85e:	1e43      	subs	r3, r0, #1
    b860:	4198      	sbcs	r0, r3
}
    b862:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b864:	2510      	movs	r5, #16
    b866:	40a5      	lsls	r5, r4
    b868:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    b86a:	493d      	ldr	r1, [pc, #244]	; (b960 <_usb_d_dev_ep_stall+0x150>)
    b86c:	0090      	lsls	r0, r2, #2
    b86e:	1883      	adds	r3, r0, r2
    b870:	009b      	lsls	r3, r3, #2
    b872:	18cb      	adds	r3, r1, r3
    b874:	3386      	adds	r3, #134	; 0x86
    b876:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    b878:	230f      	movs	r3, #15
    b87a:	4033      	ands	r3, r6
    b87c:	015e      	lsls	r6, r3, #5
    b87e:	4f39      	ldr	r7, [pc, #228]	; (b964 <_usb_d_dev_ep_stall+0x154>)
    b880:	46bc      	mov	ip, r7
    b882:	4466      	add	r6, ip
    b884:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b886:	2520      	movs	r5, #32
    b888:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    b88a:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    b88c:	015b      	lsls	r3, r3, #5
    b88e:	4d36      	ldr	r5, [pc, #216]	; (b968 <_usb_d_dev_ep_stall+0x158>)
    b890:	46ac      	mov	ip, r5
    b892:	4463      	add	r3, ip
    b894:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    b896:	1882      	adds	r2, r0, r2
    b898:	0092      	lsls	r2, r2, #2
    b89a:	188a      	adds	r2, r1, r2
    b89c:	3280      	adds	r2, #128	; 0x80
    b89e:	79d3      	ldrb	r3, [r2, #7]
    b8a0:	2108      	movs	r1, #8
    b8a2:	430b      	orrs	r3, r1
    b8a4:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    b8a6:	2000      	movs	r0, #0
    b8a8:	e7db      	b.n	b862 <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    b8aa:	0093      	lsls	r3, r2, #2
    b8ac:	189b      	adds	r3, r3, r2
    b8ae:	0099      	lsls	r1, r3, #2
    b8b0:	4b2b      	ldr	r3, [pc, #172]	; (b960 <_usb_d_dev_ep_stall+0x150>)
    b8b2:	185b      	adds	r3, r3, r1
    b8b4:	3386      	adds	r3, #134	; 0x86
    b8b6:	781b      	ldrb	r3, [r3, #0]
    b8b8:	210f      	movs	r1, #15
    b8ba:	400b      	ands	r3, r1
    b8bc:	015d      	lsls	r5, r3, #5
    b8be:	2182      	movs	r1, #130	; 0x82
    b8c0:	05c9      	lsls	r1, r1, #23
    b8c2:	468c      	mov	ip, r1
    b8c4:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    b8c6:	2183      	movs	r1, #131	; 0x83
    b8c8:	0049      	lsls	r1, r1, #1
    b8ca:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b8cc:	39f6      	subs	r1, #246	; 0xf6
    b8ce:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b8d0:	2000      	movs	r0, #0
	if (!is_stalled) {
    b8d2:	420e      	tst	r6, r1
    b8d4:	d0c5      	beq.n	b862 <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    b8d6:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    b8d8:	3005      	adds	r0, #5
    b8da:	30ff      	adds	r0, #255	; 0xff
    b8dc:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    b8de:	2120      	movs	r1, #32
    b8e0:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    b8e2:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    b8e4:	015b      	lsls	r3, r3, #5
    b8e6:	4e21      	ldr	r6, [pc, #132]	; (b96c <_usb_d_dev_ep_stall+0x15c>)
    b8e8:	46b4      	mov	ip, r6
    b8ea:	4463      	add	r3, ip
    b8ec:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    b8ee:	2308      	movs	r3, #8
    b8f0:	33ff      	adds	r3, #255	; 0xff
    b8f2:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    b8f4:	420b      	tst	r3, r1
    b8f6:	d009      	beq.n	b90c <_usb_d_dev_ep_stall+0xfc>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    b8f8:	2308      	movs	r3, #8
    b8fa:	33ff      	adds	r3, #255	; 0xff
    b8fc:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    b8fe:	3b07      	subs	r3, #7
    b900:	3bff      	subs	r3, #255	; 0xff
    b902:	40a3      	lsls	r3, r4
    b904:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    b906:	2182      	movs	r1, #130	; 0x82
    b908:	0049      	lsls	r1, r1, #1
    b90a:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    b90c:	0093      	lsls	r3, r2, #2
    b90e:	189b      	adds	r3, r3, r2
    b910:	0099      	lsls	r1, r3, #2
    b912:	4b13      	ldr	r3, [pc, #76]	; (b960 <_usb_d_dev_ep_stall+0x150>)
    b914:	185b      	adds	r3, r3, r1
    b916:	3380      	adds	r3, #128	; 0x80
    b918:	79d9      	ldrb	r1, [r3, #7]
    b91a:	2307      	movs	r3, #7
    b91c:	400b      	ands	r3, r1
    b91e:	2b01      	cmp	r3, #1
    b920:	d00b      	beq.n	b93a <_usb_d_dev_ep_stall+0x12a>
		ept->flags.bits.is_stalled = 0;
    b922:	0093      	lsls	r3, r2, #2
    b924:	189a      	adds	r2, r3, r2
    b926:	0092      	lsls	r2, r2, #2
    b928:	4b0d      	ldr	r3, [pc, #52]	; (b960 <_usb_d_dev_ep_stall+0x150>)
    b92a:	189b      	adds	r3, r3, r2
    b92c:	3380      	adds	r3, #128	; 0x80
    b92e:	79da      	ldrb	r2, [r3, #7]
    b930:	2108      	movs	r1, #8
    b932:	438a      	bics	r2, r1
    b934:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b936:	2000      	movs	r0, #0
    b938:	e793      	b.n	b862 <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    b93a:	3306      	adds	r3, #6
    b93c:	33ff      	adds	r3, #255	; 0xff
    b93e:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b940:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    b942:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    b944:	4219      	tst	r1, r3
    b946:	d000      	beq.n	b94a <_usb_d_dev_ep_stall+0x13a>
    b948:	e78b      	b.n	b862 <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    b94a:	0093      	lsls	r3, r2, #2
    b94c:	189a      	adds	r2, r3, r2
    b94e:	0092      	lsls	r2, r2, #2
    b950:	4b03      	ldr	r3, [pc, #12]	; (b960 <_usb_d_dev_ep_stall+0x150>)
    b952:	189b      	adds	r3, r3, r2
    b954:	3380      	adds	r3, #128	; 0x80
    b956:	79da      	ldrb	r2, [r3, #7]
    b958:	2108      	movs	r1, #8
    b95a:	438a      	bics	r2, r1
    b95c:	71da      	strb	r2, [r3, #7]
    b95e:	e780      	b.n	b862 <_usb_d_dev_ep_stall+0x52>
    b960:	200004fc 	.word	0x200004fc
    b964:	41000100 	.word	0x41000100
    b968:	41000109 	.word	0x41000109
    b96c:	41000108 	.word	0x41000108

0000b970 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    b970:	b570      	push	{r4, r5, r6, lr}
    b972:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    b974:	230f      	movs	r3, #15
    b976:	4018      	ands	r0, r3
    b978:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    b97a:	4b16      	ldr	r3, [pc, #88]	; (b9d4 <_usb_d_dev_ep_read_req+0x64>)
    b97c:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    b97e:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    b980:	685b      	ldr	r3, [r3, #4]
    b982:	049b      	lsls	r3, r3, #18
    b984:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    b986:	2802      	cmp	r0, #2
    b988:	d81b      	bhi.n	b9c2 <_usb_d_dev_ep_read_req+0x52>
    b98a:	2d00      	cmp	r5, #0
    b98c:	d01c      	beq.n	b9c8 <_usb_d_dev_ep_read_req+0x58>
    b98e:	2382      	movs	r3, #130	; 0x82
    b990:	05db      	lsls	r3, r3, #23
    b992:	469c      	mov	ip, r3
    b994:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    b996:	2380      	movs	r3, #128	; 0x80
    b998:	005b      	lsls	r3, r3, #1
    b99a:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    b99c:	2b11      	cmp	r3, #17
    b99e:	d116      	bne.n	b9ce <_usb_d_dev_ep_read_req+0x5e>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    b9a0:	2308      	movs	r3, #8
    b9a2:	33ff      	adds	r3, #255	; 0xff
    b9a4:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    b9a6:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    b9a8:	06db      	lsls	r3, r3, #27
    b9aa:	d400      	bmi.n	b9ae <_usb_d_dev_ep_read_req+0x3e>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    b9ac:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    b9ae:	2208      	movs	r2, #8
    b9b0:	0028      	movs	r0, r5
    b9b2:	4b09      	ldr	r3, [pc, #36]	; (b9d8 <_usb_d_dev_ep_read_req+0x68>)
    b9b4:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    b9b6:	2210      	movs	r2, #16
    b9b8:	2308      	movs	r3, #8
    b9ba:	33ff      	adds	r3, #255	; 0xff
    b9bc:	54e2      	strb	r2, [r4, r3]
	return bytes;
    b9be:	0030      	movs	r0, r6
    b9c0:	e7f4      	b.n	b9ac <_usb_d_dev_ep_read_req+0x3c>
		return -USB_ERR_PARAM;
    b9c2:	2012      	movs	r0, #18
    b9c4:	4240      	negs	r0, r0
    b9c6:	e7f1      	b.n	b9ac <_usb_d_dev_ep_read_req+0x3c>
    b9c8:	2012      	movs	r0, #18
    b9ca:	4240      	negs	r0, r0
    b9cc:	e7ee      	b.n	b9ac <_usb_d_dev_ep_read_req+0x3c>
		return -USB_ERR_FUNC;
    b9ce:	2013      	movs	r0, #19
    b9d0:	4240      	negs	r0, r0
    b9d2:	e7eb      	b.n	b9ac <_usb_d_dev_ep_read_req+0x3c>
    b9d4:	200004fc 	.word	0x200004fc
    b9d8:	0000db25 	.word	0x0000db25

0000b9dc <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    b9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9de:	46de      	mov	lr, fp
    b9e0:	4657      	mov	r7, sl
    b9e2:	464e      	mov	r6, r9
    b9e4:	4645      	mov	r5, r8
    b9e6:	b5e0      	push	{r5, r6, r7, lr}
    b9e8:	b085      	sub	sp, #20
    b9ea:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    b9ec:	7a06      	ldrb	r6, [r0, #8]
    b9ee:	230f      	movs	r3, #15
    b9f0:	4033      	ands	r3, r6
    b9f2:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b9f4:	2b00      	cmp	r3, #0
    b9f6:	d100      	bne.n	b9fa <_usb_d_dev_ep_trans+0x1e>
    b9f8:	e0d3      	b.n	bba2 <_usb_d_dev_ep_trans+0x1c6>
    b9fa:	0018      	movs	r0, r3
    b9fc:	2e00      	cmp	r6, #0
    b9fe:	db39      	blt.n	ba74 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    ba00:	0004      	movs	r4, r0
    ba02:	4a73      	ldr	r2, [pc, #460]	; (bbd0 <_usb_d_dev_ep_trans+0x1f4>)
    ba04:	3260      	adds	r2, #96	; 0x60
    ba06:	1c41      	adds	r1, r0, #1
    ba08:	008d      	lsls	r5, r1, #2
    ba0a:	186d      	adds	r5, r5, r1
    ba0c:	00ad      	lsls	r5, r5, #2
    ba0e:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ba10:	0081      	lsls	r1, r0, #2
    ba12:	1809      	adds	r1, r1, r0
    ba14:	0089      	lsls	r1, r1, #2
    ba16:	1852      	adds	r2, r2, r1
    ba18:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    ba1a:	4a6e      	ldr	r2, [pc, #440]	; (bbd4 <_usb_d_dev_ep_trans+0x1f8>)
    ba1c:	4291      	cmp	r1, r2
    ba1e:	d02b      	beq.n	ba78 <_usb_d_dev_ep_trans+0x9c>
    ba20:	1e4f      	subs	r7, r1, #1
    ba22:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    ba24:	4642      	mov	r2, r8
    ba26:	6852      	ldr	r2, [r2, #4]
    ba28:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ba2a:	2b02      	cmp	r3, #2
    ba2c:	d900      	bls.n	ba30 <_usb_d_dev_ep_trans+0x54>
    ba2e:	e0a4      	b.n	bb7a <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    ba30:	4643      	mov	r3, r8
    ba32:	681b      	ldr	r3, [r3, #0]
    ba34:	4868      	ldr	r0, [pc, #416]	; (bbd8 <_usb_d_dev_ep_trans+0x1fc>)
    ba36:	4283      	cmp	r3, r0
    ba38:	d920      	bls.n	ba7c <_usb_d_dev_ep_trans+0xa0>
    ba3a:	1898      	adds	r0, r3, r2
    ba3c:	9001      	str	r0, [sp, #4]
    ba3e:	4867      	ldr	r0, [pc, #412]	; (bbdc <_usb_d_dev_ep_trans+0x200>)
    ba40:	4684      	mov	ip, r0
    ba42:	9801      	ldr	r0, [sp, #4]
    ba44:	4560      	cmp	r0, ip
    ba46:	d819      	bhi.n	ba7c <_usb_d_dev_ep_trans+0xa0>
    ba48:	079b      	lsls	r3, r3, #30
    ba4a:	d117      	bne.n	ba7c <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    ba4c:	2e00      	cmp	r6, #0
    ba4e:	db32      	blt.n	bab6 <_usb_d_dev_ep_trans+0xda>
    ba50:	4291      	cmp	r1, r2
    ba52:	d900      	bls.n	ba56 <_usb_d_dev_ep_trans+0x7a>
    ba54:	e0af      	b.n	bbb6 <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    ba56:	2f00      	cmp	r7, #0
    ba58:	d030      	beq.n	babc <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    ba5a:	00a3      	lsls	r3, r4, #2
    ba5c:	191b      	adds	r3, r3, r4
    ba5e:	009a      	lsls	r2, r3, #2
    ba60:	4b5b      	ldr	r3, [pc, #364]	; (bbd0 <_usb_d_dev_ep_trans+0x1f4>)
    ba62:	189b      	adds	r3, r3, r2
    ba64:	3380      	adds	r3, #128	; 0x80
    ba66:	681b      	ldr	r3, [r3, #0]
    ba68:	2b00      	cmp	r3, #0
    ba6a:	d100      	bne.n	ba6e <_usb_d_dev_ep_trans+0x92>
    ba6c:	e08b      	b.n	bb86 <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    ba6e:	2300      	movs	r3, #0
    ba70:	4699      	mov	r9, r3
    ba72:	e00f      	b.n	ba94 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    ba74:	1c98      	adds	r0, r3, #2
    ba76:	e7c3      	b.n	ba00 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ba78:	000f      	movs	r7, r1
    ba7a:	e7d3      	b.n	ba24 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    ba7c:	00a3      	lsls	r3, r4, #2
    ba7e:	191b      	adds	r3, r3, r4
    ba80:	009a      	lsls	r2, r3, #2
    ba82:	4b53      	ldr	r3, [pc, #332]	; (bbd0 <_usb_d_dev_ep_trans+0x1f4>)
    ba84:	189b      	adds	r3, r3, r2
    ba86:	3380      	adds	r3, #128	; 0x80
    ba88:	681b      	ldr	r3, [r3, #0]
    ba8a:	2b00      	cmp	r3, #0
    ba8c:	d100      	bne.n	ba90 <_usb_d_dev_ep_trans+0xb4>
    ba8e:	e077      	b.n	bb80 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    ba90:	2301      	movs	r3, #1
    ba92:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    ba94:	00a3      	lsls	r3, r4, #2
    ba96:	191b      	adds	r3, r3, r4
    ba98:	009a      	lsls	r2, r3, #2
    ba9a:	4b4d      	ldr	r3, [pc, #308]	; (bbd0 <_usb_d_dev_ep_trans+0x1f4>)
    ba9c:	189b      	adds	r3, r3, r2
    ba9e:	3380      	adds	r3, #128	; 0x80
    baa0:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    baa2:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    baa4:	071b      	lsls	r3, r3, #28
    baa6:	d50c      	bpl.n	bac2 <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    baa8:	b005      	add	sp, #20
    baaa:	bc3c      	pop	{r2, r3, r4, r5}
    baac:	4690      	mov	r8, r2
    baae:	4699      	mov	r9, r3
    bab0:	46a2      	mov	sl, r4
    bab2:	46ab      	mov	fp, r5
    bab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    bab6:	2300      	movs	r3, #0
    bab8:	4699      	mov	r9, r3
    baba:	e7eb      	b.n	ba94 <_usb_d_dev_ep_trans+0xb8>
    babc:	2300      	movs	r3, #0
    babe:	4699      	mov	r9, r3
    bac0:	e7e8      	b.n	ba94 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    bac2:	a803      	add	r0, sp, #12
    bac4:	4b46      	ldr	r3, [pc, #280]	; (bbe0 <_usb_d_dev_ep_trans+0x204>)
    bac6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    bac8:	00a3      	lsls	r3, r4, #2
    baca:	191b      	adds	r3, r3, r4
    bacc:	009a      	lsls	r2, r3, #2
    bace:	4b40      	ldr	r3, [pc, #256]	; (bbd0 <_usb_d_dev_ep_trans+0x1f4>)
    bad0:	189b      	adds	r3, r3, r2
    bad2:	3380      	adds	r3, #128	; 0x80
    bad4:	79db      	ldrb	r3, [r3, #7]
    bad6:	065b      	lsls	r3, r3, #25
    bad8:	d444      	bmi.n	bb64 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    bada:	00a3      	lsls	r3, r4, #2
    badc:	191b      	adds	r3, r3, r4
    bade:	009b      	lsls	r3, r3, #2
    bae0:	4a3b      	ldr	r2, [pc, #236]	; (bbd0 <_usb_d_dev_ep_trans+0x1f4>)
    bae2:	4693      	mov	fp, r2
    bae4:	449b      	add	fp, r3
    bae6:	2380      	movs	r3, #128	; 0x80
    bae8:	445b      	add	r3, fp
    baea:	469a      	mov	sl, r3
    baec:	79db      	ldrb	r3, [r3, #7]
    baee:	2240      	movs	r2, #64	; 0x40
    baf0:	4313      	orrs	r3, r2
    baf2:	4652      	mov	r2, sl
    baf4:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    baf6:	a803      	add	r0, sp, #12
    baf8:	4b3a      	ldr	r3, [pc, #232]	; (bbe4 <_usb_d_dev_ep_trans+0x208>)
    bafa:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    bafc:	465b      	mov	r3, fp
    bafe:	4642      	mov	r2, r8
    bb00:	6812      	ldr	r2, [r2, #0]
    bb02:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    bb04:	4642      	mov	r2, r8
    bb06:	6852      	ldr	r2, [r2, #4]
    bb08:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    bb0a:	2300      	movs	r3, #0
    bb0c:	465a      	mov	r2, fp
    bb0e:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    bb10:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    bb12:	01d2      	lsls	r2, r2, #7
    bb14:	4653      	mov	r3, sl
    bb16:	79d9      	ldrb	r1, [r3, #7]
    bb18:	237f      	movs	r3, #127	; 0x7f
    bb1a:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    bb1c:	4649      	mov	r1, r9
    bb1e:	0149      	lsls	r1, r1, #5
    bb20:	4313      	orrs	r3, r2
    bb22:	2220      	movs	r2, #32
    bb24:	4393      	bics	r3, r2
    bb26:	430b      	orrs	r3, r1
    bb28:	4652      	mov	r2, sl
    bb2a:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    bb2c:	4643      	mov	r3, r8
    bb2e:	7a5b      	ldrb	r3, [r3, #9]
    bb30:	2200      	movs	r2, #0
    bb32:	2b00      	cmp	r3, #0
    bb34:	d002      	beq.n	bb3c <_usb_d_dev_ep_trans+0x160>
    bb36:	427a      	negs	r2, r7
    bb38:	417a      	adcs	r2, r7
    bb3a:	b2d2      	uxtb	r2, r2
    bb3c:	00a3      	lsls	r3, r4, #2
    bb3e:	191c      	adds	r4, r3, r4
    bb40:	00a4      	lsls	r4, r4, #2
    bb42:	4b23      	ldr	r3, [pc, #140]	; (bbd0 <_usb_d_dev_ep_trans+0x1f4>)
    bb44:	191b      	adds	r3, r3, r4
    bb46:	3380      	adds	r3, #128	; 0x80
    bb48:	0112      	lsls	r2, r2, #4
    bb4a:	79df      	ldrb	r7, [r3, #7]
    bb4c:	2110      	movs	r1, #16
    bb4e:	438f      	bics	r7, r1
    bb50:	4317      	orrs	r7, r2
    bb52:	71df      	strb	r7, [r3, #7]
	if (dir) {
    bb54:	2e00      	cmp	r6, #0
    bb56:	db0a      	blt.n	bb6e <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    bb58:	2100      	movs	r1, #0
    bb5a:	0028      	movs	r0, r5
    bb5c:	4b22      	ldr	r3, [pc, #136]	; (bbe8 <_usb_d_dev_ep_trans+0x20c>)
    bb5e:	4798      	blx	r3
	return ERR_NONE;
    bb60:	2000      	movs	r0, #0
    bb62:	e7a1      	b.n	baa8 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    bb64:	a803      	add	r0, sp, #12
    bb66:	4b1f      	ldr	r3, [pc, #124]	; (bbe4 <_usb_d_dev_ep_trans+0x208>)
    bb68:	4798      	blx	r3
		return USB_BUSY;
    bb6a:	2001      	movs	r0, #1
    bb6c:	e79c      	b.n	baa8 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    bb6e:	2100      	movs	r1, #0
    bb70:	0028      	movs	r0, r5
    bb72:	4b1e      	ldr	r3, [pc, #120]	; (bbec <_usb_d_dev_ep_trans+0x210>)
    bb74:	4798      	blx	r3
	return ERR_NONE;
    bb76:	2000      	movs	r0, #0
    bb78:	e796      	b.n	baa8 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    bb7a:	2012      	movs	r0, #18
    bb7c:	4240      	negs	r0, r0
    bb7e:	e793      	b.n	baa8 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    bb80:	2013      	movs	r0, #19
    bb82:	4240      	negs	r0, r0
    bb84:	e790      	b.n	baa8 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    bb86:	2012      	movs	r0, #18
    bb88:	4240      	negs	r0, r0
    bb8a:	e78d      	b.n	baa8 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    bb8c:	2013      	movs	r0, #19
    bb8e:	4240      	negs	r0, r0
    bb90:	e78a      	b.n	baa8 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    bb92:	4643      	mov	r3, r8
    bb94:	685a      	ldr	r2, [r3, #4]
    bb96:	0597      	lsls	r7, r2, #22
    bb98:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    bb9a:	4d0d      	ldr	r5, [pc, #52]	; (bbd0 <_usb_d_dev_ep_trans+0x1f4>)
    bb9c:	3574      	adds	r5, #116	; 0x74
    bb9e:	2400      	movs	r4, #0
    bba0:	e746      	b.n	ba30 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    bba2:	4a0b      	ldr	r2, [pc, #44]	; (bbd0 <_usb_d_dev_ep_trans+0x1f4>)
    bba4:	3260      	adds	r2, #96	; 0x60
    bba6:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    bba8:	4a0a      	ldr	r2, [pc, #40]	; (bbd4 <_usb_d_dev_ep_trans+0x1f8>)
    bbaa:	4291      	cmp	r1, r2
    bbac:	d0f1      	beq.n	bb92 <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    bbae:	4d08      	ldr	r5, [pc, #32]	; (bbd0 <_usb_d_dev_ep_trans+0x1f4>)
    bbb0:	3574      	adds	r5, #116	; 0x74
    bbb2:	2400      	movs	r4, #0
    bbb4:	e734      	b.n	ba20 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    bbb6:	00a3      	lsls	r3, r4, #2
    bbb8:	191b      	adds	r3, r3, r4
    bbba:	009a      	lsls	r2, r3, #2
    bbbc:	4b04      	ldr	r3, [pc, #16]	; (bbd0 <_usb_d_dev_ep_trans+0x1f4>)
    bbbe:	189b      	adds	r3, r3, r2
    bbc0:	3380      	adds	r3, #128	; 0x80
    bbc2:	681b      	ldr	r3, [r3, #0]
    bbc4:	2b00      	cmp	r3, #0
    bbc6:	d0e1      	beq.n	bb8c <_usb_d_dev_ep_trans+0x1b0>
    bbc8:	2301      	movs	r3, #1
    bbca:	4699      	mov	r9, r3
    bbcc:	e762      	b.n	ba94 <_usb_d_dev_ep_trans+0xb8>
    bbce:	46c0      	nop			; (mov r8, r8)
    bbd0:	200004fc 	.word	0x200004fc
    bbd4:	000003ff 	.word	0x000003ff
    bbd8:	1fffffff 	.word	0x1fffffff
    bbdc:	20009fff 	.word	0x20009fff
    bbe0:	00008791 	.word	0x00008791
    bbe4:	0000879f 	.word	0x0000879f
    bbe8:	0000af9d 	.word	0x0000af9d
    bbec:	0000adf5 	.word	0x0000adf5

0000bbf0 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    bbf0:	1e0b      	subs	r3, r1, #0
    bbf2:	d006      	beq.n	bc02 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    bbf4:	2801      	cmp	r0, #1
    bbf6:	d006      	beq.n	bc06 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    bbf8:	2800      	cmp	r0, #0
    bbfa:	d101      	bne.n	bc00 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    bbfc:	4a03      	ldr	r2, [pc, #12]	; (bc0c <_usb_d_dev_register_callback+0x1c>)
    bbfe:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    bc00:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    bc02:	4b03      	ldr	r3, [pc, #12]	; (bc10 <_usb_d_dev_register_callback+0x20>)
    bc04:	e7f6      	b.n	bbf4 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    bc06:	4a01      	ldr	r2, [pc, #4]	; (bc0c <_usb_d_dev_register_callback+0x1c>)
    bc08:	6653      	str	r3, [r2, #100]	; 0x64
    bc0a:	e7f9      	b.n	bc00 <_usb_d_dev_register_callback+0x10>
    bc0c:	200004fc 	.word	0x200004fc
    bc10:	0000ab5d 	.word	0x0000ab5d

0000bc14 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    bc14:	1e0b      	subs	r3, r1, #0
    bc16:	d008      	beq.n	bc2a <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    bc18:	2800      	cmp	r0, #0
    bc1a:	d008      	beq.n	bc2e <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    bc1c:	2801      	cmp	r0, #1
    bc1e:	d009      	beq.n	bc34 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    bc20:	2802      	cmp	r0, #2
    bc22:	d106      	bne.n	bc32 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    bc24:	4a05      	ldr	r2, [pc, #20]	; (bc3c <_usb_d_dev_register_ep_callback+0x28>)
    bc26:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    bc28:	e003      	b.n	bc32 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    bc2a:	4b05      	ldr	r3, [pc, #20]	; (bc40 <_usb_d_dev_register_ep_callback+0x2c>)
    bc2c:	e7f4      	b.n	bc18 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    bc2e:	4a03      	ldr	r2, [pc, #12]	; (bc3c <_usb_d_dev_register_ep_callback+0x28>)
    bc30:	6693      	str	r3, [r2, #104]	; 0x68
}
    bc32:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    bc34:	4a01      	ldr	r2, [pc, #4]	; (bc3c <_usb_d_dev_register_ep_callback+0x28>)
    bc36:	66d3      	str	r3, [r2, #108]	; 0x6c
    bc38:	e7fb      	b.n	bc32 <_usb_d_dev_register_ep_callback+0x1e>
    bc3a:	46c0      	nop			; (mov r8, r8)
    bc3c:	200004fc 	.word	0x200004fc
    bc40:	0000ab5d 	.word	0x0000ab5d

0000bc44 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    bc46:	2382      	movs	r3, #130	; 0x82
    bc48:	05db      	lsls	r3, r3, #23
    bc4a:	8c1e      	ldrh	r6, [r3, #32]
    bc4c:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    bc4e:	2e00      	cmp	r6, #0
    bc50:	d003      	beq.n	bc5a <USB_Handler+0x16>
    bc52:	4c83      	ldr	r4, [pc, #524]	; (be60 <USB_Handler+0x21c>)
    bc54:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    bc56:	2500      	movs	r5, #0
    bc58:	e0c0      	b.n	bddc <USB_Handler+0x198>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    bc5a:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    bc5c:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    bc5e:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    bc60:	075a      	lsls	r2, r3, #29
    bc62:	d418      	bmi.n	bc96 <USB_Handler+0x52>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    bc64:	059a      	lsls	r2, r3, #22
    bc66:	d41e      	bmi.n	bca6 <USB_Handler+0x62>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    bc68:	061a      	lsls	r2, r3, #24
    bc6a:	d441      	bmi.n	bcf0 <USB_Handler+0xac>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    bc6c:	2270      	movs	r2, #112	; 0x70
    bc6e:	421a      	tst	r2, r3
    bc70:	d148      	bne.n	bd04 <USB_Handler+0xc0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    bc72:	071a      	lsls	r2, r3, #28
    bc74:	d464      	bmi.n	bd40 <USB_Handler+0xfc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    bc76:	07db      	lsls	r3, r3, #31
    bc78:	d5eb      	bpl.n	bc52 <USB_Handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bc7a:	2382      	movs	r3, #130	; 0x82
    bc7c:	05db      	lsls	r3, r3, #23
    bc7e:	4a79      	ldr	r2, [pc, #484]	; (be64 <USB_Handler+0x220>)
    bc80:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    bc82:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    bc84:	3a92      	subs	r2, #146	; 0x92
    bc86:	3aff      	subs	r2, #255	; 0xff
    bc88:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    bc8a:	4b75      	ldr	r3, [pc, #468]	; (be60 <USB_Handler+0x21c>)
    bc8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    bc8e:	2100      	movs	r1, #0
    bc90:	2004      	movs	r0, #4
    bc92:	4798      	blx	r3
    bc94:	e006      	b.n	bca4 <USB_Handler+0x60>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bc96:	2204      	movs	r2, #4
    bc98:	2382      	movs	r3, #130	; 0x82
    bc9a:	05db      	lsls	r3, r3, #23
    bc9c:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    bc9e:	4b70      	ldr	r3, [pc, #448]	; (be60 <USB_Handler+0x21c>)
    bca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    bca2:	4798      	blx	r3

	_usb_d_dev_handler();
}
    bca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bca6:	2382      	movs	r3, #130	; 0x82
    bca8:	05db      	lsls	r3, r3, #23
    bcaa:	4a6e      	ldr	r2, [pc, #440]	; (be64 <USB_Handler+0x220>)
    bcac:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    bcae:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    bcb0:	3a92      	subs	r2, #146	; 0x92
    bcb2:	3aff      	subs	r2, #255	; 0xff
    bcb4:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    bcb6:	4b6a      	ldr	r3, [pc, #424]	; (be60 <USB_Handler+0x21c>)
    bcb8:	891b      	ldrh	r3, [r3, #8]
    bcba:	071b      	lsls	r3, r3, #28
    bcbc:	0f1b      	lsrs	r3, r3, #28
    bcbe:	2b03      	cmp	r3, #3
    bcc0:	d00c      	beq.n	bcdc <USB_Handler+0x98>
    bcc2:	4b67      	ldr	r3, [pc, #412]	; (be60 <USB_Handler+0x21c>)
    bcc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    bcc6:	071b      	lsls	r3, r3, #28
    bcc8:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    bcca:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    bccc:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    bcce:	2b03      	cmp	r3, #3
    bcd0:	d005      	beq.n	bcde <USB_Handler+0x9a>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    bcd2:	4b63      	ldr	r3, [pc, #396]	; (be60 <USB_Handler+0x21c>)
    bcd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    bcd6:	2003      	movs	r0, #3
    bcd8:	4798      	blx	r3
    bcda:	e7e3      	b.n	bca4 <USB_Handler+0x60>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    bcdc:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    bcde:	0152      	lsls	r2, r2, #5
    bce0:	4b5f      	ldr	r3, [pc, #380]	; (be60 <USB_Handler+0x21c>)
    bce2:	189b      	adds	r3, r3, r2
    bce4:	8919      	ldrh	r1, [r3, #8]
    bce6:	0449      	lsls	r1, r1, #17
    bce8:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    bcea:	2200      	movs	r2, #0
    bcec:	811a      	strh	r2, [r3, #8]
    bcee:	e7f0      	b.n	bcd2 <USB_Handler+0x8e>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bcf0:	2280      	movs	r2, #128	; 0x80
    bcf2:	2382      	movs	r3, #130	; 0x82
    bcf4:	05db      	lsls	r3, r3, #23
    bcf6:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    bcf8:	4b59      	ldr	r3, [pc, #356]	; (be60 <USB_Handler+0x21c>)
    bcfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    bcfc:	2100      	movs	r1, #0
    bcfe:	2005      	movs	r0, #5
    bd00:	4798      	blx	r3
    bd02:	e7cf      	b.n	bca4 <USB_Handler+0x60>
    bd04:	2382      	movs	r3, #130	; 0x82
    bd06:	05db      	lsls	r3, r3, #23
    bd08:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    bd0a:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    bd0c:	4a55      	ldr	r2, [pc, #340]	; (be64 <USB_Handler+0x220>)
    bd0e:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRL.reg;
    bd10:	4b55      	ldr	r3, [pc, #340]	; (be68 <USB_Handler+0x224>)
    bd12:	8b1b      	ldrh	r3, [r3, #24]
	if (hri_oscctrl_get_DFLLCTRL_MODE_bit(OSCCTRL)) {
    bd14:	075b      	lsls	r3, r3, #29
    bd16:	d50c      	bpl.n	bd32 <USB_Handler+0xee>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    bd18:	4953      	ldr	r1, [pc, #332]	; (be68 <USB_Handler+0x224>)
	tmp &= mask;
    bd1a:	2290      	movs	r2, #144	; 0x90
    bd1c:	0112      	lsls	r2, r2, #4
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    bd1e:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    bd20:	4013      	ands	r3, r2
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    bd22:	4293      	cmp	r3, r2
    bd24:	d1fb      	bne.n	bd1e <USB_Handler+0xda>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    bd26:	4b4e      	ldr	r3, [pc, #312]	; (be60 <USB_Handler+0x21c>)
    bd28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    bd2a:	2100      	movs	r1, #0
    bd2c:	2002      	movs	r0, #2
    bd2e:	4798      	blx	r3
    bd30:	e7b8      	b.n	bca4 <USB_Handler+0x60>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    bd32:	494d      	ldr	r1, [pc, #308]	; (be68 <USB_Handler+0x224>)
	tmp &= mask;
    bd34:	2280      	movs	r2, #128	; 0x80
    bd36:	0052      	lsls	r2, r2, #1
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    bd38:	68cb      	ldr	r3, [r1, #12]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    bd3a:	4213      	tst	r3, r2
    bd3c:	d0fc      	beq.n	bd38 <USB_Handler+0xf4>
    bd3e:	e7f2      	b.n	bd26 <USB_Handler+0xe2>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    bd40:	2382      	movs	r3, #130	; 0x82
    bd42:	05db      	lsls	r3, r3, #23
    bd44:	2100      	movs	r1, #0
    bd46:	2280      	movs	r2, #128	; 0x80
    bd48:	0052      	lsls	r2, r2, #1
    bd4a:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bd4c:	3af8      	subs	r2, #248	; 0xf8
    bd4e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    bd50:	3268      	adds	r2, #104	; 0x68
    bd52:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    bd54:	4a43      	ldr	r2, [pc, #268]	; (be64 <USB_Handler+0x220>)
    bd56:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    bd58:	4b44      	ldr	r3, [pc, #272]	; (be6c <USB_Handler+0x228>)
    bd5a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    bd5c:	4b40      	ldr	r3, [pc, #256]	; (be60 <USB_Handler+0x21c>)
    bd5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    bd60:	2100      	movs	r1, #0
    bd62:	2001      	movs	r0, #1
    bd64:	4798      	blx	r3
    bd66:	e79d      	b.n	bca4 <USB_Handler+0x60>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    bd68:	06cb      	lsls	r3, r1, #27
    bd6a:	d407      	bmi.n	bd7c <USB_Handler+0x138>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    bd6c:	064b      	lsls	r3, r1, #25
    bd6e:	d408      	bmi.n	bd82 <USB_Handler+0x13e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    bd70:	068b      	lsls	r3, r1, #26
    bd72:	d52e      	bpl.n	bdd2 <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 0);
    bd74:	2100      	movs	r1, #0
    bd76:	4b3e      	ldr	r3, [pc, #248]	; (be70 <USB_Handler+0x22c>)
    bd78:	4798      	blx	r3
    bd7a:	e02a      	b.n	bdd2 <USB_Handler+0x18e>
		_usb_d_dev_handle_setup(ept);
    bd7c:	4b3d      	ldr	r3, [pc, #244]	; (be74 <USB_Handler+0x230>)
    bd7e:	4798      	blx	r3
    bd80:	e027      	b.n	bdd2 <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 1);
    bd82:	2101      	movs	r1, #1
    bd84:	4b3a      	ldr	r3, [pc, #232]	; (be70 <USB_Handler+0x22c>)
    bd86:	4798      	blx	r3
    bd88:	e023      	b.n	bdd2 <USB_Handler+0x18e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    bd8a:	064b      	lsls	r3, r1, #25
    bd8c:	d40e      	bmi.n	bdac <USB_Handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    bd8e:	070b      	lsls	r3, r1, #28
    bd90:	d410      	bmi.n	bdb4 <USB_Handler+0x170>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    bd92:	078b      	lsls	r3, r1, #30
    bd94:	d412      	bmi.n	bdbc <USB_Handler+0x178>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    bd96:	2307      	movs	r3, #7
    bd98:	401a      	ands	r2, r3
    bd9a:	2a01      	cmp	r2, #1
    bd9c:	d119      	bne.n	bdd2 <USB_Handler+0x18e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    bd9e:	074b      	lsls	r3, r1, #29
    bda0:	d410      	bmi.n	bdc4 <USB_Handler+0x180>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    bda2:	06cb      	lsls	r3, r1, #27
    bda4:	d515      	bpl.n	bdd2 <USB_Handler+0x18e>
			_usb_d_dev_handle_setup(ept);
    bda6:	4b33      	ldr	r3, [pc, #204]	; (be74 <USB_Handler+0x230>)
    bda8:	4798      	blx	r3
    bdaa:	e012      	b.n	bdd2 <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 1);
    bdac:	2101      	movs	r1, #1
    bdae:	4b30      	ldr	r3, [pc, #192]	; (be70 <USB_Handler+0x22c>)
    bdb0:	4798      	blx	r3
    bdb2:	e00e      	b.n	bdd2 <USB_Handler+0x18e>
		_usb_d_dev_handle_trfail(ept, 1);
    bdb4:	2101      	movs	r1, #1
    bdb6:	4b30      	ldr	r3, [pc, #192]	; (be78 <USB_Handler+0x234>)
    bdb8:	4798      	blx	r3
    bdba:	e00a      	b.n	bdd2 <USB_Handler+0x18e>
		_usb_d_dev_in_next(ept, true);
    bdbc:	2101      	movs	r1, #1
    bdbe:	4b2f      	ldr	r3, [pc, #188]	; (be7c <USB_Handler+0x238>)
    bdc0:	4798      	blx	r3
    bdc2:	e006      	b.n	bdd2 <USB_Handler+0x18e>
			_usb_d_dev_handle_trfail(ept, 0);
    bdc4:	2100      	movs	r1, #0
    bdc6:	4b2c      	ldr	r3, [pc, #176]	; (be78 <USB_Handler+0x234>)
    bdc8:	4798      	blx	r3
    bdca:	e002      	b.n	bdd2 <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 0);
    bdcc:	2100      	movs	r1, #0
    bdce:	4b28      	ldr	r3, [pc, #160]	; (be70 <USB_Handler+0x22c>)
    bdd0:	4798      	blx	r3
    bdd2:	3501      	adds	r5, #1
    bdd4:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    bdd6:	2d09      	cmp	r5, #9
    bdd8:	d100      	bne.n	bddc <USB_Handler+0x198>
    bdda:	e763      	b.n	bca4 <USB_Handler+0x60>
    bddc:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    bdde:	7ca1      	ldrb	r1, [r4, #18]
    bde0:	29ff      	cmp	r1, #255	; 0xff
    bde2:	d0f6      	beq.n	bdd2 <USB_Handler+0x18e>
	if (!(epint & (1u << epn))) {
    bde4:	230f      	movs	r3, #15
    bde6:	400b      	ands	r3, r1
    bde8:	2101      	movs	r1, #1
    bdea:	4099      	lsls	r1, r3
    bdec:	420e      	tst	r6, r1
    bdee:	d0f0      	beq.n	bdd2 <USB_Handler+0x18e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    bdf0:	0159      	lsls	r1, r3, #5
    bdf2:	4f23      	ldr	r7, [pc, #140]	; (be80 <USB_Handler+0x23c>)
    bdf4:	46bc      	mov	ip, r7
    bdf6:	4461      	add	r1, ip
    bdf8:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    bdfa:	015b      	lsls	r3, r3, #5
    bdfc:	4f21      	ldr	r7, [pc, #132]	; (be84 <USB_Handler+0x240>)
    bdfe:	46bc      	mov	ip, r7
    be00:	4463      	add	r3, ip
    be02:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    be04:	4019      	ands	r1, r3
	if (flags) {
    be06:	d0e4      	beq.n	bdd2 <USB_Handler+0x18e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    be08:	00ab      	lsls	r3, r5, #2
    be0a:	195a      	adds	r2, r3, r5
    be0c:	0092      	lsls	r2, r2, #2
    be0e:	4b14      	ldr	r3, [pc, #80]	; (be60 <USB_Handler+0x21c>)
    be10:	469c      	mov	ip, r3
    be12:	4462      	add	r2, ip
    be14:	3270      	adds	r2, #112	; 0x70
    be16:	7dd2      	ldrb	r2, [r2, #23]
    be18:	2347      	movs	r3, #71	; 0x47
    be1a:	4013      	ands	r3, r2
    be1c:	2b01      	cmp	r3, #1
    be1e:	d0a3      	beq.n	bd68 <USB_Handler+0x124>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    be20:	b253      	sxtb	r3, r2
    be22:	2b00      	cmp	r3, #0
    be24:	dbb1      	blt.n	bd8a <USB_Handler+0x146>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    be26:	068b      	lsls	r3, r1, #26
    be28:	d4d0      	bmi.n	bdcc <USB_Handler+0x188>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    be2a:	074b      	lsls	r3, r1, #29
    be2c:	d40c      	bmi.n	be48 <USB_Handler+0x204>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    be2e:	07cb      	lsls	r3, r1, #31
    be30:	d40e      	bmi.n	be50 <USB_Handler+0x20c>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    be32:	2307      	movs	r3, #7
    be34:	401a      	ands	r2, r3
    be36:	2a01      	cmp	r2, #1
    be38:	d1cb      	bne.n	bdd2 <USB_Handler+0x18e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    be3a:	070b      	lsls	r3, r1, #28
    be3c:	d40c      	bmi.n	be58 <USB_Handler+0x214>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    be3e:	06cb      	lsls	r3, r1, #27
    be40:	d5c7      	bpl.n	bdd2 <USB_Handler+0x18e>
			_usb_d_dev_handle_setup(ept);
    be42:	4b0c      	ldr	r3, [pc, #48]	; (be74 <USB_Handler+0x230>)
    be44:	4798      	blx	r3
    be46:	e7c4      	b.n	bdd2 <USB_Handler+0x18e>
		_usb_d_dev_handle_trfail(ept, 0);
    be48:	2100      	movs	r1, #0
    be4a:	4b0b      	ldr	r3, [pc, #44]	; (be78 <USB_Handler+0x234>)
    be4c:	4798      	blx	r3
    be4e:	e7c0      	b.n	bdd2 <USB_Handler+0x18e>
		_usb_d_dev_out_next(ept, true);
    be50:	2101      	movs	r1, #1
    be52:	4b0d      	ldr	r3, [pc, #52]	; (be88 <USB_Handler+0x244>)
    be54:	4798      	blx	r3
    be56:	e7bc      	b.n	bdd2 <USB_Handler+0x18e>
			_usb_d_dev_handle_trfail(ept, 1);
    be58:	2101      	movs	r1, #1
    be5a:	4b07      	ldr	r3, [pc, #28]	; (be78 <USB_Handler+0x234>)
    be5c:	4798      	blx	r3
    be5e:	e7b8      	b.n	bdd2 <USB_Handler+0x18e>
    be60:	200004fc 	.word	0x200004fc
    be64:	00000201 	.word	0x00000201
    be68:	40000c00 	.word	0x40000c00
    be6c:	0000adb1 	.word	0x0000adb1
    be70:	0000abed 	.word	0x0000abed
    be74:	0000ab61 	.word	0x0000ab61
    be78:	0000acb1 	.word	0x0000acb1
    be7c:	0000adf5 	.word	0x0000adf5
    be80:	41000100 	.word	0x41000100
    be84:	41000109 	.word	0x41000109
    be88:	0000af9d 	.word	0x0000af9d

0000be8c <getSensorData>:
//#define DeviceNumber 37
#define DeviceNumber 61
#define PERIOD 60 //u sekundama

void getSensorData(sensor_data *sd)
{
    be8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    be8e:	46de      	mov	lr, fp
    be90:	4657      	mov	r7, sl
    be92:	b580      	push	{r7, lr}
    be94:	b095      	sub	sp, #84	; 0x54
    be96:	0004      	movs	r4, r0
	char str[64];
	//SHTC3
	SHTC3_update();
    be98:	4b2f      	ldr	r3, [pc, #188]	; (bf58 <getSensorData+0xcc>)
    be9a:	4798      	blx	r3
	sd -> shtc3_hum = SHTC3_raw2Percent() * 100;
    be9c:	4b2f      	ldr	r3, [pc, #188]	; (bf5c <getSensorData+0xd0>)
    be9e:	4798      	blx	r3
    bea0:	4e2f      	ldr	r6, [pc, #188]	; (bf60 <getSensorData+0xd4>)
    bea2:	4930      	ldr	r1, [pc, #192]	; (bf64 <getSensorData+0xd8>)
    bea4:	47b0      	blx	r6
    bea6:	4d30      	ldr	r5, [pc, #192]	; (bf68 <getSensorData+0xdc>)
    bea8:	47a8      	blx	r5
    beaa:	6020      	str	r0, [r4, #0]
	sd -> shtc3_temp = SHTC3_raw2DegC() * 100;
    beac:	4b2f      	ldr	r3, [pc, #188]	; (bf6c <getSensorData+0xe0>)
    beae:	4798      	blx	r3
    beb0:	492c      	ldr	r1, [pc, #176]	; (bf64 <getSensorData+0xd8>)
    beb2:	47b0      	blx	r6
    beb4:	47a8      	blx	r5
    beb6:	0005      	movs	r5, r0
    beb8:	6060      	str	r0, [r4, #4]
	sprintf(str, "SHTC3 ->\tT = %d.%d C\tH = %d.%d \%\r\n", sd -> shtc3_temp / 100, sd -> shtc3_temp % 100, sd -> shtc3_hum / 100, sd -> shtc3_hum % 100);
    beba:	6823      	ldr	r3, [r4, #0]
    bebc:	9302      	str	r3, [sp, #8]
    bebe:	4e2c      	ldr	r6, [pc, #176]	; (bf70 <getSensorData+0xe4>)
    bec0:	2164      	movs	r1, #100	; 0x64
    bec2:	47b0      	blx	r6
    bec4:	9103      	str	r1, [sp, #12]
    bec6:	4f2b      	ldr	r7, [pc, #172]	; (bf74 <getSensorData+0xe8>)
    bec8:	2164      	movs	r1, #100	; 0x64
    beca:	0028      	movs	r0, r5
    becc:	47b8      	blx	r7
    bece:	0005      	movs	r5, r0
    bed0:	2164      	movs	r1, #100	; 0x64
    bed2:	9802      	ldr	r0, [sp, #8]
    bed4:	47b0      	blx	r6
    bed6:	9101      	str	r1, [sp, #4]
    bed8:	2164      	movs	r1, #100	; 0x64
    beda:	9802      	ldr	r0, [sp, #8]
    bedc:	47b8      	blx	r7
    bede:	9000      	str	r0, [sp, #0]
    bee0:	9b03      	ldr	r3, [sp, #12]
    bee2:	002a      	movs	r2, r5
    bee4:	4924      	ldr	r1, [pc, #144]	; (bf78 <getSensorData+0xec>)
    bee6:	a804      	add	r0, sp, #16
    bee8:	4d24      	ldr	r5, [pc, #144]	; (bf7c <getSensorData+0xf0>)
    beea:	47a8      	blx	r5
	usbUARTputString(str);
    beec:	a804      	add	r0, sp, #16
    beee:	4f24      	ldr	r7, [pc, #144]	; (bf80 <getSensorData+0xf4>)
    bef0:	47b8      	blx	r7
		
	//BMP280
	bmp280_measure(&(sd -> bmp280_temp), &(sd -> bmp280_pres));
    bef2:	0021      	movs	r1, r4
    bef4:	310c      	adds	r1, #12
    bef6:	0020      	movs	r0, r4
    bef8:	3008      	adds	r0, #8
    befa:	4b22      	ldr	r3, [pc, #136]	; (bf84 <getSensorData+0xf8>)
    befc:	4798      	blx	r3
	sprintf(str, "BMP280 ->\tT = %d.%d C\tP = %d.%d mBar\r\n", sd -> bmp280_temp / 100, sd -> bmp280_temp % 100, sd -> bmp280_pres / 100, sd -> bmp280_pres % 100);
    befe:	68a6      	ldr	r6, [r4, #8]
    bf00:	68e3      	ldr	r3, [r4, #12]
    bf02:	9302      	str	r3, [sp, #8]
    bf04:	4a20      	ldr	r2, [pc, #128]	; (bf88 <getSensorData+0xfc>)
    bf06:	4693      	mov	fp, r2
    bf08:	2164      	movs	r1, #100	; 0x64
    bf0a:	0030      	movs	r0, r6
    bf0c:	4790      	blx	r2
    bf0e:	9103      	str	r1, [sp, #12]
    bf10:	4a1e      	ldr	r2, [pc, #120]	; (bf8c <getSensorData+0x100>)
    bf12:	4692      	mov	sl, r2
    bf14:	2164      	movs	r1, #100	; 0x64
    bf16:	0030      	movs	r0, r6
    bf18:	4790      	blx	r2
    bf1a:	0006      	movs	r6, r0
    bf1c:	2164      	movs	r1, #100	; 0x64
    bf1e:	9802      	ldr	r0, [sp, #8]
    bf20:	47d8      	blx	fp
    bf22:	9101      	str	r1, [sp, #4]
    bf24:	2164      	movs	r1, #100	; 0x64
    bf26:	9802      	ldr	r0, [sp, #8]
    bf28:	47d0      	blx	sl
    bf2a:	9000      	str	r0, [sp, #0]
    bf2c:	9b03      	ldr	r3, [sp, #12]
    bf2e:	0032      	movs	r2, r6
    bf30:	4917      	ldr	r1, [pc, #92]	; (bf90 <getSensorData+0x104>)
    bf32:	a804      	add	r0, sp, #16
    bf34:	47a8      	blx	r5
	usbUARTputString(str);
    bf36:	a804      	add	r0, sp, #16
    bf38:	47b8      	blx	r7
		
	//BH1750FVI
	sd -> lum = BH1750FVI_GetLightIntensity();
    bf3a:	4b16      	ldr	r3, [pc, #88]	; (bf94 <getSensorData+0x108>)
    bf3c:	4798      	blx	r3
    bf3e:	0002      	movs	r2, r0
    bf40:	6120      	str	r0, [r4, #16]
	sprintf(str, "BH1750FVI ->\tL = %ld lux\r\n\r\n", sd -> lum);
    bf42:	4915      	ldr	r1, [pc, #84]	; (bf98 <getSensorData+0x10c>)
    bf44:	a804      	add	r0, sp, #16
    bf46:	47a8      	blx	r5
	usbUARTputString(str);
    bf48:	a804      	add	r0, sp, #16
    bf4a:	47b8      	blx	r7
}
    bf4c:	b015      	add	sp, #84	; 0x54
    bf4e:	bc0c      	pop	{r2, r3}
    bf50:	4692      	mov	sl, r2
    bf52:	469b      	mov	fp, r3
    bf54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf56:	46c0      	nop			; (mov r8, r8)
    bf58:	000081d9 	.word	0x000081d9
    bf5c:	00008385 	.word	0x00008385
    bf60:	0000d28d 	.word	0x0000d28d
    bf64:	42c80000 	.word	0x42c80000
    bf68:	0000cfcd 	.word	0x0000cfcd
    bf6c:	00008345 	.word	0x00008345
    bf70:	0000cded 	.word	0x0000cded
    bf74:	0000cce1 	.word	0x0000cce1
    bf78:	0000ea84 	.word	0x0000ea84
    bf7c:	0000dce1 	.word	0x0000dce1
    bf80:	00008489 	.word	0x00008489
    bf84:	000071a5 	.word	0x000071a5
    bf88:	0000cfc1 	.word	0x0000cfc1
    bf8c:	0000cdf5 	.word	0x0000cdf5
    bf90:	0000eaa8 	.word	0x0000eaa8
    bf94:	000068d1 	.word	0x000068d1
    bf98:	0000ead0 	.word	0x0000ead0

0000bf9c <echoTest>:
		
	delay(5);
}

void echoTest(uint8_t protocol, char *payload)
{
    bf9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf9e:	4c19      	ldr	r4, [pc, #100]	; (c004 <echoTest+0x68>)
    bfa0:	44a5      	add	sp, r4
    bfa2:	0005      	movs	r5, r0
    bfa4:	9103      	str	r1, [sp, #12]
	char str[512], response[512];

	sprintf(str, "Slanje podataka...\r\n");
    bfa6:	ac84      	add	r4, sp, #528	; 0x210
    bfa8:	4b17      	ldr	r3, [pc, #92]	; (c008 <echoTest+0x6c>)
    bfaa:	0022      	movs	r2, r4
    bfac:	cbc1      	ldmia	r3!, {r0, r6, r7}
    bfae:	c2c1      	stmia	r2!, {r0, r6, r7}
    bfb0:	cb41      	ldmia	r3!, {r0, r6}
    bfb2:	c241      	stmia	r2!, {r0, r6}
    bfb4:	781b      	ldrb	r3, [r3, #0]
    bfb6:	7013      	strb	r3, [r2, #0]
	usbUARTputString(str);
    bfb8:	0020      	movs	r0, r4
    bfba:	4e14      	ldr	r6, [pc, #80]	; (c00c <echoTest+0x70>)
    bfbc:	47b0      	blx	r6

	char socket = BC68_openSocket(1, protocol);
    bfbe:	0029      	movs	r1, r5
    bfc0:	2001      	movs	r0, #1
    bfc2:	4b13      	ldr	r3, [pc, #76]	; (c010 <echoTest+0x74>)
    bfc4:	4798      	blx	r3
    bfc6:	0007      	movs	r7, r0
	int16_t rxBytes = BC68_tx(protocol, ServerIP, ServerPort, payload, strlen(payload), socket);
    bfc8:	9803      	ldr	r0, [sp, #12]
    bfca:	4b12      	ldr	r3, [pc, #72]	; (c014 <echoTest+0x78>)
    bfcc:	4798      	blx	r3
    bfce:	9701      	str	r7, [sp, #4]
    bfd0:	b280      	uxth	r0, r0
    bfd2:	9000      	str	r0, [sp, #0]
    bfd4:	9b03      	ldr	r3, [sp, #12]
    bfd6:	4a10      	ldr	r2, [pc, #64]	; (c018 <echoTest+0x7c>)
    bfd8:	4910      	ldr	r1, [pc, #64]	; (c01c <echoTest+0x80>)
    bfda:	0028      	movs	r0, r5
    bfdc:	4d10      	ldr	r5, [pc, #64]	; (c020 <echoTest+0x84>)
    bfde:	47a8      	blx	r5
    bfe0:	0001      	movs	r1, r0
	BC68_rx(response, rxBytes, socket);
    bfe2:	003a      	movs	r2, r7
    bfe4:	a804      	add	r0, sp, #16
    bfe6:	4b0f      	ldr	r3, [pc, #60]	; (c024 <echoTest+0x88>)
    bfe8:	4798      	blx	r3
	sprintf(str, "Odgovor servera -> %s\r\n", response);
    bfea:	aa04      	add	r2, sp, #16
    bfec:	490e      	ldr	r1, [pc, #56]	; (c028 <echoTest+0x8c>)
    bfee:	0020      	movs	r0, r4
    bff0:	4b0e      	ldr	r3, [pc, #56]	; (c02c <echoTest+0x90>)
    bff2:	4798      	blx	r3
	usbUARTputString(str);
    bff4:	0020      	movs	r0, r4
    bff6:	47b0      	blx	r6
	BC68_closeSocket(socket);
    bff8:	0038      	movs	r0, r7
    bffa:	4b0d      	ldr	r3, [pc, #52]	; (c030 <echoTest+0x94>)
    bffc:	4798      	blx	r3
}
    bffe:	4b0d      	ldr	r3, [pc, #52]	; (c034 <echoTest+0x98>)
    c000:	449d      	add	sp, r3
    c002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c004:	fffffbec 	.word	0xfffffbec
    c008:	0000eafc 	.word	0x0000eafc
    c00c:	00008489 	.word	0x00008489
    c010:	00007795 	.word	0x00007795
    c014:	0000dd25 	.word	0x0000dd25
    c018:	0000c350 	.word	0x0000c350
    c01c:	0000eb14 	.word	0x0000eb14
    c020:	00007899 	.word	0x00007899
    c024:	00007a95 	.word	0x00007a95
    c028:	0000eb24 	.word	0x0000eb24
    c02c:	0000dce1 	.word	0x0000dce1
    c030:	00007869 	.word	0x00007869
    c034:	00000414 	.word	0x00000414

0000c038 <main>:

int main(void)
{
    c038:	b570      	push	{r4, r5, r6, lr}
    c03a:	4c22      	ldr	r4, [pc, #136]	; (c0c4 <main+0x8c>)
    c03c:	44a5      	add	sp, r4
	//Inicijalizacija
	atmel_start_init();
    c03e:	4b22      	ldr	r3, [pc, #136]	; (c0c8 <main+0x90>)
    c040:	4798      	blx	r3
	debugUARTdriverInit();
    c042:	4b22      	ldr	r3, [pc, #136]	; (c0cc <main+0x94>)
    c044:	4798      	blx	r3
	usbUARTinit();
    c046:	4b22      	ldr	r3, [pc, #136]	; (c0d0 <main+0x98>)
    c048:	4798      	blx	r3
	nbiotUARTinit();
    c04a:	4b22      	ldr	r3, [pc, #136]	; (c0d4 <main+0x9c>)
    c04c:	4798      	blx	r3
	timer_1ms_init();
    c04e:	4b22      	ldr	r3, [pc, #136]	; (c0d8 <main+0xa0>)
    c050:	4798      	blx	r3

	
	char str[256];
	delay(3000);
    c052:	4822      	ldr	r0, [pc, #136]	; (c0dc <main+0xa4>)
    c054:	4b22      	ldr	r3, [pc, #136]	; (c0e0 <main+0xa8>)
    c056:	4798      	blx	r3
	sprintf(str, "--- FTN-VIP NB-IoT ---\r\n");
    c058:	a848      	add	r0, sp, #288	; 0x120
    c05a:	4b22      	ldr	r3, [pc, #136]	; (c0e4 <main+0xac>)
    c05c:	0002      	movs	r2, r0
    c05e:	cb32      	ldmia	r3!, {r1, r4, r5}
    c060:	c232      	stmia	r2!, {r1, r4, r5}
    c062:	cb32      	ldmia	r3!, {r1, r4, r5}
    c064:	c232      	stmia	r2!, {r1, r4, r5}
    c066:	781b      	ldrb	r3, [r3, #0]
    c068:	7013      	strb	r3, [r2, #0]
	usbUARTputString(str);
    c06a:	4b1f      	ldr	r3, [pc, #124]	; (c0e8 <main+0xb0>)
    c06c:	4798      	blx	r3
	setLEDfreq(FREQ_1HZ);
    c06e:	25fa      	movs	r5, #250	; 0xfa
    c070:	006d      	lsls	r5, r5, #1
    c072:	0028      	movs	r0, r5
    c074:	4c1d      	ldr	r4, [pc, #116]	; (c0ec <main+0xb4>)
    c076:	47a0      	blx	r4
	enableLED();
    c078:	4b1d      	ldr	r3, [pc, #116]	; (c0f0 <main+0xb8>)
    c07a:	4798      	blx	r3

	//init sensors
	SHTC3_begin();
    c07c:	4b1d      	ldr	r3, [pc, #116]	; (c0f4 <main+0xbc>)
    c07e:	4798      	blx	r3
	bmp280_init();
    c080:	4b1d      	ldr	r3, [pc, #116]	; (c0f8 <main+0xc0>)
    c082:	4798      	blx	r3
	BH1750FVI_begin();
    c084:	4b1d      	ldr	r3, [pc, #116]	; (c0fc <main+0xc4>)
    c086:	4798      	blx	r3
	LIS2DE12_init();
    c088:	4b1d      	ldr	r3, [pc, #116]	; (c100 <main+0xc8>)
    c08a:	4798      	blx	r3
	
	//NB-IoT connect
	BC68_debugEnable(true, DEBUG_USB);
    c08c:	2100      	movs	r1, #0
    c08e:	2001      	movs	r0, #1
    c090:	4b1c      	ldr	r3, [pc, #112]	; (c104 <main+0xcc>)
    c092:	4798      	blx	r3
	BC68_connect();
    c094:	4b1c      	ldr	r3, [pc, #112]	; (c108 <main+0xd0>)
    c096:	4798      	blx	r3

	setLEDfreq(FREQ_1HZ);
    c098:	0028      	movs	r0, r5
    c09a:	47a0      	blx	r4
	sensor_data sd;
	
	while (1)
	{
		
		getSensorData(&sd);
    c09c:	4e1b      	ldr	r6, [pc, #108]	; (c10c <main+0xd4>)
		char str[256];
		sprintf(str, "{\"device\": {\"value\": %d},\"lum\": {\"value\": %ld}}", DeviceNumber, sd.lum);
    c09e:	4d1c      	ldr	r5, [pc, #112]	; (c110 <main+0xd8>)
		getSensorData(&sd);
    c0a0:	a843      	add	r0, sp, #268	; 0x10c
    c0a2:	47b0      	blx	r6
		sprintf(str, "{\"device\": {\"value\": %d},\"lum\": {\"value\": %ld}}", DeviceNumber, sd.lum);
    c0a4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    c0a6:	9301      	str	r3, [sp, #4]
    c0a8:	223d      	movs	r2, #61	; 0x3d
    c0aa:	0029      	movs	r1, r5
    c0ac:	a803      	add	r0, sp, #12
    c0ae:	4c19      	ldr	r4, [pc, #100]	; (c114 <main+0xdc>)
    c0b0:	47a0      	blx	r4
		echoTest(UDP, str);
    c0b2:	a903      	add	r1, sp, #12
    c0b4:	2011      	movs	r0, #17
    c0b6:	4b18      	ldr	r3, [pc, #96]	; (c118 <main+0xe0>)
    c0b8:	4798      	blx	r3
		
		delay(PERIOD * 1000);
    c0ba:	4818      	ldr	r0, [pc, #96]	; (c11c <main+0xe4>)
    c0bc:	4b08      	ldr	r3, [pc, #32]	; (c0e0 <main+0xa8>)
    c0be:	4798      	blx	r3
    c0c0:	e7ee      	b.n	c0a0 <main+0x68>
    c0c2:	46c0      	nop			; (mov r8, r8)
    c0c4:	fffffde0 	.word	0xfffffde0
    c0c8:	00006115 	.word	0x00006115
    c0cc:	00007245 	.word	0x00007245
    c0d0:	0000847d 	.word	0x0000847d
    c0d4:	00007439 	.word	0x00007439
    c0d8:	000083fd 	.word	0x000083fd
    c0dc:	00000bb8 	.word	0x00000bb8
    c0e0:	0000843d 	.word	0x0000843d
    c0e4:	0000eb3c 	.word	0x0000eb3c
    c0e8:	00008489 	.word	0x00008489
    c0ec:	00008471 	.word	0x00008471
    c0f0:	00008451 	.word	0x00008451
    c0f4:	00008105 	.word	0x00008105
    c0f8:	00006ded 	.word	0x00006ded
    c0fc:	00006965 	.word	0x00006965
    c100:	00007349 	.word	0x00007349
    c104:	00007ea5 	.word	0x00007ea5
    c108:	00007e41 	.word	0x00007e41
    c10c:	0000be8d 	.word	0x0000be8d
    c110:	0000eb58 	.word	0x0000eb58
    c114:	0000dce1 	.word	0x0000dce1
    c118:	0000bf9d 	.word	0x0000bf9d
    c11c:	0000ea60 	.word	0x0000ea60

0000c120 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c120:	b5f0      	push	{r4, r5, r6, r7, lr}
    c122:	b083      	sub	sp, #12
    c124:	0006      	movs	r6, r0
    c126:	000c      	movs	r4, r1
    c128:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c12a:	780a      	ldrb	r2, [r1, #0]
    c12c:	0653      	lsls	r3, r2, #25
    c12e:	0f9b      	lsrs	r3, r3, #30
    c130:	2b01      	cmp	r3, #1
    c132:	d000      	beq.n	c136 <cdcdf_acm_req+0x16>
    c134:	e06c      	b.n	c210 <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    c136:	7909      	ldrb	r1, [r1, #4]
    c138:	7963      	ldrb	r3, [r4, #5]
    c13a:	021b      	lsls	r3, r3, #8
    c13c:	430b      	orrs	r3, r1
    c13e:	493b      	ldr	r1, [pc, #236]	; (c22c <cdcdf_acm_req+0x10c>)
    c140:	7809      	ldrb	r1, [r1, #0]
    c142:	4299      	cmp	r1, r3
    c144:	d003      	beq.n	c14e <cdcdf_acm_req+0x2e>
    c146:	4939      	ldr	r1, [pc, #228]	; (c22c <cdcdf_acm_req+0x10c>)
    c148:	7849      	ldrb	r1, [r1, #1]
    c14a:	4299      	cmp	r1, r3
    c14c:	d163      	bne.n	c216 <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    c14e:	b252      	sxtb	r2, r2
    c150:	2a00      	cmp	r2, #0
    c152:	db0e      	blt.n	c172 <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    c154:	79a7      	ldrb	r7, [r4, #6]
    c156:	79e3      	ldrb	r3, [r4, #7]
    c158:	021b      	lsls	r3, r3, #8
    c15a:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    c15c:	4b34      	ldr	r3, [pc, #208]	; (c230 <cdcdf_acm_req+0x110>)
    c15e:	4798      	blx	r3
	switch (req->bRequest) {
    c160:	7863      	ldrb	r3, [r4, #1]
    c162:	2b20      	cmp	r3, #32
    c164:	d018      	beq.n	c198 <cdcdf_acm_req+0x78>
    c166:	2b22      	cmp	r3, #34	; 0x22
    c168:	d03c      	beq.n	c1e4 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    c16a:	200d      	movs	r0, #13
    c16c:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    c16e:	b003      	add	sp, #12
    c170:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    c172:	2d01      	cmp	r5, #1
    c174:	d052      	beq.n	c21c <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    c176:	7863      	ldrb	r3, [r4, #1]
    c178:	2b21      	cmp	r3, #33	; 0x21
    c17a:	d151      	bne.n	c220 <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    c17c:	79a2      	ldrb	r2, [r4, #6]
    c17e:	79e3      	ldrb	r3, [r4, #7]
    c180:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c182:	4313      	orrs	r3, r2
    c184:	2b07      	cmp	r3, #7
    c186:	d14e      	bne.n	c226 <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    c188:	2300      	movs	r3, #0
    c18a:	2207      	movs	r2, #7
    c18c:	4927      	ldr	r1, [pc, #156]	; (c22c <cdcdf_acm_req+0x10c>)
    c18e:	3108      	adds	r1, #8
    c190:	0030      	movs	r0, r6
    c192:	4c28      	ldr	r4, [pc, #160]	; (c234 <cdcdf_acm_req+0x114>)
    c194:	47a0      	blx	r4
    c196:	e7ea      	b.n	c16e <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    c198:	2f07      	cmp	r7, #7
    c19a:	d134      	bne.n	c206 <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    c19c:	2d00      	cmp	r5, #0
    c19e:	d01a      	beq.n	c1d6 <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    c1a0:	2207      	movs	r2, #7
    c1a2:	0001      	movs	r1, r0
    c1a4:	4668      	mov	r0, sp
    c1a6:	4b24      	ldr	r3, [pc, #144]	; (c238 <cdcdf_acm_req+0x118>)
    c1a8:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c1aa:	4b20      	ldr	r3, [pc, #128]	; (c22c <cdcdf_acm_req+0x10c>)
    c1ac:	691b      	ldr	r3, [r3, #16]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	d005      	beq.n	c1be <cdcdf_acm_req+0x9e>
    c1b2:	4668      	mov	r0, sp
    c1b4:	4798      	blx	r3
    c1b6:	0003      	movs	r3, r0
			return ERR_NONE;
    c1b8:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    c1ba:	2b00      	cmp	r3, #0
    c1bc:	d0d7      	beq.n	c16e <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    c1be:	4a1b      	ldr	r2, [pc, #108]	; (c22c <cdcdf_acm_req+0x10c>)
    c1c0:	0013      	movs	r3, r2
    c1c2:	9900      	ldr	r1, [sp, #0]
    c1c4:	6091      	str	r1, [r2, #8]
    c1c6:	466a      	mov	r2, sp
    c1c8:	8892      	ldrh	r2, [r2, #4]
    c1ca:	819a      	strh	r2, [r3, #12]
    c1cc:	466a      	mov	r2, sp
    c1ce:	7992      	ldrb	r2, [r2, #6]
    c1d0:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    c1d2:	2000      	movs	r0, #0
    c1d4:	e7cb      	b.n	c16e <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    c1d6:	2300      	movs	r3, #0
    c1d8:	2207      	movs	r2, #7
    c1da:	0001      	movs	r1, r0
    c1dc:	0030      	movs	r0, r6
    c1de:	4c15      	ldr	r4, [pc, #84]	; (c234 <cdcdf_acm_req+0x114>)
    c1e0:	47a0      	blx	r4
    c1e2:	e7c4      	b.n	c16e <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    c1e4:	2300      	movs	r3, #0
    c1e6:	2200      	movs	r2, #0
    c1e8:	2100      	movs	r1, #0
    c1ea:	2000      	movs	r0, #0
    c1ec:	4d11      	ldr	r5, [pc, #68]	; (c234 <cdcdf_acm_req+0x114>)
    c1ee:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    c1f0:	4b0e      	ldr	r3, [pc, #56]	; (c22c <cdcdf_acm_req+0x10c>)
    c1f2:	695b      	ldr	r3, [r3, #20]
    c1f4:	2b00      	cmp	r3, #0
    c1f6:	d009      	beq.n	c20c <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    c1f8:	78a2      	ldrb	r2, [r4, #2]
    c1fa:	78e0      	ldrb	r0, [r4, #3]
    c1fc:	0200      	lsls	r0, r0, #8
    c1fe:	4310      	orrs	r0, r2
    c200:	4798      	blx	r3
		return ERR_NONE;
    c202:	2000      	movs	r0, #0
    c204:	e7b3      	b.n	c16e <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    c206:	2001      	movs	r0, #1
    c208:	4240      	negs	r0, r0
    c20a:	e7b0      	b.n	c16e <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    c20c:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    c20e:	e7ae      	b.n	c16e <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    c210:	200a      	movs	r0, #10
    c212:	4240      	negs	r0, r0
    c214:	e7ab      	b.n	c16e <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    c216:	200a      	movs	r0, #10
    c218:	4240      	negs	r0, r0
    c21a:	e7a8      	b.n	c16e <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    c21c:	2000      	movs	r0, #0
    c21e:	e7a6      	b.n	c16e <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    c220:	200d      	movs	r0, #13
    c222:	4240      	negs	r0, r0
    c224:	e7a3      	b.n	c16e <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    c226:	2001      	movs	r0, #1
    c228:	4240      	negs	r0, r0
    c22a:	e7a0      	b.n	c16e <cdcdf_acm_req+0x4e>
    c22c:	200006e4 	.word	0x200006e4
    c230:	0000cba5 	.word	0x0000cba5
    c234:	0000c655 	.word	0x0000c655
    c238:	0000db25 	.word	0x0000db25

0000c23c <cdcdf_acm_ctrl>:
{
    c23c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c23e:	46de      	mov	lr, fp
    c240:	4657      	mov	r7, sl
    c242:	464e      	mov	r6, r9
    c244:	4645      	mov	r5, r8
    c246:	b5e0      	push	{r5, r6, r7, lr}
    c248:	b083      	sub	sp, #12
    c24a:	0016      	movs	r6, r2
	switch (ctrl) {
    c24c:	2901      	cmp	r1, #1
    c24e:	d068      	beq.n	c322 <cdcdf_acm_ctrl+0xe6>
    c250:	2900      	cmp	r1, #0
    c252:	d00b      	beq.n	c26c <cdcdf_acm_ctrl+0x30>
    c254:	2902      	cmp	r1, #2
    c256:	d100      	bne.n	c25a <cdcdf_acm_ctrl+0x1e>
    c258:	e093      	b.n	c382 <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    c25a:	200d      	movs	r0, #13
    c25c:	4240      	negs	r0, r0
}
    c25e:	b003      	add	sp, #12
    c260:	bc3c      	pop	{r2, r3, r4, r5}
    c262:	4690      	mov	r8, r2
    c264:	4699      	mov	r9, r3
    c266:	46a2      	mov	sl, r4
    c268:	46ab      	mov	fp, r5
    c26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c26c:	6883      	ldr	r3, [r0, #8]
    c26e:	4698      	mov	r8, r3
	ifc = desc->sod;
    c270:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    c272:	2800      	cmp	r0, #0
    c274:	d100      	bne.n	c278 <cdcdf_acm_ctrl+0x3c>
    c276:	e087      	b.n	c388 <cdcdf_acm_ctrl+0x14c>
    c278:	9301      	str	r3, [sp, #4]
    c27a:	2301      	movs	r3, #1
    c27c:	4443      	add	r3, r8
    c27e:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c280:	4f47      	ldr	r7, [pc, #284]	; (c3a0 <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    c282:	4b48      	ldr	r3, [pc, #288]	; (c3a4 <cdcdf_acm_ctrl+0x168>)
    c284:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    c286:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    c288:	7943      	ldrb	r3, [r0, #5]
    c28a:	2108      	movs	r1, #8
    c28c:	438b      	bics	r3, r1
    c28e:	2b02      	cmp	r3, #2
    c290:	d002      	beq.n	c298 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    c292:	200a      	movs	r0, #10
    c294:	4240      	negs	r0, r0
    c296:	e7e2      	b.n	c25e <cdcdf_acm_ctrl+0x22>
    c298:	9901      	ldr	r1, [sp, #4]
    c29a:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    c29c:	780b      	ldrb	r3, [r1, #0]
    c29e:	429a      	cmp	r2, r3
    c2a0:	d075      	beq.n	c38e <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    c2a2:	2bff      	cmp	r3, #255	; 0xff
    c2a4:	d176      	bne.n	c394 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    c2a6:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    c2a8:	2205      	movs	r2, #5
    c2aa:	6871      	ldr	r1, [r6, #4]
    c2ac:	4b3e      	ldr	r3, [pc, #248]	; (c3a8 <cdcdf_acm_ctrl+0x16c>)
    c2ae:	4798      	blx	r3
    c2b0:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    c2b2:	d11e      	bne.n	c2f2 <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    c2b4:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    c2b6:	7803      	ldrb	r3, [r0, #0]
    c2b8:	18c0      	adds	r0, r0, r3
    c2ba:	2204      	movs	r2, #4
    c2bc:	6871      	ldr	r1, [r6, #4]
    c2be:	4b3a      	ldr	r3, [pc, #232]	; (c3a8 <cdcdf_acm_ctrl+0x16c>)
    c2c0:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    c2c2:	9b01      	ldr	r3, [sp, #4]
    c2c4:	455b      	cmp	r3, fp
    c2c6:	d027      	beq.n	c318 <cdcdf_acm_ctrl+0xdc>
    c2c8:	9b01      	ldr	r3, [sp, #4]
    c2ca:	3301      	adds	r3, #1
    c2cc:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    c2ce:	2800      	cmp	r0, #0
    c2d0:	d1d9      	bne.n	c286 <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    c2d2:	200a      	movs	r0, #10
    c2d4:	4240      	negs	r0, r0
    c2d6:	e7c2      	b.n	c25e <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    c2d8:	4653      	mov	r3, sl
    c2da:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    c2dc:	0028      	movs	r0, r5
    c2de:	4b31      	ldr	r3, [pc, #196]	; (c3a4 <cdcdf_acm_ctrl+0x168>)
    c2e0:	4798      	blx	r3
			desc->sod = ep;
    c2e2:	6034      	str	r4, [r6, #0]
    c2e4:	7820      	ldrb	r0, [r4, #0]
    c2e6:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    c2e8:	6871      	ldr	r1, [r6, #4]
    c2ea:	4b30      	ldr	r3, [pc, #192]	; (c3ac <cdcdf_acm_ctrl+0x170>)
    c2ec:	4798      	blx	r3
    c2ee:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    c2f0:	d0e0      	beq.n	c2b4 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    c2f2:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    c2f4:	7963      	ldrb	r3, [r4, #5]
    c2f6:	021b      	lsls	r3, r3, #8
    c2f8:	7922      	ldrb	r2, [r4, #4]
    c2fa:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    c2fc:	b292      	uxth	r2, r2
    c2fe:	78e1      	ldrb	r1, [r4, #3]
    c300:	0028      	movs	r0, r5
    c302:	47b8      	blx	r7
    c304:	2800      	cmp	r0, #0
    c306:	d148      	bne.n	c39a <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    c308:	b26b      	sxtb	r3, r5
    c30a:	2b00      	cmp	r3, #0
    c30c:	dbe4      	blt.n	c2d8 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    c30e:	4643      	mov	r3, r8
    c310:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    c312:	0028      	movs	r0, r5
    c314:	47c8      	blx	r9
    c316:	e7e4      	b.n	c2e2 <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    c318:	2201      	movs	r2, #1
    c31a:	4b25      	ldr	r3, [pc, #148]	; (c3b0 <cdcdf_acm_ctrl+0x174>)
    c31c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c31e:	2000      	movs	r0, #0
    c320:	e79d      	b.n	c25e <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    c322:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    c324:	2a00      	cmp	r2, #0
    c326:	d008      	beq.n	c33a <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    c328:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    c32a:	795b      	ldrb	r3, [r3, #5]
    c32c:	2208      	movs	r2, #8
    c32e:	4393      	bics	r3, r2
    c330:	2b02      	cmp	r3, #2
    c332:	d002      	beq.n	c33a <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    c334:	200a      	movs	r0, #10
    c336:	4240      	negs	r0, r0
    c338:	e791      	b.n	c25e <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    c33a:	7823      	ldrb	r3, [r4, #0]
    c33c:	2bff      	cmp	r3, #255	; 0xff
    c33e:	d008      	beq.n	c352 <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    c340:	23ff      	movs	r3, #255	; 0xff
    c342:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    c344:	78a0      	ldrb	r0, [r4, #2]
    c346:	28ff      	cmp	r0, #255	; 0xff
    c348:	d003      	beq.n	c352 <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c34a:	4b1a      	ldr	r3, [pc, #104]	; (c3b4 <cdcdf_acm_ctrl+0x178>)
    c34c:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c34e:	23ff      	movs	r3, #255	; 0xff
    c350:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    c352:	7863      	ldrb	r3, [r4, #1]
    c354:	2bff      	cmp	r3, #255	; 0xff
    c356:	d008      	beq.n	c36a <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    c358:	23ff      	movs	r3, #255	; 0xff
    c35a:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    c35c:	78e0      	ldrb	r0, [r4, #3]
    c35e:	28ff      	cmp	r0, #255	; 0xff
    c360:	d003      	beq.n	c36a <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    c362:	4b14      	ldr	r3, [pc, #80]	; (c3b4 <cdcdf_acm_ctrl+0x178>)
    c364:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    c366:	23ff      	movs	r3, #255	; 0xff
    c368:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    c36a:	7920      	ldrb	r0, [r4, #4]
    c36c:	28ff      	cmp	r0, #255	; 0xff
    c36e:	d003      	beq.n	c378 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    c370:	4b10      	ldr	r3, [pc, #64]	; (c3b4 <cdcdf_acm_ctrl+0x178>)
    c372:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    c374:	23ff      	movs	r3, #255	; 0xff
    c376:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    c378:	2200      	movs	r2, #0
    c37a:	4b0d      	ldr	r3, [pc, #52]	; (c3b0 <cdcdf_acm_ctrl+0x174>)
    c37c:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    c37e:	2000      	movs	r0, #0
    c380:	e76d      	b.n	c25e <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    c382:	201b      	movs	r0, #27
    c384:	4240      	negs	r0, r0
    c386:	e76a      	b.n	c25e <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    c388:	200a      	movs	r0, #10
    c38a:	4240      	negs	r0, r0
    c38c:	e767      	b.n	c25e <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    c38e:	2012      	movs	r0, #18
    c390:	4240      	negs	r0, r0
    c392:	e764      	b.n	c25e <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    c394:	201c      	movs	r0, #28
    c396:	4240      	negs	r0, r0
    c398:	e761      	b.n	c25e <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    c39a:	2014      	movs	r0, #20
    c39c:	4240      	negs	r0, r0
    c39e:	e75e      	b.n	c25e <cdcdf_acm_ctrl+0x22>
    c3a0:	000092dd 	.word	0x000092dd
    c3a4:	00009371 	.word	0x00009371
    c3a8:	0000cbc1 	.word	0x0000cbc1
    c3ac:	0000cbf7 	.word	0x0000cbf7
    c3b0:	200006e4 	.word	0x200006e4
    c3b4:	00009345 	.word	0x00009345

0000c3b8 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    c3b8:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    c3ba:	4b0a      	ldr	r3, [pc, #40]	; (c3e4 <cdcdf_acm_init+0x2c>)
    c3bc:	4798      	blx	r3
    c3be:	2801      	cmp	r0, #1
    c3c0:	d80c      	bhi.n	c3dc <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    c3c2:	4809      	ldr	r0, [pc, #36]	; (c3e8 <cdcdf_acm_init+0x30>)
    c3c4:	4b09      	ldr	r3, [pc, #36]	; (c3ec <cdcdf_acm_init+0x34>)
    c3c6:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    c3c8:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    c3ca:	3018      	adds	r0, #24
    c3cc:	4b08      	ldr	r3, [pc, #32]	; (c3f0 <cdcdf_acm_init+0x38>)
    c3ce:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    c3d0:	4908      	ldr	r1, [pc, #32]	; (c3f4 <cdcdf_acm_init+0x3c>)
    c3d2:	2001      	movs	r0, #1
    c3d4:	4b08      	ldr	r3, [pc, #32]	; (c3f8 <cdcdf_acm_init+0x40>)
    c3d6:	4798      	blx	r3
	return ERR_NONE;
    c3d8:	2000      	movs	r0, #0
}
    c3da:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    c3dc:	2011      	movs	r0, #17
    c3de:	4240      	negs	r0, r0
    c3e0:	e7fb      	b.n	c3da <cdcdf_acm_init+0x22>
    c3e2:	46c0      	nop			; (mov r8, r8)
    c3e4:	0000cbb1 	.word	0x0000cbb1
    c3e8:	200006e4 	.word	0x200006e4
    c3ec:	0000c23d 	.word	0x0000c23d
    c3f0:	0000cb49 	.word	0x0000cb49
    c3f4:	20000068 	.word	0x20000068
    c3f8:	0000cab1 	.word	0x0000cab1

0000c3fc <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    c3fc:	b510      	push	{r4, lr}
    c3fe:	0004      	movs	r4, r0
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    c400:	4b07      	ldr	r3, [pc, #28]	; (c420 <cdcdf_acm_read+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    c402:	795b      	ldrb	r3, [r3, #5]
    c404:	2b00      	cmp	r3, #0
    c406:	d007      	beq.n	c418 <cdcdf_acm_read+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    c408:	4b05      	ldr	r3, [pc, #20]	; (c420 <cdcdf_acm_read+0x24>)
    c40a:	7918      	ldrb	r0, [r3, #4]
    c40c:	2300      	movs	r3, #0
    c40e:	000a      	movs	r2, r1
    c410:	0021      	movs	r1, r4
    c412:	4c04      	ldr	r4, [pc, #16]	; (c424 <cdcdf_acm_read+0x28>)
    c414:	47a0      	blx	r4
}
    c416:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    c418:	2011      	movs	r0, #17
    c41a:	4240      	negs	r0, r0
    c41c:	e7fb      	b.n	c416 <cdcdf_acm_read+0x1a>
    c41e:	46c0      	nop			; (mov r8, r8)
    c420:	200006e4 	.word	0x200006e4
    c424:	0000c655 	.word	0x0000c655

0000c428 <cdcdf_acm_write>:
{
    c428:	b510      	push	{r4, lr}
    c42a:	0004      	movs	r4, r0
	return _cdcdf_acm_funcd.enabled;
    c42c:	4b07      	ldr	r3, [pc, #28]	; (c44c <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    c42e:	795b      	ldrb	r3, [r3, #5]
    c430:	2b00      	cmp	r3, #0
    c432:	d007      	beq.n	c444 <cdcdf_acm_write+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    c434:	4b05      	ldr	r3, [pc, #20]	; (c44c <cdcdf_acm_write+0x24>)
    c436:	78d8      	ldrb	r0, [r3, #3]
    c438:	2301      	movs	r3, #1
    c43a:	000a      	movs	r2, r1
    c43c:	0021      	movs	r1, r4
    c43e:	4c04      	ldr	r4, [pc, #16]	; (c450 <cdcdf_acm_write+0x28>)
    c440:	47a0      	blx	r4
}
    c442:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    c444:	2011      	movs	r0, #17
    c446:	4240      	negs	r0, r0
    c448:	e7fb      	b.n	c442 <cdcdf_acm_write+0x1a>
    c44a:	46c0      	nop			; (mov r8, r8)
    c44c:	200006e4 	.word	0x200006e4
    c450:	0000c655 	.word	0x0000c655

0000c454 <cdcdf_acm_register_callback>:
{
    c454:	b510      	push	{r4, lr}
	switch (cb_type) {
    c456:	2801      	cmp	r0, #1
    c458:	d010      	beq.n	c47c <cdcdf_acm_register_callback+0x28>
    c45a:	2800      	cmp	r0, #0
    c45c:	d006      	beq.n	c46c <cdcdf_acm_register_callback+0x18>
    c45e:	2802      	cmp	r0, #2
    c460:	d014      	beq.n	c48c <cdcdf_acm_register_callback+0x38>
    c462:	2803      	cmp	r0, #3
    c464:	d016      	beq.n	c494 <cdcdf_acm_register_callback+0x40>
		return ERR_INVALID_ARG;
    c466:	200d      	movs	r0, #13
    c468:	4240      	negs	r0, r0
    c46a:	e006      	b.n	c47a <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    c46c:	4b0b      	ldr	r3, [pc, #44]	; (c49c <cdcdf_acm_register_callback+0x48>)
    c46e:	7918      	ldrb	r0, [r3, #4]
    c470:	000a      	movs	r2, r1
    c472:	2102      	movs	r1, #2
    c474:	4b0a      	ldr	r3, [pc, #40]	; (c4a0 <cdcdf_acm_register_callback+0x4c>)
    c476:	4798      	blx	r3
	return ERR_NONE;
    c478:	2000      	movs	r0, #0
}
    c47a:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    c47c:	4b07      	ldr	r3, [pc, #28]	; (c49c <cdcdf_acm_register_callback+0x48>)
    c47e:	78d8      	ldrb	r0, [r3, #3]
    c480:	000a      	movs	r2, r1
    c482:	2102      	movs	r1, #2
    c484:	4b06      	ldr	r3, [pc, #24]	; (c4a0 <cdcdf_acm_register_callback+0x4c>)
    c486:	4798      	blx	r3
	return ERR_NONE;
    c488:	2000      	movs	r0, #0
		break;
    c48a:	e7f6      	b.n	c47a <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    c48c:	4b03      	ldr	r3, [pc, #12]	; (c49c <cdcdf_acm_register_callback+0x48>)
    c48e:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    c490:	2000      	movs	r0, #0
		break;
    c492:	e7f2      	b.n	c47a <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    c494:	4b01      	ldr	r3, [pc, #4]	; (c49c <cdcdf_acm_register_callback+0x48>)
    c496:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    c498:	2000      	movs	r0, #0
		break;
    c49a:	e7ee      	b.n	c47a <cdcdf_acm_register_callback+0x26>
    c49c:	200006e4 	.word	0x200006e4
    c4a0:	0000954d 	.word	0x0000954d

0000c4a4 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    c4a4:	4b01      	ldr	r3, [pc, #4]	; (c4ac <cdcdf_acm_is_enabled+0x8>)
    c4a6:	7958      	ldrb	r0, [r3, #5]
}
    c4a8:	4770      	bx	lr
    c4aa:	46c0      	nop			; (mov r8, r8)
    c4ac:	200006e4 	.word	0x200006e4

0000c4b0 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    c4b0:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c4b2:	4b06      	ldr	r3, [pc, #24]	; (c4cc <usbdc_unconfig+0x1c>)
    c4b4:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    c4b6:	2c00      	cmp	r4, #0
    c4b8:	d007      	beq.n	c4ca <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    c4ba:	2200      	movs	r2, #0
    c4bc:	2101      	movs	r1, #1
    c4be:	0020      	movs	r0, r4
    c4c0:	6863      	ldr	r3, [r4, #4]
    c4c2:	4798      	blx	r3
		func = func->next;
    c4c4:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    c4c6:	2c00      	cmp	r4, #0
    c4c8:	d1f7      	bne.n	c4ba <usbdc_unconfig+0xa>
	}
}
    c4ca:	bd10      	pop	{r4, pc}
    c4cc:	20000708 	.word	0x20000708

0000c4d0 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    c4d0:	b570      	push	{r4, r5, r6, lr}
    c4d2:	0006      	movs	r6, r0
    c4d4:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    c4d6:	4b07      	ldr	r3, [pc, #28]	; (c4f4 <usbdc_change_notify+0x24>)
    c4d8:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    c4da:	2c00      	cmp	r4, #0
    c4dc:	d103      	bne.n	c4e6 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    c4de:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    c4e0:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    c4e2:	2c00      	cmp	r4, #0
    c4e4:	d0fb      	beq.n	c4de <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    c4e6:	6863      	ldr	r3, [r4, #4]
    c4e8:	2b00      	cmp	r3, #0
    c4ea:	d0f9      	beq.n	c4e0 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    c4ec:	0029      	movs	r1, r5
    c4ee:	0030      	movs	r0, r6
    c4f0:	4798      	blx	r3
    c4f2:	e7f5      	b.n	c4e0 <usbdc_change_notify+0x10>
    c4f4:	20000708 	.word	0x20000708

0000c4f8 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4fa:	0007      	movs	r7, r0
    c4fc:	000e      	movs	r6, r1
    c4fe:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    c500:	4b0d      	ldr	r3, [pc, #52]	; (c538 <usbdc_request_handler+0x40>)
    c502:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    c504:	2c00      	cmp	r4, #0
    c506:	d104      	bne.n	c512 <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    c508:	2000      	movs	r0, #0
    c50a:	e011      	b.n	c530 <usbdc_request_handler+0x38>
		h = h->next;
    c50c:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    c50e:	2c00      	cmp	r4, #0
    c510:	d00d      	beq.n	c52e <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    c512:	6863      	ldr	r3, [r4, #4]
    c514:	2b00      	cmp	r3, #0
    c516:	d0f9      	beq.n	c50c <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    c518:	002a      	movs	r2, r5
    c51a:	0031      	movs	r1, r6
    c51c:	0038      	movs	r0, r7
    c51e:	4798      	blx	r3
			if (0 == rc) {
    c520:	2800      	cmp	r0, #0
    c522:	d006      	beq.n	c532 <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    c524:	300a      	adds	r0, #10
    c526:	d0f1      	beq.n	c50c <usbdc_request_handler+0x14>
				return -1;
    c528:	2001      	movs	r0, #1
    c52a:	4240      	negs	r0, r0
    c52c:	e000      	b.n	c530 <usbdc_request_handler+0x38>
	return false;
    c52e:	2000      	movs	r0, #0
}
    c530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    c532:	2001      	movs	r0, #1
    c534:	e7fc      	b.n	c530 <usbdc_request_handler+0x38>
    c536:	46c0      	nop			; (mov r8, r8)
    c538:	20000708 	.word	0x20000708

0000c53c <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    c53c:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    c53e:	4b06      	ldr	r3, [pc, #24]	; (c558 <usbd_sof_cb+0x1c>)
    c540:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    c542:	2c00      	cmp	r4, #0
    c544:	d103      	bne.n	c54e <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    c546:	bd10      	pop	{r4, pc}
		sof = sof->next;
    c548:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    c54a:	2c00      	cmp	r4, #0
    c54c:	d0fb      	beq.n	c546 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    c54e:	6863      	ldr	r3, [r4, #4]
    c550:	2b00      	cmp	r3, #0
    c552:	d0f9      	beq.n	c548 <usbd_sof_cb+0xc>
			sof->cb();
    c554:	4798      	blx	r3
    c556:	e7f7      	b.n	c548 <usbd_sof_cb+0xc>
    c558:	20000708 	.word	0x20000708

0000c55c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    c55c:	b510      	push	{r4, lr}
    c55e:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    c560:	2900      	cmp	r1, #0
    c562:	d003      	beq.n	c56c <usbdc_cb_ctl_done+0x10>
    c564:	2901      	cmp	r1, #1
    c566:	d029      	beq.n	c5bc <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    c568:	2000      	movs	r0, #0
    c56a:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    c56c:	7813      	ldrb	r3, [r2, #0]
    c56e:	2b00      	cmp	r3, #0
    c570:	d1fa      	bne.n	c568 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    c572:	7853      	ldrb	r3, [r2, #1]
    c574:	2b05      	cmp	r3, #5
    c576:	d011      	beq.n	c59c <usbdc_cb_ctl_done+0x40>
    c578:	2b09      	cmp	r3, #9
    c57a:	d1f5      	bne.n	c568 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    c57c:	7892      	ldrb	r2, [r2, #2]
    c57e:	4b12      	ldr	r3, [pc, #72]	; (c5c8 <usbdc_cb_ctl_done+0x6c>)
    c580:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    c582:	78a3      	ldrb	r3, [r4, #2]
    c584:	78e1      	ldrb	r1, [r4, #3]
    c586:	0209      	lsls	r1, r1, #8
    c588:	4319      	orrs	r1, r3
    c58a:	1e4b      	subs	r3, r1, #1
    c58c:	4199      	sbcs	r1, r3
    c58e:	3103      	adds	r1, #3
    c590:	4b0d      	ldr	r3, [pc, #52]	; (c5c8 <usbdc_cb_ctl_done+0x6c>)
    c592:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c594:	2001      	movs	r0, #1
    c596:	4b0d      	ldr	r3, [pc, #52]	; (c5cc <usbdc_cb_ctl_done+0x70>)
    c598:	4798      	blx	r3
    c59a:	e7e5      	b.n	c568 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    c59c:	7890      	ldrb	r0, [r2, #2]
    c59e:	4b0c      	ldr	r3, [pc, #48]	; (c5d0 <usbdc_cb_ctl_done+0x74>)
    c5a0:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    c5a2:	78a3      	ldrb	r3, [r4, #2]
    c5a4:	78e1      	ldrb	r1, [r4, #3]
    c5a6:	0209      	lsls	r1, r1, #8
    c5a8:	4319      	orrs	r1, r3
    c5aa:	1e4b      	subs	r3, r1, #1
    c5ac:	4199      	sbcs	r1, r3
    c5ae:	3102      	adds	r1, #2
    c5b0:	4b05      	ldr	r3, [pc, #20]	; (c5c8 <usbdc_cb_ctl_done+0x6c>)
    c5b2:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    c5b4:	2001      	movs	r0, #1
    c5b6:	4b05      	ldr	r3, [pc, #20]	; (c5cc <usbdc_cb_ctl_done+0x70>)
    c5b8:	4798      	blx	r3
    c5ba:	e7d5      	b.n	c568 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    c5bc:	2201      	movs	r2, #1
    c5be:	0021      	movs	r1, r4
    c5c0:	2000      	movs	r0, #0
    c5c2:	4b04      	ldr	r3, [pc, #16]	; (c5d4 <usbdc_cb_ctl_done+0x78>)
    c5c4:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    c5c6:	e7cf      	b.n	c568 <usbdc_cb_ctl_done+0xc>
    c5c8:	20000708 	.word	0x20000708
    c5cc:	0000c4d1 	.word	0x0000c4d1
    c5d0:	000092d1 	.word	0x000092d1
    c5d4:	0000c4f9 	.word	0x0000c4f9

0000c5d8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    c5d8:	b510      	push	{r4, lr}
	usbdc_unconfig();
    c5da:	4b0d      	ldr	r3, [pc, #52]	; (c610 <usbdc_reset+0x38>)
    c5dc:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    c5de:	4c0d      	ldr	r4, [pc, #52]	; (c614 <usbdc_reset+0x3c>)
    c5e0:	2302      	movs	r3, #2
    c5e2:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    c5e4:	2300      	movs	r3, #0
    c5e6:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    c5e8:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    c5ea:	2000      	movs	r0, #0
    c5ec:	4b0a      	ldr	r3, [pc, #40]	; (c618 <usbdc_reset+0x40>)
    c5ee:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    c5f0:	7f20      	ldrb	r0, [r4, #28]
    c5f2:	4b0a      	ldr	r3, [pc, #40]	; (c61c <usbdc_reset+0x44>)
    c5f4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    c5f6:	4a0a      	ldr	r2, [pc, #40]	; (c620 <usbdc_reset+0x48>)
    c5f8:	2100      	movs	r1, #0
    c5fa:	2000      	movs	r0, #0
    c5fc:	4c09      	ldr	r4, [pc, #36]	; (c624 <usbdc_reset+0x4c>)
    c5fe:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    c600:	4a09      	ldr	r2, [pc, #36]	; (c628 <usbdc_reset+0x50>)
    c602:	2102      	movs	r1, #2
    c604:	2000      	movs	r0, #0
    c606:	47a0      	blx	r4
	usb_d_ep_enable(0);
    c608:	2000      	movs	r0, #0
    c60a:	4b08      	ldr	r3, [pc, #32]	; (c62c <usbdc_reset+0x54>)
    c60c:	4798      	blx	r3
}
    c60e:	bd10      	pop	{r4, pc}
    c610:	0000c4b1 	.word	0x0000c4b1
    c614:	20000708 	.word	0x20000708
    c618:	00009345 	.word	0x00009345
    c61c:	00009331 	.word	0x00009331
    c620:	0000c671 	.word	0x0000c671
    c624:	0000954d 	.word	0x0000954d
    c628:	0000c55d 	.word	0x0000c55d
    c62c:	00009371 	.word	0x00009371

0000c630 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    c630:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    c632:	2800      	cmp	r0, #0
    c634:	d002      	beq.n	c63c <usbd_event_cb+0xc>
    c636:	2801      	cmp	r0, #1
    c638:	d004      	beq.n	c644 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    c63a:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    c63c:	2000      	movs	r0, #0
    c63e:	4b03      	ldr	r3, [pc, #12]	; (c64c <usbd_event_cb+0x1c>)
    c640:	4798      	blx	r3
		break;
    c642:	e7fa      	b.n	c63a <usbd_event_cb+0xa>
		usbdc_reset();
    c644:	4b02      	ldr	r3, [pc, #8]	; (c650 <usbd_event_cb+0x20>)
    c646:	4798      	blx	r3
}
    c648:	e7f7      	b.n	c63a <usbd_event_cb+0xa>
    c64a:	46c0      	nop			; (mov r8, r8)
    c64c:	0000c4d1 	.word	0x0000c4d1
    c650:	0000c5d9 	.word	0x0000c5d9

0000c654 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    c654:	b510      	push	{r4, lr}
    c656:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    c658:	ac01      	add	r4, sp, #4
    c65a:	9101      	str	r1, [sp, #4]
    c65c:	9202      	str	r2, [sp, #8]
    c65e:	7220      	strb	r0, [r4, #8]
    c660:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    c662:	0020      	movs	r0, r4
    c664:	4b01      	ldr	r3, [pc, #4]	; (c66c <usbdc_xfer+0x18>)
    c666:	4798      	blx	r3
}
    c668:	b004      	add	sp, #16
    c66a:	bd10      	pop	{r4, pc}
    c66c:	000093bd 	.word	0x000093bd

0000c670 <usbdc_cb_ctl_req>:
{
    c670:	b5f0      	push	{r4, r5, r6, r7, lr}
    c672:	46c6      	mov	lr, r8
    c674:	b500      	push	{lr}
    c676:	b084      	sub	sp, #16
    c678:	0005      	movs	r5, r0
    c67a:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c67c:	2200      	movs	r2, #0
    c67e:	4bb5      	ldr	r3, [pc, #724]	; (c954 <usbdc_cb_ctl_req+0x2e4>)
    c680:	4798      	blx	r3
    c682:	1c43      	adds	r3, r0, #1
    c684:	d00d      	beq.n	c6a2 <usbdc_cb_ctl_req+0x32>
		return true;
    c686:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    c688:	2801      	cmp	r0, #1
    c68a:	d00b      	beq.n	c6a4 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    c68c:	7822      	ldrb	r2, [r4, #0]
    c68e:	231f      	movs	r3, #31
    c690:	0011      	movs	r1, r2
    c692:	4399      	bics	r1, r3
    c694:	d00b      	beq.n	c6ae <usbdc_cb_ctl_req+0x3e>
    c696:	b2cb      	uxtb	r3, r1
    c698:	2b80      	cmp	r3, #128	; 0x80
    c69a:	d100      	bne.n	c69e <usbdc_cb_ctl_req+0x2e>
    c69c:	e0f8      	b.n	c890 <usbdc_cb_ctl_req+0x220>
		return false;
    c69e:	2300      	movs	r3, #0
    c6a0:	e000      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		return false;
    c6a2:	2300      	movs	r3, #0
}
    c6a4:	0018      	movs	r0, r3
    c6a6:	b004      	add	sp, #16
    c6a8:	bc04      	pop	{r2}
    c6aa:	4690      	mov	r8, r2
    c6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    c6ae:	7863      	ldrb	r3, [r4, #1]
    c6b0:	2b0b      	cmp	r3, #11
    c6b2:	d900      	bls.n	c6b6 <usbdc_cb_ctl_req+0x46>
    c6b4:	e1e4      	b.n	ca80 <usbdc_cb_ctl_req+0x410>
    c6b6:	009b      	lsls	r3, r3, #2
    c6b8:	49a7      	ldr	r1, [pc, #668]	; (c958 <usbdc_cb_ctl_req+0x2e8>)
    c6ba:	58cb      	ldr	r3, [r1, r3]
    c6bc:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c6be:	2301      	movs	r3, #1
    c6c0:	2200      	movs	r2, #0
    c6c2:	2100      	movs	r1, #0
    c6c4:	0028      	movs	r0, r5
    c6c6:	4ca5      	ldr	r4, [pc, #660]	; (c95c <usbdc_cb_ctl_req+0x2ec>)
    c6c8:	47a0      	blx	r4
    c6ca:	4243      	negs	r3, r0
    c6cc:	4143      	adcs	r3, r0
    c6ce:	b2db      	uxtb	r3, r3
    c6d0:	e7e8      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    c6d2:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    c6d4:	2a00      	cmp	r2, #0
    c6d6:	d01a      	beq.n	c70e <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    c6d8:	4ba1      	ldr	r3, [pc, #644]	; (c960 <usbdc_cb_ctl_req+0x2f0>)
    c6da:	681b      	ldr	r3, [r3, #0]
    c6dc:	6859      	ldr	r1, [r3, #4]
    c6de:	6818      	ldr	r0, [r3, #0]
    c6e0:	4ba0      	ldr	r3, [pc, #640]	; (c964 <usbdc_cb_ctl_req+0x2f4>)
    c6e2:	4798      	blx	r3
	if (NULL == cfg_desc) {
    c6e4:	2800      	cmp	r0, #0
    c6e6:	d100      	bne.n	c6ea <usbdc_cb_ctl_req+0x7a>
    c6e8:	e1d4      	b.n	ca94 <usbdc_cb_ctl_req+0x424>
    c6ea:	78c3      	ldrb	r3, [r0, #3]
    c6ec:	021b      	lsls	r3, r3, #8
    c6ee:	7881      	ldrb	r1, [r0, #2]
    c6f0:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    c6f2:	b289      	uxth	r1, r1
    c6f4:	1841      	adds	r1, r0, r1
    c6f6:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    c6f8:	2204      	movs	r2, #4
    c6fa:	4b9b      	ldr	r3, [pc, #620]	; (c968 <usbdc_cb_ctl_req+0x2f8>)
    c6fc:	4798      	blx	r3
    c6fe:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    c700:	2800      	cmp	r0, #0
    c702:	d006      	beq.n	c712 <usbdc_cb_ctl_req+0xa2>
    c704:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c706:	4f96      	ldr	r7, [pc, #600]	; (c960 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c708:	4b97      	ldr	r3, [pc, #604]	; (c968 <usbdc_cb_ctl_req+0x2f8>)
    c70a:	4698      	mov	r8, r3
    c70c:	e01a      	b.n	c744 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    c70e:	4b97      	ldr	r3, [pc, #604]	; (c96c <usbdc_cb_ctl_req+0x2fc>)
    c710:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    c712:	2301      	movs	r3, #1
    c714:	2200      	movs	r2, #0
    c716:	2100      	movs	r1, #0
    c718:	0028      	movs	r0, r5
    c71a:	4c90      	ldr	r4, [pc, #576]	; (c95c <usbdc_cb_ctl_req+0x2ec>)
    c71c:	47a0      	blx	r4
    c71e:	4243      	negs	r3, r0
    c720:	4143      	adcs	r3, r0
    c722:	b2db      	uxtb	r3, r3
    c724:	e7be      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    c726:	0034      	movs	r4, r6
    c728:	e000      	b.n	c72c <usbdc_cb_ctl_req+0xbc>
    c72a:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    c72c:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    c72e:	7803      	ldrb	r3, [r0, #0]
    c730:	18c0      	adds	r0, r0, r3
    c732:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c734:	9b03      	ldr	r3, [sp, #12]
    c736:	9301      	str	r3, [sp, #4]
    c738:	2204      	movs	r2, #4
    c73a:	0019      	movs	r1, r3
    c73c:	47c0      	blx	r8
    c73e:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    c740:	2800      	cmp	r0, #0
    c742:	d0e6      	beq.n	c712 <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    c744:	7886      	ldrb	r6, [r0, #2]
    c746:	42a6      	cmp	r6, r4
    c748:	d0f0      	beq.n	c72c <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    c74a:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    c74c:	2c00      	cmp	r4, #0
    c74e:	d0ea      	beq.n	c726 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    c750:	aa02      	add	r2, sp, #8
    c752:	2100      	movs	r1, #0
    c754:	0020      	movs	r0, r4
    c756:	6863      	ldr	r3, [r4, #4]
    c758:	4798      	blx	r3
    c75a:	2800      	cmp	r0, #0
    c75c:	d0e5      	beq.n	c72a <usbdc_cb_ctl_req+0xba>
					func = func->next;
    c75e:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    c760:	2c00      	cmp	r4, #0
    c762:	d1f5      	bne.n	c750 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    c764:	0034      	movs	r4, r6
    c766:	e7e1      	b.n	c72c <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c768:	231f      	movs	r3, #31
    c76a:	401a      	ands	r2, r3
		return false;
    c76c:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c76e:	2a02      	cmp	r2, #2
    c770:	d198      	bne.n	c6a4 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c772:	79a3      	ldrb	r3, [r4, #6]
    c774:	79e2      	ldrb	r2, [r4, #7]
    c776:	0212      	lsls	r2, r2, #8
    c778:	431a      	orrs	r2, r3
			return false;
    c77a:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    c77c:	2a00      	cmp	r2, #0
    c77e:	d000      	beq.n	c782 <usbdc_cb_ctl_req+0x112>
    c780:	e790      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    c782:	7920      	ldrb	r0, [r4, #4]
    c784:	2100      	movs	r1, #0
    c786:	4b7a      	ldr	r3, [pc, #488]	; (c970 <usbdc_cb_ctl_req+0x300>)
    c788:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c78a:	2301      	movs	r3, #1
    c78c:	2200      	movs	r2, #0
    c78e:	2100      	movs	r1, #0
    c790:	0028      	movs	r0, r5
    c792:	4c72      	ldr	r4, [pc, #456]	; (c95c <usbdc_cb_ctl_req+0x2ec>)
    c794:	47a0      	blx	r4
		return true;
    c796:	2301      	movs	r3, #1
    c798:	e784      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c79a:	231f      	movs	r3, #31
    c79c:	401a      	ands	r2, r3
		return false;
    c79e:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c7a0:	2a02      	cmp	r2, #2
    c7a2:	d000      	beq.n	c7a6 <usbdc_cb_ctl_req+0x136>
    c7a4:	e77e      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    c7a6:	79a3      	ldrb	r3, [r4, #6]
    c7a8:	79e2      	ldrb	r2, [r4, #7]
    c7aa:	0212      	lsls	r2, r2, #8
    c7ac:	431a      	orrs	r2, r3
			return false;
    c7ae:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    c7b0:	2a00      	cmp	r2, #0
    c7b2:	d000      	beq.n	c7b6 <usbdc_cb_ctl_req+0x146>
    c7b4:	e776      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    c7b6:	7920      	ldrb	r0, [r4, #4]
    c7b8:	2101      	movs	r1, #1
    c7ba:	4b6d      	ldr	r3, [pc, #436]	; (c970 <usbdc_cb_ctl_req+0x300>)
    c7bc:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    c7be:	2301      	movs	r3, #1
    c7c0:	2200      	movs	r2, #0
    c7c2:	2100      	movs	r1, #0
    c7c4:	0028      	movs	r0, r5
    c7c6:	4c65      	ldr	r4, [pc, #404]	; (c95c <usbdc_cb_ctl_req+0x2ec>)
    c7c8:	47a0      	blx	r4
		return true;
    c7ca:	2301      	movs	r3, #1
    c7cc:	e76a      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    c7ce:	78a3      	ldrb	r3, [r4, #2]
    c7d0:	78e5      	ldrb	r5, [r4, #3]
    c7d2:	022d      	lsls	r5, r5, #8
    c7d4:	431d      	orrs	r5, r3
    c7d6:	7923      	ldrb	r3, [r4, #4]
    c7d8:	7964      	ldrb	r4, [r4, #5]
    c7da:	0224      	lsls	r4, r4, #8
    c7dc:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    c7de:	4a60      	ldr	r2, [pc, #384]	; (c960 <usbdc_cb_ctl_req+0x2f0>)
    c7e0:	6813      	ldr	r3, [r2, #0]
    c7e2:	7ed2      	ldrb	r2, [r2, #27]
    c7e4:	6859      	ldr	r1, [r3, #4]
    c7e6:	6818      	ldr	r0, [r3, #0]
    c7e8:	4b5e      	ldr	r3, [pc, #376]	; (c964 <usbdc_cb_ctl_req+0x2f4>)
    c7ea:	4798      	blx	r3
	if (NULL == ifc) {
    c7ec:	2800      	cmp	r0, #0
    c7ee:	d047      	beq.n	c880 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    c7f0:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    c7f2:	78c3      	ldrb	r3, [r0, #3]
    c7f4:	021b      	lsls	r3, r3, #8
    c7f6:	7881      	ldrb	r1, [r0, #2]
    c7f8:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    c7fa:	b289      	uxth	r1, r1
    c7fc:	1841      	adds	r1, r0, r1
    c7fe:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    c800:	2204      	movs	r2, #4
    c802:	4b59      	ldr	r3, [pc, #356]	; (c968 <usbdc_cb_ctl_req+0x2f8>)
    c804:	4798      	blx	r3
    c806:	2800      	cmp	r0, #0
    c808:	d03c      	beq.n	c884 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c80a:	4e57      	ldr	r6, [pc, #348]	; (c968 <usbdc_cb_ctl_req+0x2f8>)
    c80c:	e008      	b.n	c820 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    c80e:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    c810:	7803      	ldrb	r3, [r0, #0]
    c812:	18c0      	adds	r0, r0, r3
    c814:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    c816:	2204      	movs	r2, #4
    c818:	9903      	ldr	r1, [sp, #12]
    c81a:	47b0      	blx	r6
		if (NULL == ifc) {
    c81c:	2800      	cmp	r0, #0
    c81e:	d033      	beq.n	c888 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    c820:	7883      	ldrb	r3, [r0, #2]
    c822:	42a3      	cmp	r3, r4
    c824:	d1f3      	bne.n	c80e <usbdc_cb_ctl_req+0x19e>
    c826:	78c3      	ldrb	r3, [r0, #3]
    c828:	42ab      	cmp	r3, r5
    c82a:	d1f0      	bne.n	c80e <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    c82c:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    c82e:	4b4c      	ldr	r3, [pc, #304]	; (c960 <usbdc_cb_ctl_req+0x2f0>)
    c830:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    c832:	2e00      	cmp	r6, #0
    c834:	d02a      	beq.n	c88c <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    c836:	aa02      	add	r2, sp, #8
    c838:	2101      	movs	r1, #1
    c83a:	0030      	movs	r0, r6
    c83c:	6873      	ldr	r3, [r6, #4]
    c83e:	4798      	blx	r3
    c840:	2800      	cmp	r0, #0
    c842:	d004      	beq.n	c84e <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    c844:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    c846:	2e00      	cmp	r6, #0
    c848:	d1f5      	bne.n	c836 <usbdc_cb_ctl_req+0x1c6>
	return false;
    c84a:	2300      	movs	r3, #0
    c84c:	e72a      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c84e:	6873      	ldr	r3, [r6, #4]
    c850:	aa02      	add	r2, sp, #8
    c852:	2100      	movs	r1, #0
    c854:	0030      	movs	r0, r6
    c856:	4798      	blx	r3
			return false;
    c858:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    c85a:	2800      	cmp	r0, #0
    c85c:	d000      	beq.n	c860 <usbdc_cb_ctl_req+0x1f0>
    c85e:	e721      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    c860:	2d00      	cmp	r5, #0
    c862:	d005      	beq.n	c870 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    c864:	493e      	ldr	r1, [pc, #248]	; (c960 <usbdc_cb_ctl_req+0x2f0>)
    c866:	2201      	movs	r2, #1
    c868:	40a2      	lsls	r2, r4
    c86a:	7f4b      	ldrb	r3, [r1, #29]
    c86c:	4313      	orrs	r3, r2
    c86e:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    c870:	2300      	movs	r3, #0
    c872:	2200      	movs	r2, #0
    c874:	2100      	movs	r1, #0
    c876:	2000      	movs	r0, #0
    c878:	4c38      	ldr	r4, [pc, #224]	; (c95c <usbdc_cb_ctl_req+0x2ec>)
    c87a:	47a0      	blx	r4
			return true;
    c87c:	2301      	movs	r3, #1
    c87e:	e711      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		return false;
    c880:	2300      	movs	r3, #0
    c882:	e70f      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		return false;
    c884:	2300      	movs	r3, #0
    c886:	e70d      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
			return false;
    c888:	2300      	movs	r3, #0
    c88a:	e70b      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
	return false;
    c88c:	2300      	movs	r3, #0
    c88e:	e709      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    c890:	7863      	ldrb	r3, [r4, #1]
    c892:	2b06      	cmp	r3, #6
    c894:	d033      	beq.n	c8fe <usbdc_cb_ctl_req+0x28e>
    c896:	b2d9      	uxtb	r1, r3
    c898:	2906      	cmp	r1, #6
    c89a:	d922      	bls.n	c8e2 <usbdc_cb_ctl_req+0x272>
    c89c:	2b08      	cmp	r3, #8
    c89e:	d100      	bne.n	c8a2 <usbdc_cb_ctl_req+0x232>
    c8a0:	e0af      	b.n	ca02 <usbdc_cb_ctl_req+0x392>
    c8a2:	2b0a      	cmp	r3, #10
    c8a4:	d000      	beq.n	c8a8 <usbdc_cb_ctl_req+0x238>
    c8a6:	e0ed      	b.n	ca84 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    c8a8:	4b2d      	ldr	r3, [pc, #180]	; (c960 <usbdc_cb_ctl_req+0x2f0>)
    c8aa:	7f5a      	ldrb	r2, [r3, #29]
    c8ac:	7921      	ldrb	r1, [r4, #4]
    c8ae:	7963      	ldrb	r3, [r4, #5]
    c8b0:	021b      	lsls	r3, r3, #8
    c8b2:	430b      	orrs	r3, r1
    c8b4:	411a      	asrs	r2, r3
    c8b6:	07d3      	lsls	r3, r2, #31
    c8b8:	d400      	bmi.n	c8bc <usbdc_cb_ctl_req+0x24c>
    c8ba:	e0ca      	b.n	ca52 <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    c8bc:	4b28      	ldr	r3, [pc, #160]	; (c960 <usbdc_cb_ctl_req+0x2f0>)
    c8be:	691d      	ldr	r5, [r3, #16]
	return false;
    c8c0:	2300      	movs	r3, #0
	while (NULL != func) {
    c8c2:	2d00      	cmp	r5, #0
    c8c4:	d100      	bne.n	c8c8 <usbdc_cb_ctl_req+0x258>
    c8c6:	e6ed      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    c8c8:	0022      	movs	r2, r4
    c8ca:	2102      	movs	r1, #2
    c8cc:	0028      	movs	r0, r5
    c8ce:	686b      	ldr	r3, [r5, #4]
    c8d0:	4798      	blx	r3
    c8d2:	2800      	cmp	r0, #0
    c8d4:	db00      	blt.n	c8d8 <usbdc_cb_ctl_req+0x268>
    c8d6:	e0c8      	b.n	ca6a <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    c8d8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    c8da:	2d00      	cmp	r5, #0
    c8dc:	d1f4      	bne.n	c8c8 <usbdc_cb_ctl_req+0x258>
	return false;
    c8de:	2300      	movs	r3, #0
    c8e0:	e6e0      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    c8e2:	2b00      	cmp	r3, #0
    c8e4:	d000      	beq.n	c8e8 <usbdc_cb_ctl_req+0x278>
    c8e6:	e0cd      	b.n	ca84 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    c8e8:	231f      	movs	r3, #31
    c8ea:	401a      	ands	r2, r3
    c8ec:	b2d3      	uxtb	r3, r2
    c8ee:	2b01      	cmp	r3, #1
    c8f0:	d800      	bhi.n	c8f4 <usbdc_cb_ctl_req+0x284>
    c8f2:	e092      	b.n	ca1a <usbdc_cb_ctl_req+0x3aa>
    c8f4:	2a02      	cmp	r2, #2
    c8f6:	d100      	bne.n	c8fa <usbdc_cb_ctl_req+0x28a>
    c8f8:	e09f      	b.n	ca3a <usbdc_cb_ctl_req+0x3ca>
		return false;
    c8fa:	2300      	movs	r3, #0
    c8fc:	e6d2      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    c8fe:	78a3      	ldrb	r3, [r4, #2]
    c900:	78e2      	ldrb	r2, [r4, #3]
    c902:	0212      	lsls	r2, r2, #8
    c904:	431a      	orrs	r2, r3
    c906:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    c908:	2b02      	cmp	r3, #2
    c90a:	d033      	beq.n	c974 <usbdc_cb_ctl_req+0x304>
    c90c:	2b03      	cmp	r3, #3
    c90e:	d056      	beq.n	c9be <usbdc_cb_ctl_req+0x34e>
    c910:	2b01      	cmp	r3, #1
    c912:	d001      	beq.n	c918 <usbdc_cb_ctl_req+0x2a8>
	return false;
    c914:	2300      	movs	r3, #0
    c916:	e6c5      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    c918:	79a2      	ldrb	r2, [r4, #6]
    c91a:	79e3      	ldrb	r3, [r4, #7]
    c91c:	021b      	lsls	r3, r3, #8
    c91e:	4313      	orrs	r3, r2
    c920:	1c1a      	adds	r2, r3, #0
    c922:	2b12      	cmp	r3, #18
    c924:	d900      	bls.n	c928 <usbdc_cb_ctl_req+0x2b8>
    c926:	2212      	movs	r2, #18
    c928:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    c92a:	4b0d      	ldr	r3, [pc, #52]	; (c960 <usbdc_cb_ctl_req+0x2f0>)
    c92c:	681b      	ldr	r3, [r3, #0]
    c92e:	6859      	ldr	r1, [r3, #4]
    c930:	6818      	ldr	r0, [r3, #0]
    c932:	2201      	movs	r2, #1
    c934:	4b0c      	ldr	r3, [pc, #48]	; (c968 <usbdc_cb_ctl_req+0x2f8>)
    c936:	4798      	blx	r3
	if (!dev_desc) {
    c938:	2800      	cmp	r0, #0
    c93a:	d100      	bne.n	c93e <usbdc_cb_ctl_req+0x2ce>
    c93c:	e0a4      	b.n	ca88 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    c93e:	2300      	movs	r3, #0
    c940:	0022      	movs	r2, r4
    c942:	0001      	movs	r1, r0
    c944:	0028      	movs	r0, r5
    c946:	4c05      	ldr	r4, [pc, #20]	; (c95c <usbdc_cb_ctl_req+0x2ec>)
    c948:	47a0      	blx	r4
    c94a:	4243      	negs	r3, r0
    c94c:	4143      	adcs	r3, r0
    c94e:	b2db      	uxtb	r3, r3
    c950:	e6a8      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
    c952:	46c0      	nop			; (mov r8, r8)
    c954:	0000c4f9 	.word	0x0000c4f9
    c958:	0000eb88 	.word	0x0000eb88
    c95c:	0000c655 	.word	0x0000c655
    c960:	20000708 	.word	0x20000708
    c964:	0000cc3d 	.word	0x0000cc3d
    c968:	0000cbc1 	.word	0x0000cbc1
    c96c:	0000c4b1 	.word	0x0000c4b1
    c970:	000094e5 	.word	0x000094e5
	uint16_t length   = req->wLength;
    c974:	79a3      	ldrb	r3, [r4, #6]
    c976:	79e6      	ldrb	r6, [r4, #7]
    c978:	0236      	lsls	r6, r6, #8
    c97a:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c97c:	4b46      	ldr	r3, [pc, #280]	; (ca98 <usbdc_cb_ctl_req+0x428>)
    c97e:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    c980:	681b      	ldr	r3, [r3, #0]
    c982:	3201      	adds	r2, #1
    c984:	b2d2      	uxtb	r2, r2
    c986:	6859      	ldr	r1, [r3, #4]
    c988:	6818      	ldr	r0, [r3, #0]
    c98a:	4b44      	ldr	r3, [pc, #272]	; (ca9c <usbdc_cb_ctl_req+0x42c>)
    c98c:	4798      	blx	r3
    c98e:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    c990:	d07c      	beq.n	ca8c <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    c992:	78c3      	ldrb	r3, [r0, #3]
    c994:	021b      	lsls	r3, r3, #8
    c996:	7884      	ldrb	r4, [r0, #2]
    c998:	18e4      	adds	r4, r4, r3
    c99a:	b2a4      	uxth	r4, r4
		need_zlp = false;
    c99c:	2300      	movs	r3, #0
	if (length <= total_len) {
    c99e:	42a6      	cmp	r6, r4
    c9a0:	d905      	bls.n	c9ae <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c9a2:	3f01      	subs	r7, #1
    c9a4:	403e      	ands	r6, r7
    c9a6:	4273      	negs	r3, r6
    c9a8:	4173      	adcs	r3, r6
    c9aa:	b2db      	uxtb	r3, r3
		length = total_len;
    c9ac:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    c9ae:	0032      	movs	r2, r6
    c9b0:	0028      	movs	r0, r5
    c9b2:	4c3b      	ldr	r4, [pc, #236]	; (caa0 <usbdc_cb_ctl_req+0x430>)
    c9b4:	47a0      	blx	r4
    c9b6:	4243      	negs	r3, r0
    c9b8:	4143      	adcs	r3, r0
    c9ba:	b2db      	uxtb	r3, r3
    c9bc:	e672      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    c9be:	79a3      	ldrb	r3, [r4, #6]
    c9c0:	79e1      	ldrb	r1, [r4, #7]
    c9c2:	0209      	lsls	r1, r1, #8
    c9c4:	4319      	orrs	r1, r3
    c9c6:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c9c8:	4b33      	ldr	r3, [pc, #204]	; (ca98 <usbdc_cb_ctl_req+0x428>)
    c9ca:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    c9cc:	681b      	ldr	r3, [r3, #0]
    c9ce:	b2d2      	uxtb	r2, r2
    c9d0:	6859      	ldr	r1, [r3, #4]
    c9d2:	6818      	ldr	r0, [r3, #0]
    c9d4:	4b33      	ldr	r3, [pc, #204]	; (caa4 <usbdc_cb_ctl_req+0x434>)
    c9d6:	4798      	blx	r3
    c9d8:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    c9da:	d059      	beq.n	ca90 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    c9dc:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    c9de:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    c9e0:	4294      	cmp	r4, r2
    c9e2:	d906      	bls.n	c9f2 <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    c9e4:	1e73      	subs	r3, r6, #1
    c9e6:	4023      	ands	r3, r4
    c9e8:	0018      	movs	r0, r3
    c9ea:	4243      	negs	r3, r0
    c9ec:	4143      	adcs	r3, r0
    c9ee:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    c9f0:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    c9f2:	0022      	movs	r2, r4
    c9f4:	0028      	movs	r0, r5
    c9f6:	4c2a      	ldr	r4, [pc, #168]	; (caa0 <usbdc_cb_ctl_req+0x430>)
    c9f8:	47a0      	blx	r4
    c9fa:	4243      	negs	r3, r0
    c9fc:	4143      	adcs	r3, r0
    c9fe:	b2db      	uxtb	r3, r3
    ca00:	e650      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    ca02:	4b25      	ldr	r3, [pc, #148]	; (ca98 <usbdc_cb_ctl_req+0x428>)
    ca04:	7eda      	ldrb	r2, [r3, #27]
    ca06:	6959      	ldr	r1, [r3, #20]
    ca08:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    ca0a:	6959      	ldr	r1, [r3, #20]
    ca0c:	2300      	movs	r3, #0
    ca0e:	2201      	movs	r2, #1
    ca10:	0028      	movs	r0, r5
    ca12:	4c23      	ldr	r4, [pc, #140]	; (caa0 <usbdc_cb_ctl_req+0x430>)
    ca14:	47a0      	blx	r4
		return true;
    ca16:	2301      	movs	r3, #1
    ca18:	e644      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		st = 0;
    ca1a:	2300      	movs	r3, #0
    ca1c:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    ca1e:	4c1e      	ldr	r4, [pc, #120]	; (ca98 <usbdc_cb_ctl_req+0x428>)
    ca20:	2202      	movs	r2, #2
    ca22:	a902      	add	r1, sp, #8
    ca24:	6960      	ldr	r0, [r4, #20]
    ca26:	4b20      	ldr	r3, [pc, #128]	; (caa8 <usbdc_cb_ctl_req+0x438>)
    ca28:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    ca2a:	6961      	ldr	r1, [r4, #20]
    ca2c:	2300      	movs	r3, #0
    ca2e:	2202      	movs	r2, #2
    ca30:	0028      	movs	r0, r5
    ca32:	4c1b      	ldr	r4, [pc, #108]	; (caa0 <usbdc_cb_ctl_req+0x430>)
    ca34:	47a0      	blx	r4
	return true;
    ca36:	2301      	movs	r3, #1
    ca38:	e634      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    ca3a:	7920      	ldrb	r0, [r4, #4]
    ca3c:	2102      	movs	r1, #2
    ca3e:	4b1b      	ldr	r3, [pc, #108]	; (caac <usbdc_cb_ctl_req+0x43c>)
    ca40:	4798      	blx	r3
		if (st < 0) {
    ca42:	2800      	cmp	r0, #0
    ca44:	db03      	blt.n	ca4e <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    ca46:	2301      	movs	r3, #1
    ca48:	4018      	ands	r0, r3
    ca4a:	9002      	str	r0, [sp, #8]
    ca4c:	e7e7      	b.n	ca1e <usbdc_cb_ctl_req+0x3ae>
			return false;
    ca4e:	2300      	movs	r3, #0
    ca50:	e628      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    ca52:	4b11      	ldr	r3, [pc, #68]	; (ca98 <usbdc_cb_ctl_req+0x428>)
    ca54:	2200      	movs	r2, #0
    ca56:	6959      	ldr	r1, [r3, #20]
    ca58:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ca5a:	6959      	ldr	r1, [r3, #20]
    ca5c:	2300      	movs	r3, #0
    ca5e:	3201      	adds	r2, #1
    ca60:	2000      	movs	r0, #0
    ca62:	4c0f      	ldr	r4, [pc, #60]	; (caa0 <usbdc_cb_ctl_req+0x430>)
    ca64:	47a0      	blx	r4
		return true;
    ca66:	2301      	movs	r3, #1
    ca68:	e61c      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    ca6a:	4b0b      	ldr	r3, [pc, #44]	; (ca98 <usbdc_cb_ctl_req+0x428>)
    ca6c:	695a      	ldr	r2, [r3, #20]
    ca6e:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    ca70:	6959      	ldr	r1, [r3, #20]
    ca72:	2300      	movs	r3, #0
    ca74:	2201      	movs	r2, #1
    ca76:	2000      	movs	r0, #0
    ca78:	4c09      	ldr	r4, [pc, #36]	; (caa0 <usbdc_cb_ctl_req+0x430>)
    ca7a:	47a0      	blx	r4
			return true;
    ca7c:	2301      	movs	r3, #1
    ca7e:	e611      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		return false;
    ca80:	2300      	movs	r3, #0
    ca82:	e60f      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		return false;
    ca84:	2300      	movs	r3, #0
    ca86:	e60d      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		return false;
    ca88:	2300      	movs	r3, #0
    ca8a:	e60b      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		return false;
    ca8c:	2300      	movs	r3, #0
    ca8e:	e609      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
		return false;
    ca90:	2300      	movs	r3, #0
    ca92:	e607      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
			return false;
    ca94:	2300      	movs	r3, #0
    ca96:	e605      	b.n	c6a4 <usbdc_cb_ctl_req+0x34>
    ca98:	20000708 	.word	0x20000708
    ca9c:	0000cc3d 	.word	0x0000cc3d
    caa0:	0000c655 	.word	0x0000c655
    caa4:	0000cca5 	.word	0x0000cca5
    caa8:	0000db25 	.word	0x0000db25
    caac:	000094e5 	.word	0x000094e5

0000cab0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    cab0:	b510      	push	{r4, lr}
	switch (type) {
    cab2:	2801      	cmp	r0, #1
    cab4:	d009      	beq.n	caca <usbdc_register_handler+0x1a>
    cab6:	2800      	cmp	r0, #0
    cab8:	d002      	beq.n	cac0 <usbdc_register_handler+0x10>
    caba:	2802      	cmp	r0, #2
    cabc:	d00a      	beq.n	cad4 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    cabe:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    cac0:	4807      	ldr	r0, [pc, #28]	; (cae0 <usbdc_register_handler+0x30>)
    cac2:	3004      	adds	r0, #4
    cac4:	4b07      	ldr	r3, [pc, #28]	; (cae4 <usbdc_register_handler+0x34>)
    cac6:	4798      	blx	r3
		break;
    cac8:	e7f9      	b.n	cabe <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    caca:	4805      	ldr	r0, [pc, #20]	; (cae0 <usbdc_register_handler+0x30>)
    cacc:	3008      	adds	r0, #8
    cace:	4b05      	ldr	r3, [pc, #20]	; (cae4 <usbdc_register_handler+0x34>)
    cad0:	4798      	blx	r3
		break;
    cad2:	e7f4      	b.n	cabe <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    cad4:	4802      	ldr	r0, [pc, #8]	; (cae0 <usbdc_register_handler+0x30>)
    cad6:	300c      	adds	r0, #12
    cad8:	4b02      	ldr	r3, [pc, #8]	; (cae4 <usbdc_register_handler+0x34>)
    cada:	4798      	blx	r3
}
    cadc:	e7ef      	b.n	cabe <usbdc_register_handler+0xe>
    cade:	46c0      	nop			; (mov r8, r8)
    cae0:	20000708 	.word	0x20000708
    cae4:	000095fd 	.word	0x000095fd

0000cae8 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    cae8:	b570      	push	{r4, r5, r6, lr}
    caea:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    caec:	1e43      	subs	r3, r0, #1
    caee:	4198      	sbcs	r0, r3
    caf0:	b2c0      	uxtb	r0, r0
    caf2:	4a0c      	ldr	r2, [pc, #48]	; (cb24 <usbdc_init+0x3c>)
    caf4:	490c      	ldr	r1, [pc, #48]	; (cb28 <usbdc_init+0x40>)
    caf6:	4b0d      	ldr	r3, [pc, #52]	; (cb2c <usbdc_init+0x44>)
    caf8:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    cafa:	4b0d      	ldr	r3, [pc, #52]	; (cb30 <usbdc_init+0x48>)
    cafc:	4798      	blx	r3
	if (rc < 0) {
    cafe:	2800      	cmp	r0, #0
    cb00:	db0e      	blt.n	cb20 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    cb02:	4d0c      	ldr	r5, [pc, #48]	; (cb34 <usbdc_init+0x4c>)
    cb04:	2220      	movs	r2, #32
    cb06:	2100      	movs	r1, #0
    cb08:	0028      	movs	r0, r5
    cb0a:	4b0b      	ldr	r3, [pc, #44]	; (cb38 <usbdc_init+0x50>)
    cb0c:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    cb0e:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    cb10:	490a      	ldr	r1, [pc, #40]	; (cb3c <usbdc_init+0x54>)
    cb12:	2000      	movs	r0, #0
    cb14:	4c0a      	ldr	r4, [pc, #40]	; (cb40 <usbdc_init+0x58>)
    cb16:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    cb18:	490a      	ldr	r1, [pc, #40]	; (cb44 <usbdc_init+0x5c>)
    cb1a:	2001      	movs	r0, #1
    cb1c:	47a0      	blx	r4

	return 0;
    cb1e:	2000      	movs	r0, #0
}
    cb20:	bd70      	pop	{r4, r5, r6, pc}
    cb22:	46c0      	nop			; (mov r8, r8)
    cb24:	00000355 	.word	0x00000355
    cb28:	0000ebb8 	.word	0x0000ebb8
    cb2c:	0000959d 	.word	0x0000959d
    cb30:	00009249 	.word	0x00009249
    cb34:	20000708 	.word	0x20000708
    cb38:	0000db5b 	.word	0x0000db5b
    cb3c:	0000c53d 	.word	0x0000c53d
    cb40:	000092ad 	.word	0x000092ad
    cb44:	0000c631 	.word	0x0000c631

0000cb48 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    cb48:	b510      	push	{r4, lr}
    cb4a:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    cb4c:	4802      	ldr	r0, [pc, #8]	; (cb58 <usbdc_register_function+0x10>)
    cb4e:	3010      	adds	r0, #16
    cb50:	4b02      	ldr	r3, [pc, #8]	; (cb5c <usbdc_register_function+0x14>)
    cb52:	4798      	blx	r3
}
    cb54:	bd10      	pop	{r4, pc}
    cb56:	46c0      	nop			; (mov r8, r8)
    cb58:	20000708 	.word	0x20000708
    cb5c:	000095fd 	.word	0x000095fd

0000cb60 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    cb60:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    cb62:	4b0b      	ldr	r3, [pc, #44]	; (cb90 <usbdc_start+0x30>)
    cb64:	7e9b      	ldrb	r3, [r3, #26]
    cb66:	2b00      	cmp	r3, #0
    cb68:	d10c      	bne.n	cb84 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    cb6a:	2800      	cmp	r0, #0
    cb6c:	d00d      	beq.n	cb8a <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    cb6e:	4b08      	ldr	r3, [pc, #32]	; (cb90 <usbdc_start+0x30>)
    cb70:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    cb72:	6802      	ldr	r2, [r0, #0]
    cb74:	79d2      	ldrb	r2, [r2, #7]
    cb76:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    cb78:	2201      	movs	r2, #1
    cb7a:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    cb7c:	4b05      	ldr	r3, [pc, #20]	; (cb94 <usbdc_start+0x34>)
    cb7e:	4798      	blx	r3
	return ERR_NONE;
    cb80:	2000      	movs	r0, #0
}
    cb82:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    cb84:	2004      	movs	r0, #4
    cb86:	4240      	negs	r0, r0
    cb88:	e7fb      	b.n	cb82 <usbdc_start+0x22>
		return ERR_BAD_DATA;
    cb8a:	2009      	movs	r0, #9
    cb8c:	4240      	negs	r0, r0
    cb8e:	e7f8      	b.n	cb82 <usbdc_start+0x22>
    cb90:	20000708 	.word	0x20000708
    cb94:	000092b9 	.word	0x000092b9

0000cb98 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    cb98:	b510      	push	{r4, lr}
	usb_d_attach();
    cb9a:	4b01      	ldr	r3, [pc, #4]	; (cba0 <usbdc_attach+0x8>)
    cb9c:	4798      	blx	r3
}
    cb9e:	bd10      	pop	{r4, pc}
    cba0:	000092c5 	.word	0x000092c5

0000cba4 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    cba4:	4b01      	ldr	r3, [pc, #4]	; (cbac <usbdc_get_ctrl_buffer+0x8>)
    cba6:	6958      	ldr	r0, [r3, #20]
}
    cba8:	4770      	bx	lr
    cbaa:	46c0      	nop			; (mov r8, r8)
    cbac:	20000708 	.word	0x20000708

0000cbb0 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    cbb0:	4b02      	ldr	r3, [pc, #8]	; (cbbc <usbdc_get_state+0xc>)
    cbb2:	7e98      	ldrb	r0, [r3, #26]
    cbb4:	06c3      	lsls	r3, r0, #27
    cbb6:	d500      	bpl.n	cbba <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    cbb8:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    cbba:	4770      	bx	lr
    cbbc:	20000708 	.word	0x20000708

0000cbc0 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    cbc0:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cbc2:	4288      	cmp	r0, r1
    cbc4:	d211      	bcs.n	cbea <usb_find_desc+0x2a>
	return desc[0];
    cbc6:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cbc8:	2b01      	cmp	r3, #1
    cbca:	d910      	bls.n	cbee <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    cbcc:	7844      	ldrb	r4, [r0, #1]
    cbce:	4294      	cmp	r4, r2
    cbd0:	d00a      	beq.n	cbe8 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    cbd2:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    cbd4:	4281      	cmp	r1, r0
    cbd6:	d906      	bls.n	cbe6 <usb_find_desc+0x26>
	return desc[0];
    cbd8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cbda:	2b01      	cmp	r3, #1
    cbdc:	d909      	bls.n	cbf2 <usb_find_desc+0x32>
	return desc[1];
    cbde:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    cbe0:	4294      	cmp	r4, r2
    cbe2:	d1f6      	bne.n	cbd2 <usb_find_desc+0x12>
    cbe4:	e000      	b.n	cbe8 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    cbe6:	2000      	movs	r0, #0
}
    cbe8:	bd10      	pop	{r4, pc}
	return NULL;
    cbea:	2000      	movs	r0, #0
    cbec:	e7fc      	b.n	cbe8 <usb_find_desc+0x28>
		_desc_len_check();
    cbee:	2000      	movs	r0, #0
    cbf0:	e7fa      	b.n	cbe8 <usb_find_desc+0x28>
    cbf2:	2000      	movs	r0, #0
    cbf4:	e7f8      	b.n	cbe8 <usb_find_desc+0x28>

0000cbf6 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    cbf6:	4288      	cmp	r0, r1
    cbf8:	d215      	bcs.n	cc26 <usb_find_ep_desc+0x30>
	return desc[0];
    cbfa:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cbfc:	2b01      	cmp	r3, #1
    cbfe:	d914      	bls.n	cc2a <usb_find_ep_desc+0x34>
	return desc[1];
    cc00:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    cc02:	2a04      	cmp	r2, #4
    cc04:	d013      	beq.n	cc2e <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    cc06:	2a05      	cmp	r2, #5
    cc08:	d00c      	beq.n	cc24 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    cc0a:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    cc0c:	4281      	cmp	r1, r0
    cc0e:	d908      	bls.n	cc22 <usb_find_ep_desc+0x2c>
	return desc[0];
    cc10:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    cc12:	2b01      	cmp	r3, #1
    cc14:	d90d      	bls.n	cc32 <usb_find_ep_desc+0x3c>
	return desc[1];
    cc16:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    cc18:	2a04      	cmp	r2, #4
    cc1a:	d00c      	beq.n	cc36 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    cc1c:	2a05      	cmp	r2, #5
    cc1e:	d1f4      	bne.n	cc0a <usb_find_ep_desc+0x14>
    cc20:	e000      	b.n	cc24 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    cc22:	2000      	movs	r0, #0
}
    cc24:	4770      	bx	lr
	return NULL;
    cc26:	2000      	movs	r0, #0
    cc28:	e7fc      	b.n	cc24 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    cc2a:	2000      	movs	r0, #0
    cc2c:	e7fa      	b.n	cc24 <usb_find_ep_desc+0x2e>
	return NULL;
    cc2e:	2000      	movs	r0, #0
    cc30:	e7f8      	b.n	cc24 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    cc32:	2000      	movs	r0, #0
    cc34:	e7f6      	b.n	cc24 <usb_find_ep_desc+0x2e>
	return NULL;
    cc36:	2000      	movs	r0, #0
    cc38:	e7f4      	b.n	cc24 <usb_find_ep_desc+0x2e>
	...

0000cc3c <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    cc3c:	b570      	push	{r4, r5, r6, lr}
    cc3e:	000c      	movs	r4, r1
    cc40:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    cc42:	2202      	movs	r2, #2
    cc44:	4b16      	ldr	r3, [pc, #88]	; (cca0 <usb_find_cfg_desc+0x64>)
    cc46:	4798      	blx	r3
	if (!desc) {
    cc48:	2800      	cmp	r0, #0
    cc4a:	d01d      	beq.n	cc88 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    cc4c:	4284      	cmp	r4, r0
    cc4e:	d91c      	bls.n	cc8a <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    cc50:	7803      	ldrb	r3, [r0, #0]
    cc52:	2b01      	cmp	r3, #1
    cc54:	d91b      	bls.n	cc8e <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    cc56:	7843      	ldrb	r3, [r0, #1]
    cc58:	2b02      	cmp	r3, #2
    cc5a:	d11a      	bne.n	cc92 <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    cc5c:	7943      	ldrb	r3, [r0, #5]
    cc5e:	42ab      	cmp	r3, r5
    cc60:	d012      	beq.n	cc88 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    cc62:	78c2      	ldrb	r2, [r0, #3]
    cc64:	0212      	lsls	r2, r2, #8
    cc66:	7883      	ldrb	r3, [r0, #2]
    cc68:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    cc6a:	b29b      	uxth	r3, r3
    cc6c:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    cc6e:	4284      	cmp	r4, r0
    cc70:	d909      	bls.n	cc86 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    cc72:	7803      	ldrb	r3, [r0, #0]
    cc74:	2b01      	cmp	r3, #1
    cc76:	d90e      	bls.n	cc96 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    cc78:	7843      	ldrb	r3, [r0, #1]
    cc7a:	2b02      	cmp	r3, #2
    cc7c:	d10d      	bne.n	cc9a <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    cc7e:	7943      	ldrb	r3, [r0, #5]
    cc80:	42ab      	cmp	r3, r5
    cc82:	d1ee      	bne.n	cc62 <usb_find_cfg_desc+0x26>
    cc84:	e000      	b.n	cc88 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    cc86:	2000      	movs	r0, #0
}
    cc88:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    cc8a:	2000      	movs	r0, #0
    cc8c:	e7fc      	b.n	cc88 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    cc8e:	2000      	movs	r0, #0
    cc90:	e7fa      	b.n	cc88 <usb_find_cfg_desc+0x4c>
	return NULL;
    cc92:	2000      	movs	r0, #0
    cc94:	e7f8      	b.n	cc88 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    cc96:	2000      	movs	r0, #0
    cc98:	e7f6      	b.n	cc88 <usb_find_cfg_desc+0x4c>
	return NULL;
    cc9a:	2000      	movs	r0, #0
    cc9c:	e7f4      	b.n	cc88 <usb_find_cfg_desc+0x4c>
    cc9e:	46c0      	nop			; (mov r8, r8)
    cca0:	0000cbc1 	.word	0x0000cbc1

0000cca4 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    cca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cca6:	000d      	movs	r5, r1
    cca8:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    ccaa:	4288      	cmp	r0, r1
    ccac:	d212      	bcs.n	ccd4 <usb_find_str_desc+0x30>
    ccae:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ccb0:	4e0a      	ldr	r6, [pc, #40]	; (ccdc <usb_find_str_desc+0x38>)
    ccb2:	2203      	movs	r2, #3
    ccb4:	0029      	movs	r1, r5
    ccb6:	47b0      	blx	r6
		if (desc) {
    ccb8:	2800      	cmp	r0, #0
    ccba:	d00e      	beq.n	ccda <usb_find_str_desc+0x36>
	return desc[0];
    ccbc:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    ccbe:	2b01      	cmp	r3, #1
    ccc0:	d90a      	bls.n	ccd8 <usb_find_str_desc+0x34>
			if (i == str_index) {
    ccc2:	42a7      	cmp	r7, r4
    ccc4:	d009      	beq.n	ccda <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    ccc6:	3401      	adds	r4, #1
    ccc8:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    ccca:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    cccc:	4285      	cmp	r5, r0
    ccce:	d8f0      	bhi.n	ccb2 <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    ccd0:	2000      	movs	r0, #0
    ccd2:	e002      	b.n	ccda <usb_find_str_desc+0x36>
    ccd4:	2000      	movs	r0, #0
    ccd6:	e000      	b.n	ccda <usb_find_str_desc+0x36>
			_desc_len_check();
    ccd8:	2000      	movs	r0, #0
}
    ccda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ccdc:	0000cbc1 	.word	0x0000cbc1

0000cce0 <__udivsi3>:
    cce0:	2200      	movs	r2, #0
    cce2:	0843      	lsrs	r3, r0, #1
    cce4:	428b      	cmp	r3, r1
    cce6:	d374      	bcc.n	cdd2 <__udivsi3+0xf2>
    cce8:	0903      	lsrs	r3, r0, #4
    ccea:	428b      	cmp	r3, r1
    ccec:	d35f      	bcc.n	cdae <__udivsi3+0xce>
    ccee:	0a03      	lsrs	r3, r0, #8
    ccf0:	428b      	cmp	r3, r1
    ccf2:	d344      	bcc.n	cd7e <__udivsi3+0x9e>
    ccf4:	0b03      	lsrs	r3, r0, #12
    ccf6:	428b      	cmp	r3, r1
    ccf8:	d328      	bcc.n	cd4c <__udivsi3+0x6c>
    ccfa:	0c03      	lsrs	r3, r0, #16
    ccfc:	428b      	cmp	r3, r1
    ccfe:	d30d      	bcc.n	cd1c <__udivsi3+0x3c>
    cd00:	22ff      	movs	r2, #255	; 0xff
    cd02:	0209      	lsls	r1, r1, #8
    cd04:	ba12      	rev	r2, r2
    cd06:	0c03      	lsrs	r3, r0, #16
    cd08:	428b      	cmp	r3, r1
    cd0a:	d302      	bcc.n	cd12 <__udivsi3+0x32>
    cd0c:	1212      	asrs	r2, r2, #8
    cd0e:	0209      	lsls	r1, r1, #8
    cd10:	d065      	beq.n	cdde <__udivsi3+0xfe>
    cd12:	0b03      	lsrs	r3, r0, #12
    cd14:	428b      	cmp	r3, r1
    cd16:	d319      	bcc.n	cd4c <__udivsi3+0x6c>
    cd18:	e000      	b.n	cd1c <__udivsi3+0x3c>
    cd1a:	0a09      	lsrs	r1, r1, #8
    cd1c:	0bc3      	lsrs	r3, r0, #15
    cd1e:	428b      	cmp	r3, r1
    cd20:	d301      	bcc.n	cd26 <__udivsi3+0x46>
    cd22:	03cb      	lsls	r3, r1, #15
    cd24:	1ac0      	subs	r0, r0, r3
    cd26:	4152      	adcs	r2, r2
    cd28:	0b83      	lsrs	r3, r0, #14
    cd2a:	428b      	cmp	r3, r1
    cd2c:	d301      	bcc.n	cd32 <__udivsi3+0x52>
    cd2e:	038b      	lsls	r3, r1, #14
    cd30:	1ac0      	subs	r0, r0, r3
    cd32:	4152      	adcs	r2, r2
    cd34:	0b43      	lsrs	r3, r0, #13
    cd36:	428b      	cmp	r3, r1
    cd38:	d301      	bcc.n	cd3e <__udivsi3+0x5e>
    cd3a:	034b      	lsls	r3, r1, #13
    cd3c:	1ac0      	subs	r0, r0, r3
    cd3e:	4152      	adcs	r2, r2
    cd40:	0b03      	lsrs	r3, r0, #12
    cd42:	428b      	cmp	r3, r1
    cd44:	d301      	bcc.n	cd4a <__udivsi3+0x6a>
    cd46:	030b      	lsls	r3, r1, #12
    cd48:	1ac0      	subs	r0, r0, r3
    cd4a:	4152      	adcs	r2, r2
    cd4c:	0ac3      	lsrs	r3, r0, #11
    cd4e:	428b      	cmp	r3, r1
    cd50:	d301      	bcc.n	cd56 <__udivsi3+0x76>
    cd52:	02cb      	lsls	r3, r1, #11
    cd54:	1ac0      	subs	r0, r0, r3
    cd56:	4152      	adcs	r2, r2
    cd58:	0a83      	lsrs	r3, r0, #10
    cd5a:	428b      	cmp	r3, r1
    cd5c:	d301      	bcc.n	cd62 <__udivsi3+0x82>
    cd5e:	028b      	lsls	r3, r1, #10
    cd60:	1ac0      	subs	r0, r0, r3
    cd62:	4152      	adcs	r2, r2
    cd64:	0a43      	lsrs	r3, r0, #9
    cd66:	428b      	cmp	r3, r1
    cd68:	d301      	bcc.n	cd6e <__udivsi3+0x8e>
    cd6a:	024b      	lsls	r3, r1, #9
    cd6c:	1ac0      	subs	r0, r0, r3
    cd6e:	4152      	adcs	r2, r2
    cd70:	0a03      	lsrs	r3, r0, #8
    cd72:	428b      	cmp	r3, r1
    cd74:	d301      	bcc.n	cd7a <__udivsi3+0x9a>
    cd76:	020b      	lsls	r3, r1, #8
    cd78:	1ac0      	subs	r0, r0, r3
    cd7a:	4152      	adcs	r2, r2
    cd7c:	d2cd      	bcs.n	cd1a <__udivsi3+0x3a>
    cd7e:	09c3      	lsrs	r3, r0, #7
    cd80:	428b      	cmp	r3, r1
    cd82:	d301      	bcc.n	cd88 <__udivsi3+0xa8>
    cd84:	01cb      	lsls	r3, r1, #7
    cd86:	1ac0      	subs	r0, r0, r3
    cd88:	4152      	adcs	r2, r2
    cd8a:	0983      	lsrs	r3, r0, #6
    cd8c:	428b      	cmp	r3, r1
    cd8e:	d301      	bcc.n	cd94 <__udivsi3+0xb4>
    cd90:	018b      	lsls	r3, r1, #6
    cd92:	1ac0      	subs	r0, r0, r3
    cd94:	4152      	adcs	r2, r2
    cd96:	0943      	lsrs	r3, r0, #5
    cd98:	428b      	cmp	r3, r1
    cd9a:	d301      	bcc.n	cda0 <__udivsi3+0xc0>
    cd9c:	014b      	lsls	r3, r1, #5
    cd9e:	1ac0      	subs	r0, r0, r3
    cda0:	4152      	adcs	r2, r2
    cda2:	0903      	lsrs	r3, r0, #4
    cda4:	428b      	cmp	r3, r1
    cda6:	d301      	bcc.n	cdac <__udivsi3+0xcc>
    cda8:	010b      	lsls	r3, r1, #4
    cdaa:	1ac0      	subs	r0, r0, r3
    cdac:	4152      	adcs	r2, r2
    cdae:	08c3      	lsrs	r3, r0, #3
    cdb0:	428b      	cmp	r3, r1
    cdb2:	d301      	bcc.n	cdb8 <__udivsi3+0xd8>
    cdb4:	00cb      	lsls	r3, r1, #3
    cdb6:	1ac0      	subs	r0, r0, r3
    cdb8:	4152      	adcs	r2, r2
    cdba:	0883      	lsrs	r3, r0, #2
    cdbc:	428b      	cmp	r3, r1
    cdbe:	d301      	bcc.n	cdc4 <__udivsi3+0xe4>
    cdc0:	008b      	lsls	r3, r1, #2
    cdc2:	1ac0      	subs	r0, r0, r3
    cdc4:	4152      	adcs	r2, r2
    cdc6:	0843      	lsrs	r3, r0, #1
    cdc8:	428b      	cmp	r3, r1
    cdca:	d301      	bcc.n	cdd0 <__udivsi3+0xf0>
    cdcc:	004b      	lsls	r3, r1, #1
    cdce:	1ac0      	subs	r0, r0, r3
    cdd0:	4152      	adcs	r2, r2
    cdd2:	1a41      	subs	r1, r0, r1
    cdd4:	d200      	bcs.n	cdd8 <__udivsi3+0xf8>
    cdd6:	4601      	mov	r1, r0
    cdd8:	4152      	adcs	r2, r2
    cdda:	4610      	mov	r0, r2
    cddc:	4770      	bx	lr
    cdde:	e7ff      	b.n	cde0 <__udivsi3+0x100>
    cde0:	b501      	push	{r0, lr}
    cde2:	2000      	movs	r0, #0
    cde4:	f000 f8f0 	bl	cfc8 <__aeabi_idiv0>
    cde8:	bd02      	pop	{r1, pc}
    cdea:	46c0      	nop			; (mov r8, r8)

0000cdec <__aeabi_uidivmod>:
    cdec:	2900      	cmp	r1, #0
    cdee:	d0f7      	beq.n	cde0 <__udivsi3+0x100>
    cdf0:	e776      	b.n	cce0 <__udivsi3>
    cdf2:	4770      	bx	lr

0000cdf4 <__divsi3>:
    cdf4:	4603      	mov	r3, r0
    cdf6:	430b      	orrs	r3, r1
    cdf8:	d47f      	bmi.n	cefa <__divsi3+0x106>
    cdfa:	2200      	movs	r2, #0
    cdfc:	0843      	lsrs	r3, r0, #1
    cdfe:	428b      	cmp	r3, r1
    ce00:	d374      	bcc.n	ceec <__divsi3+0xf8>
    ce02:	0903      	lsrs	r3, r0, #4
    ce04:	428b      	cmp	r3, r1
    ce06:	d35f      	bcc.n	cec8 <__divsi3+0xd4>
    ce08:	0a03      	lsrs	r3, r0, #8
    ce0a:	428b      	cmp	r3, r1
    ce0c:	d344      	bcc.n	ce98 <__divsi3+0xa4>
    ce0e:	0b03      	lsrs	r3, r0, #12
    ce10:	428b      	cmp	r3, r1
    ce12:	d328      	bcc.n	ce66 <__divsi3+0x72>
    ce14:	0c03      	lsrs	r3, r0, #16
    ce16:	428b      	cmp	r3, r1
    ce18:	d30d      	bcc.n	ce36 <__divsi3+0x42>
    ce1a:	22ff      	movs	r2, #255	; 0xff
    ce1c:	0209      	lsls	r1, r1, #8
    ce1e:	ba12      	rev	r2, r2
    ce20:	0c03      	lsrs	r3, r0, #16
    ce22:	428b      	cmp	r3, r1
    ce24:	d302      	bcc.n	ce2c <__divsi3+0x38>
    ce26:	1212      	asrs	r2, r2, #8
    ce28:	0209      	lsls	r1, r1, #8
    ce2a:	d065      	beq.n	cef8 <__divsi3+0x104>
    ce2c:	0b03      	lsrs	r3, r0, #12
    ce2e:	428b      	cmp	r3, r1
    ce30:	d319      	bcc.n	ce66 <__divsi3+0x72>
    ce32:	e000      	b.n	ce36 <__divsi3+0x42>
    ce34:	0a09      	lsrs	r1, r1, #8
    ce36:	0bc3      	lsrs	r3, r0, #15
    ce38:	428b      	cmp	r3, r1
    ce3a:	d301      	bcc.n	ce40 <__divsi3+0x4c>
    ce3c:	03cb      	lsls	r3, r1, #15
    ce3e:	1ac0      	subs	r0, r0, r3
    ce40:	4152      	adcs	r2, r2
    ce42:	0b83      	lsrs	r3, r0, #14
    ce44:	428b      	cmp	r3, r1
    ce46:	d301      	bcc.n	ce4c <__divsi3+0x58>
    ce48:	038b      	lsls	r3, r1, #14
    ce4a:	1ac0      	subs	r0, r0, r3
    ce4c:	4152      	adcs	r2, r2
    ce4e:	0b43      	lsrs	r3, r0, #13
    ce50:	428b      	cmp	r3, r1
    ce52:	d301      	bcc.n	ce58 <__divsi3+0x64>
    ce54:	034b      	lsls	r3, r1, #13
    ce56:	1ac0      	subs	r0, r0, r3
    ce58:	4152      	adcs	r2, r2
    ce5a:	0b03      	lsrs	r3, r0, #12
    ce5c:	428b      	cmp	r3, r1
    ce5e:	d301      	bcc.n	ce64 <__divsi3+0x70>
    ce60:	030b      	lsls	r3, r1, #12
    ce62:	1ac0      	subs	r0, r0, r3
    ce64:	4152      	adcs	r2, r2
    ce66:	0ac3      	lsrs	r3, r0, #11
    ce68:	428b      	cmp	r3, r1
    ce6a:	d301      	bcc.n	ce70 <__divsi3+0x7c>
    ce6c:	02cb      	lsls	r3, r1, #11
    ce6e:	1ac0      	subs	r0, r0, r3
    ce70:	4152      	adcs	r2, r2
    ce72:	0a83      	lsrs	r3, r0, #10
    ce74:	428b      	cmp	r3, r1
    ce76:	d301      	bcc.n	ce7c <__divsi3+0x88>
    ce78:	028b      	lsls	r3, r1, #10
    ce7a:	1ac0      	subs	r0, r0, r3
    ce7c:	4152      	adcs	r2, r2
    ce7e:	0a43      	lsrs	r3, r0, #9
    ce80:	428b      	cmp	r3, r1
    ce82:	d301      	bcc.n	ce88 <__divsi3+0x94>
    ce84:	024b      	lsls	r3, r1, #9
    ce86:	1ac0      	subs	r0, r0, r3
    ce88:	4152      	adcs	r2, r2
    ce8a:	0a03      	lsrs	r3, r0, #8
    ce8c:	428b      	cmp	r3, r1
    ce8e:	d301      	bcc.n	ce94 <__divsi3+0xa0>
    ce90:	020b      	lsls	r3, r1, #8
    ce92:	1ac0      	subs	r0, r0, r3
    ce94:	4152      	adcs	r2, r2
    ce96:	d2cd      	bcs.n	ce34 <__divsi3+0x40>
    ce98:	09c3      	lsrs	r3, r0, #7
    ce9a:	428b      	cmp	r3, r1
    ce9c:	d301      	bcc.n	cea2 <__divsi3+0xae>
    ce9e:	01cb      	lsls	r3, r1, #7
    cea0:	1ac0      	subs	r0, r0, r3
    cea2:	4152      	adcs	r2, r2
    cea4:	0983      	lsrs	r3, r0, #6
    cea6:	428b      	cmp	r3, r1
    cea8:	d301      	bcc.n	ceae <__divsi3+0xba>
    ceaa:	018b      	lsls	r3, r1, #6
    ceac:	1ac0      	subs	r0, r0, r3
    ceae:	4152      	adcs	r2, r2
    ceb0:	0943      	lsrs	r3, r0, #5
    ceb2:	428b      	cmp	r3, r1
    ceb4:	d301      	bcc.n	ceba <__divsi3+0xc6>
    ceb6:	014b      	lsls	r3, r1, #5
    ceb8:	1ac0      	subs	r0, r0, r3
    ceba:	4152      	adcs	r2, r2
    cebc:	0903      	lsrs	r3, r0, #4
    cebe:	428b      	cmp	r3, r1
    cec0:	d301      	bcc.n	cec6 <__divsi3+0xd2>
    cec2:	010b      	lsls	r3, r1, #4
    cec4:	1ac0      	subs	r0, r0, r3
    cec6:	4152      	adcs	r2, r2
    cec8:	08c3      	lsrs	r3, r0, #3
    ceca:	428b      	cmp	r3, r1
    cecc:	d301      	bcc.n	ced2 <__divsi3+0xde>
    cece:	00cb      	lsls	r3, r1, #3
    ced0:	1ac0      	subs	r0, r0, r3
    ced2:	4152      	adcs	r2, r2
    ced4:	0883      	lsrs	r3, r0, #2
    ced6:	428b      	cmp	r3, r1
    ced8:	d301      	bcc.n	cede <__divsi3+0xea>
    ceda:	008b      	lsls	r3, r1, #2
    cedc:	1ac0      	subs	r0, r0, r3
    cede:	4152      	adcs	r2, r2
    cee0:	0843      	lsrs	r3, r0, #1
    cee2:	428b      	cmp	r3, r1
    cee4:	d301      	bcc.n	ceea <__divsi3+0xf6>
    cee6:	004b      	lsls	r3, r1, #1
    cee8:	1ac0      	subs	r0, r0, r3
    ceea:	4152      	adcs	r2, r2
    ceec:	1a41      	subs	r1, r0, r1
    ceee:	d200      	bcs.n	cef2 <__divsi3+0xfe>
    cef0:	4601      	mov	r1, r0
    cef2:	4152      	adcs	r2, r2
    cef4:	4610      	mov	r0, r2
    cef6:	4770      	bx	lr
    cef8:	e05d      	b.n	cfb6 <__divsi3+0x1c2>
    cefa:	0fca      	lsrs	r2, r1, #31
    cefc:	d000      	beq.n	cf00 <__divsi3+0x10c>
    cefe:	4249      	negs	r1, r1
    cf00:	1003      	asrs	r3, r0, #32
    cf02:	d300      	bcc.n	cf06 <__divsi3+0x112>
    cf04:	4240      	negs	r0, r0
    cf06:	4053      	eors	r3, r2
    cf08:	2200      	movs	r2, #0
    cf0a:	469c      	mov	ip, r3
    cf0c:	0903      	lsrs	r3, r0, #4
    cf0e:	428b      	cmp	r3, r1
    cf10:	d32d      	bcc.n	cf6e <__divsi3+0x17a>
    cf12:	0a03      	lsrs	r3, r0, #8
    cf14:	428b      	cmp	r3, r1
    cf16:	d312      	bcc.n	cf3e <__divsi3+0x14a>
    cf18:	22fc      	movs	r2, #252	; 0xfc
    cf1a:	0189      	lsls	r1, r1, #6
    cf1c:	ba12      	rev	r2, r2
    cf1e:	0a03      	lsrs	r3, r0, #8
    cf20:	428b      	cmp	r3, r1
    cf22:	d30c      	bcc.n	cf3e <__divsi3+0x14a>
    cf24:	0189      	lsls	r1, r1, #6
    cf26:	1192      	asrs	r2, r2, #6
    cf28:	428b      	cmp	r3, r1
    cf2a:	d308      	bcc.n	cf3e <__divsi3+0x14a>
    cf2c:	0189      	lsls	r1, r1, #6
    cf2e:	1192      	asrs	r2, r2, #6
    cf30:	428b      	cmp	r3, r1
    cf32:	d304      	bcc.n	cf3e <__divsi3+0x14a>
    cf34:	0189      	lsls	r1, r1, #6
    cf36:	d03a      	beq.n	cfae <__divsi3+0x1ba>
    cf38:	1192      	asrs	r2, r2, #6
    cf3a:	e000      	b.n	cf3e <__divsi3+0x14a>
    cf3c:	0989      	lsrs	r1, r1, #6
    cf3e:	09c3      	lsrs	r3, r0, #7
    cf40:	428b      	cmp	r3, r1
    cf42:	d301      	bcc.n	cf48 <__divsi3+0x154>
    cf44:	01cb      	lsls	r3, r1, #7
    cf46:	1ac0      	subs	r0, r0, r3
    cf48:	4152      	adcs	r2, r2
    cf4a:	0983      	lsrs	r3, r0, #6
    cf4c:	428b      	cmp	r3, r1
    cf4e:	d301      	bcc.n	cf54 <__divsi3+0x160>
    cf50:	018b      	lsls	r3, r1, #6
    cf52:	1ac0      	subs	r0, r0, r3
    cf54:	4152      	adcs	r2, r2
    cf56:	0943      	lsrs	r3, r0, #5
    cf58:	428b      	cmp	r3, r1
    cf5a:	d301      	bcc.n	cf60 <__divsi3+0x16c>
    cf5c:	014b      	lsls	r3, r1, #5
    cf5e:	1ac0      	subs	r0, r0, r3
    cf60:	4152      	adcs	r2, r2
    cf62:	0903      	lsrs	r3, r0, #4
    cf64:	428b      	cmp	r3, r1
    cf66:	d301      	bcc.n	cf6c <__divsi3+0x178>
    cf68:	010b      	lsls	r3, r1, #4
    cf6a:	1ac0      	subs	r0, r0, r3
    cf6c:	4152      	adcs	r2, r2
    cf6e:	08c3      	lsrs	r3, r0, #3
    cf70:	428b      	cmp	r3, r1
    cf72:	d301      	bcc.n	cf78 <__divsi3+0x184>
    cf74:	00cb      	lsls	r3, r1, #3
    cf76:	1ac0      	subs	r0, r0, r3
    cf78:	4152      	adcs	r2, r2
    cf7a:	0883      	lsrs	r3, r0, #2
    cf7c:	428b      	cmp	r3, r1
    cf7e:	d301      	bcc.n	cf84 <__divsi3+0x190>
    cf80:	008b      	lsls	r3, r1, #2
    cf82:	1ac0      	subs	r0, r0, r3
    cf84:	4152      	adcs	r2, r2
    cf86:	d2d9      	bcs.n	cf3c <__divsi3+0x148>
    cf88:	0843      	lsrs	r3, r0, #1
    cf8a:	428b      	cmp	r3, r1
    cf8c:	d301      	bcc.n	cf92 <__divsi3+0x19e>
    cf8e:	004b      	lsls	r3, r1, #1
    cf90:	1ac0      	subs	r0, r0, r3
    cf92:	4152      	adcs	r2, r2
    cf94:	1a41      	subs	r1, r0, r1
    cf96:	d200      	bcs.n	cf9a <__divsi3+0x1a6>
    cf98:	4601      	mov	r1, r0
    cf9a:	4663      	mov	r3, ip
    cf9c:	4152      	adcs	r2, r2
    cf9e:	105b      	asrs	r3, r3, #1
    cfa0:	4610      	mov	r0, r2
    cfa2:	d301      	bcc.n	cfa8 <__divsi3+0x1b4>
    cfa4:	4240      	negs	r0, r0
    cfa6:	2b00      	cmp	r3, #0
    cfa8:	d500      	bpl.n	cfac <__divsi3+0x1b8>
    cfaa:	4249      	negs	r1, r1
    cfac:	4770      	bx	lr
    cfae:	4663      	mov	r3, ip
    cfb0:	105b      	asrs	r3, r3, #1
    cfb2:	d300      	bcc.n	cfb6 <__divsi3+0x1c2>
    cfb4:	4240      	negs	r0, r0
    cfb6:	b501      	push	{r0, lr}
    cfb8:	2000      	movs	r0, #0
    cfba:	f000 f805 	bl	cfc8 <__aeabi_idiv0>
    cfbe:	bd02      	pop	{r1, pc}

0000cfc0 <__aeabi_idivmod>:
    cfc0:	2900      	cmp	r1, #0
    cfc2:	d0f8      	beq.n	cfb6 <__divsi3+0x1c2>
    cfc4:	e716      	b.n	cdf4 <__divsi3>
    cfc6:	4770      	bx	lr

0000cfc8 <__aeabi_idiv0>:
    cfc8:	4770      	bx	lr
    cfca:	46c0      	nop			; (mov r8, r8)

0000cfcc <__aeabi_f2uiz>:
    cfcc:	219e      	movs	r1, #158	; 0x9e
    cfce:	b510      	push	{r4, lr}
    cfd0:	05c9      	lsls	r1, r1, #23
    cfd2:	1c04      	adds	r4, r0, #0
    cfd4:	f000 fcac 	bl	d930 <__aeabi_fcmpge>
    cfd8:	2800      	cmp	r0, #0
    cfda:	d103      	bne.n	cfe4 <__aeabi_f2uiz+0x18>
    cfdc:	1c20      	adds	r0, r4, #0
    cfde:	f000 fc11 	bl	d804 <__aeabi_f2iz>
    cfe2:	bd10      	pop	{r4, pc}
    cfe4:	219e      	movs	r1, #158	; 0x9e
    cfe6:	1c20      	adds	r0, r4, #0
    cfe8:	05c9      	lsls	r1, r1, #23
    cfea:	f000 fa6f 	bl	d4cc <__aeabi_fsub>
    cfee:	f000 fc09 	bl	d804 <__aeabi_f2iz>
    cff2:	2380      	movs	r3, #128	; 0x80
    cff4:	061b      	lsls	r3, r3, #24
    cff6:	469c      	mov	ip, r3
    cff8:	4460      	add	r0, ip
    cffa:	e7f2      	b.n	cfe2 <__aeabi_f2uiz+0x16>

0000cffc <__aeabi_fdiv>:
    cffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cffe:	4657      	mov	r7, sl
    d000:	464e      	mov	r6, r9
    d002:	46de      	mov	lr, fp
    d004:	4645      	mov	r5, r8
    d006:	b5e0      	push	{r5, r6, r7, lr}
    d008:	0244      	lsls	r4, r0, #9
    d00a:	0043      	lsls	r3, r0, #1
    d00c:	0fc6      	lsrs	r6, r0, #31
    d00e:	b083      	sub	sp, #12
    d010:	1c0f      	adds	r7, r1, #0
    d012:	0a64      	lsrs	r4, r4, #9
    d014:	0e1b      	lsrs	r3, r3, #24
    d016:	46b2      	mov	sl, r6
    d018:	d053      	beq.n	d0c2 <__aeabi_fdiv+0xc6>
    d01a:	2bff      	cmp	r3, #255	; 0xff
    d01c:	d027      	beq.n	d06e <__aeabi_fdiv+0x72>
    d01e:	2280      	movs	r2, #128	; 0x80
    d020:	00e4      	lsls	r4, r4, #3
    d022:	04d2      	lsls	r2, r2, #19
    d024:	4314      	orrs	r4, r2
    d026:	227f      	movs	r2, #127	; 0x7f
    d028:	4252      	negs	r2, r2
    d02a:	4690      	mov	r8, r2
    d02c:	4498      	add	r8, r3
    d02e:	2300      	movs	r3, #0
    d030:	4699      	mov	r9, r3
    d032:	469b      	mov	fp, r3
    d034:	027d      	lsls	r5, r7, #9
    d036:	0078      	lsls	r0, r7, #1
    d038:	0ffb      	lsrs	r3, r7, #31
    d03a:	0a6d      	lsrs	r5, r5, #9
    d03c:	0e00      	lsrs	r0, r0, #24
    d03e:	9300      	str	r3, [sp, #0]
    d040:	d024      	beq.n	d08c <__aeabi_fdiv+0x90>
    d042:	28ff      	cmp	r0, #255	; 0xff
    d044:	d046      	beq.n	d0d4 <__aeabi_fdiv+0xd8>
    d046:	2380      	movs	r3, #128	; 0x80
    d048:	2100      	movs	r1, #0
    d04a:	00ed      	lsls	r5, r5, #3
    d04c:	04db      	lsls	r3, r3, #19
    d04e:	431d      	orrs	r5, r3
    d050:	387f      	subs	r0, #127	; 0x7f
    d052:	4647      	mov	r7, r8
    d054:	1a38      	subs	r0, r7, r0
    d056:	464f      	mov	r7, r9
    d058:	430f      	orrs	r7, r1
    d05a:	00bf      	lsls	r7, r7, #2
    d05c:	46b9      	mov	r9, r7
    d05e:	0033      	movs	r3, r6
    d060:	9a00      	ldr	r2, [sp, #0]
    d062:	4f87      	ldr	r7, [pc, #540]	; (d280 <__aeabi_fdiv+0x284>)
    d064:	4053      	eors	r3, r2
    d066:	464a      	mov	r2, r9
    d068:	58ba      	ldr	r2, [r7, r2]
    d06a:	9301      	str	r3, [sp, #4]
    d06c:	4697      	mov	pc, r2
    d06e:	2c00      	cmp	r4, #0
    d070:	d14e      	bne.n	d110 <__aeabi_fdiv+0x114>
    d072:	2308      	movs	r3, #8
    d074:	4699      	mov	r9, r3
    d076:	33f7      	adds	r3, #247	; 0xf7
    d078:	4698      	mov	r8, r3
    d07a:	3bfd      	subs	r3, #253	; 0xfd
    d07c:	469b      	mov	fp, r3
    d07e:	027d      	lsls	r5, r7, #9
    d080:	0078      	lsls	r0, r7, #1
    d082:	0ffb      	lsrs	r3, r7, #31
    d084:	0a6d      	lsrs	r5, r5, #9
    d086:	0e00      	lsrs	r0, r0, #24
    d088:	9300      	str	r3, [sp, #0]
    d08a:	d1da      	bne.n	d042 <__aeabi_fdiv+0x46>
    d08c:	2d00      	cmp	r5, #0
    d08e:	d126      	bne.n	d0de <__aeabi_fdiv+0xe2>
    d090:	2000      	movs	r0, #0
    d092:	2101      	movs	r1, #1
    d094:	0033      	movs	r3, r6
    d096:	9a00      	ldr	r2, [sp, #0]
    d098:	4f7a      	ldr	r7, [pc, #488]	; (d284 <__aeabi_fdiv+0x288>)
    d09a:	4053      	eors	r3, r2
    d09c:	4642      	mov	r2, r8
    d09e:	1a10      	subs	r0, r2, r0
    d0a0:	464a      	mov	r2, r9
    d0a2:	430a      	orrs	r2, r1
    d0a4:	0092      	lsls	r2, r2, #2
    d0a6:	58ba      	ldr	r2, [r7, r2]
    d0a8:	001d      	movs	r5, r3
    d0aa:	4697      	mov	pc, r2
    d0ac:	9b00      	ldr	r3, [sp, #0]
    d0ae:	002c      	movs	r4, r5
    d0b0:	469a      	mov	sl, r3
    d0b2:	468b      	mov	fp, r1
    d0b4:	465b      	mov	r3, fp
    d0b6:	2b02      	cmp	r3, #2
    d0b8:	d131      	bne.n	d11e <__aeabi_fdiv+0x122>
    d0ba:	4653      	mov	r3, sl
    d0bc:	21ff      	movs	r1, #255	; 0xff
    d0be:	2400      	movs	r4, #0
    d0c0:	e038      	b.n	d134 <__aeabi_fdiv+0x138>
    d0c2:	2c00      	cmp	r4, #0
    d0c4:	d117      	bne.n	d0f6 <__aeabi_fdiv+0xfa>
    d0c6:	2304      	movs	r3, #4
    d0c8:	4699      	mov	r9, r3
    d0ca:	2300      	movs	r3, #0
    d0cc:	4698      	mov	r8, r3
    d0ce:	3301      	adds	r3, #1
    d0d0:	469b      	mov	fp, r3
    d0d2:	e7af      	b.n	d034 <__aeabi_fdiv+0x38>
    d0d4:	20ff      	movs	r0, #255	; 0xff
    d0d6:	2d00      	cmp	r5, #0
    d0d8:	d10b      	bne.n	d0f2 <__aeabi_fdiv+0xf6>
    d0da:	2102      	movs	r1, #2
    d0dc:	e7da      	b.n	d094 <__aeabi_fdiv+0x98>
    d0de:	0028      	movs	r0, r5
    d0e0:	f000 fc30 	bl	d944 <__clzsi2>
    d0e4:	1f43      	subs	r3, r0, #5
    d0e6:	409d      	lsls	r5, r3
    d0e8:	2376      	movs	r3, #118	; 0x76
    d0ea:	425b      	negs	r3, r3
    d0ec:	1a18      	subs	r0, r3, r0
    d0ee:	2100      	movs	r1, #0
    d0f0:	e7af      	b.n	d052 <__aeabi_fdiv+0x56>
    d0f2:	2103      	movs	r1, #3
    d0f4:	e7ad      	b.n	d052 <__aeabi_fdiv+0x56>
    d0f6:	0020      	movs	r0, r4
    d0f8:	f000 fc24 	bl	d944 <__clzsi2>
    d0fc:	1f43      	subs	r3, r0, #5
    d0fe:	409c      	lsls	r4, r3
    d100:	2376      	movs	r3, #118	; 0x76
    d102:	425b      	negs	r3, r3
    d104:	1a1b      	subs	r3, r3, r0
    d106:	4698      	mov	r8, r3
    d108:	2300      	movs	r3, #0
    d10a:	4699      	mov	r9, r3
    d10c:	469b      	mov	fp, r3
    d10e:	e791      	b.n	d034 <__aeabi_fdiv+0x38>
    d110:	230c      	movs	r3, #12
    d112:	4699      	mov	r9, r3
    d114:	33f3      	adds	r3, #243	; 0xf3
    d116:	4698      	mov	r8, r3
    d118:	3bfc      	subs	r3, #252	; 0xfc
    d11a:	469b      	mov	fp, r3
    d11c:	e78a      	b.n	d034 <__aeabi_fdiv+0x38>
    d11e:	2b03      	cmp	r3, #3
    d120:	d100      	bne.n	d124 <__aeabi_fdiv+0x128>
    d122:	e0a5      	b.n	d270 <__aeabi_fdiv+0x274>
    d124:	4655      	mov	r5, sl
    d126:	2b01      	cmp	r3, #1
    d128:	d000      	beq.n	d12c <__aeabi_fdiv+0x130>
    d12a:	e081      	b.n	d230 <__aeabi_fdiv+0x234>
    d12c:	2301      	movs	r3, #1
    d12e:	2100      	movs	r1, #0
    d130:	2400      	movs	r4, #0
    d132:	402b      	ands	r3, r5
    d134:	0264      	lsls	r4, r4, #9
    d136:	05c9      	lsls	r1, r1, #23
    d138:	0a60      	lsrs	r0, r4, #9
    d13a:	07db      	lsls	r3, r3, #31
    d13c:	4308      	orrs	r0, r1
    d13e:	4318      	orrs	r0, r3
    d140:	b003      	add	sp, #12
    d142:	bc3c      	pop	{r2, r3, r4, r5}
    d144:	4690      	mov	r8, r2
    d146:	4699      	mov	r9, r3
    d148:	46a2      	mov	sl, r4
    d14a:	46ab      	mov	fp, r5
    d14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d14e:	2480      	movs	r4, #128	; 0x80
    d150:	2300      	movs	r3, #0
    d152:	03e4      	lsls	r4, r4, #15
    d154:	21ff      	movs	r1, #255	; 0xff
    d156:	e7ed      	b.n	d134 <__aeabi_fdiv+0x138>
    d158:	21ff      	movs	r1, #255	; 0xff
    d15a:	2400      	movs	r4, #0
    d15c:	e7ea      	b.n	d134 <__aeabi_fdiv+0x138>
    d15e:	2301      	movs	r3, #1
    d160:	1a59      	subs	r1, r3, r1
    d162:	291b      	cmp	r1, #27
    d164:	dd66      	ble.n	d234 <__aeabi_fdiv+0x238>
    d166:	9a01      	ldr	r2, [sp, #4]
    d168:	4013      	ands	r3, r2
    d16a:	2100      	movs	r1, #0
    d16c:	2400      	movs	r4, #0
    d16e:	e7e1      	b.n	d134 <__aeabi_fdiv+0x138>
    d170:	2380      	movs	r3, #128	; 0x80
    d172:	03db      	lsls	r3, r3, #15
    d174:	421c      	tst	r4, r3
    d176:	d038      	beq.n	d1ea <__aeabi_fdiv+0x1ee>
    d178:	421d      	tst	r5, r3
    d17a:	d051      	beq.n	d220 <__aeabi_fdiv+0x224>
    d17c:	431c      	orrs	r4, r3
    d17e:	0264      	lsls	r4, r4, #9
    d180:	0a64      	lsrs	r4, r4, #9
    d182:	0033      	movs	r3, r6
    d184:	21ff      	movs	r1, #255	; 0xff
    d186:	e7d5      	b.n	d134 <__aeabi_fdiv+0x138>
    d188:	0163      	lsls	r3, r4, #5
    d18a:	016c      	lsls	r4, r5, #5
    d18c:	42a3      	cmp	r3, r4
    d18e:	d23b      	bcs.n	d208 <__aeabi_fdiv+0x20c>
    d190:	261b      	movs	r6, #27
    d192:	2100      	movs	r1, #0
    d194:	3801      	subs	r0, #1
    d196:	2501      	movs	r5, #1
    d198:	001f      	movs	r7, r3
    d19a:	0049      	lsls	r1, r1, #1
    d19c:	005b      	lsls	r3, r3, #1
    d19e:	2f00      	cmp	r7, #0
    d1a0:	db01      	blt.n	d1a6 <__aeabi_fdiv+0x1aa>
    d1a2:	429c      	cmp	r4, r3
    d1a4:	d801      	bhi.n	d1aa <__aeabi_fdiv+0x1ae>
    d1a6:	1b1b      	subs	r3, r3, r4
    d1a8:	4329      	orrs	r1, r5
    d1aa:	3e01      	subs	r6, #1
    d1ac:	2e00      	cmp	r6, #0
    d1ae:	d1f3      	bne.n	d198 <__aeabi_fdiv+0x19c>
    d1b0:	001c      	movs	r4, r3
    d1b2:	1e63      	subs	r3, r4, #1
    d1b4:	419c      	sbcs	r4, r3
    d1b6:	430c      	orrs	r4, r1
    d1b8:	0001      	movs	r1, r0
    d1ba:	317f      	adds	r1, #127	; 0x7f
    d1bc:	2900      	cmp	r1, #0
    d1be:	ddce      	ble.n	d15e <__aeabi_fdiv+0x162>
    d1c0:	0763      	lsls	r3, r4, #29
    d1c2:	d004      	beq.n	d1ce <__aeabi_fdiv+0x1d2>
    d1c4:	230f      	movs	r3, #15
    d1c6:	4023      	ands	r3, r4
    d1c8:	2b04      	cmp	r3, #4
    d1ca:	d000      	beq.n	d1ce <__aeabi_fdiv+0x1d2>
    d1cc:	3404      	adds	r4, #4
    d1ce:	0123      	lsls	r3, r4, #4
    d1d0:	d503      	bpl.n	d1da <__aeabi_fdiv+0x1de>
    d1d2:	0001      	movs	r1, r0
    d1d4:	4b2c      	ldr	r3, [pc, #176]	; (d288 <__aeabi_fdiv+0x28c>)
    d1d6:	3180      	adds	r1, #128	; 0x80
    d1d8:	401c      	ands	r4, r3
    d1da:	29fe      	cmp	r1, #254	; 0xfe
    d1dc:	dd0d      	ble.n	d1fa <__aeabi_fdiv+0x1fe>
    d1de:	2301      	movs	r3, #1
    d1e0:	9a01      	ldr	r2, [sp, #4]
    d1e2:	21ff      	movs	r1, #255	; 0xff
    d1e4:	4013      	ands	r3, r2
    d1e6:	2400      	movs	r4, #0
    d1e8:	e7a4      	b.n	d134 <__aeabi_fdiv+0x138>
    d1ea:	2380      	movs	r3, #128	; 0x80
    d1ec:	03db      	lsls	r3, r3, #15
    d1ee:	431c      	orrs	r4, r3
    d1f0:	0264      	lsls	r4, r4, #9
    d1f2:	0a64      	lsrs	r4, r4, #9
    d1f4:	0033      	movs	r3, r6
    d1f6:	21ff      	movs	r1, #255	; 0xff
    d1f8:	e79c      	b.n	d134 <__aeabi_fdiv+0x138>
    d1fa:	2301      	movs	r3, #1
    d1fc:	9a01      	ldr	r2, [sp, #4]
    d1fe:	01a4      	lsls	r4, r4, #6
    d200:	0a64      	lsrs	r4, r4, #9
    d202:	b2c9      	uxtb	r1, r1
    d204:	4013      	ands	r3, r2
    d206:	e795      	b.n	d134 <__aeabi_fdiv+0x138>
    d208:	1b1b      	subs	r3, r3, r4
    d20a:	261a      	movs	r6, #26
    d20c:	2101      	movs	r1, #1
    d20e:	e7c2      	b.n	d196 <__aeabi_fdiv+0x19a>
    d210:	9b00      	ldr	r3, [sp, #0]
    d212:	468b      	mov	fp, r1
    d214:	469a      	mov	sl, r3
    d216:	2400      	movs	r4, #0
    d218:	e74c      	b.n	d0b4 <__aeabi_fdiv+0xb8>
    d21a:	0263      	lsls	r3, r4, #9
    d21c:	d5e5      	bpl.n	d1ea <__aeabi_fdiv+0x1ee>
    d21e:	2500      	movs	r5, #0
    d220:	2480      	movs	r4, #128	; 0x80
    d222:	03e4      	lsls	r4, r4, #15
    d224:	432c      	orrs	r4, r5
    d226:	0264      	lsls	r4, r4, #9
    d228:	0a64      	lsrs	r4, r4, #9
    d22a:	9b00      	ldr	r3, [sp, #0]
    d22c:	21ff      	movs	r1, #255	; 0xff
    d22e:	e781      	b.n	d134 <__aeabi_fdiv+0x138>
    d230:	9501      	str	r5, [sp, #4]
    d232:	e7c1      	b.n	d1b8 <__aeabi_fdiv+0x1bc>
    d234:	0023      	movs	r3, r4
    d236:	2020      	movs	r0, #32
    d238:	40cb      	lsrs	r3, r1
    d23a:	1a41      	subs	r1, r0, r1
    d23c:	408c      	lsls	r4, r1
    d23e:	1e61      	subs	r1, r4, #1
    d240:	418c      	sbcs	r4, r1
    d242:	431c      	orrs	r4, r3
    d244:	0763      	lsls	r3, r4, #29
    d246:	d004      	beq.n	d252 <__aeabi_fdiv+0x256>
    d248:	230f      	movs	r3, #15
    d24a:	4023      	ands	r3, r4
    d24c:	2b04      	cmp	r3, #4
    d24e:	d000      	beq.n	d252 <__aeabi_fdiv+0x256>
    d250:	3404      	adds	r4, #4
    d252:	0163      	lsls	r3, r4, #5
    d254:	d505      	bpl.n	d262 <__aeabi_fdiv+0x266>
    d256:	2301      	movs	r3, #1
    d258:	9a01      	ldr	r2, [sp, #4]
    d25a:	2101      	movs	r1, #1
    d25c:	4013      	ands	r3, r2
    d25e:	2400      	movs	r4, #0
    d260:	e768      	b.n	d134 <__aeabi_fdiv+0x138>
    d262:	2301      	movs	r3, #1
    d264:	9a01      	ldr	r2, [sp, #4]
    d266:	01a4      	lsls	r4, r4, #6
    d268:	0a64      	lsrs	r4, r4, #9
    d26a:	4013      	ands	r3, r2
    d26c:	2100      	movs	r1, #0
    d26e:	e761      	b.n	d134 <__aeabi_fdiv+0x138>
    d270:	2380      	movs	r3, #128	; 0x80
    d272:	03db      	lsls	r3, r3, #15
    d274:	431c      	orrs	r4, r3
    d276:	0264      	lsls	r4, r4, #9
    d278:	0a64      	lsrs	r4, r4, #9
    d27a:	4653      	mov	r3, sl
    d27c:	21ff      	movs	r1, #255	; 0xff
    d27e:	e759      	b.n	d134 <__aeabi_fdiv+0x138>
    d280:	0000ebd0 	.word	0x0000ebd0
    d284:	0000ec10 	.word	0x0000ec10
    d288:	f7ffffff 	.word	0xf7ffffff

0000d28c <__aeabi_fmul>:
    d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d28e:	4657      	mov	r7, sl
    d290:	464e      	mov	r6, r9
    d292:	4645      	mov	r5, r8
    d294:	46de      	mov	lr, fp
    d296:	b5e0      	push	{r5, r6, r7, lr}
    d298:	0247      	lsls	r7, r0, #9
    d29a:	0046      	lsls	r6, r0, #1
    d29c:	4688      	mov	r8, r1
    d29e:	0a7f      	lsrs	r7, r7, #9
    d2a0:	0e36      	lsrs	r6, r6, #24
    d2a2:	0fc4      	lsrs	r4, r0, #31
    d2a4:	2e00      	cmp	r6, #0
    d2a6:	d047      	beq.n	d338 <__aeabi_fmul+0xac>
    d2a8:	2eff      	cmp	r6, #255	; 0xff
    d2aa:	d024      	beq.n	d2f6 <__aeabi_fmul+0x6a>
    d2ac:	00fb      	lsls	r3, r7, #3
    d2ae:	2780      	movs	r7, #128	; 0x80
    d2b0:	04ff      	lsls	r7, r7, #19
    d2b2:	431f      	orrs	r7, r3
    d2b4:	2300      	movs	r3, #0
    d2b6:	4699      	mov	r9, r3
    d2b8:	469a      	mov	sl, r3
    d2ba:	3e7f      	subs	r6, #127	; 0x7f
    d2bc:	4643      	mov	r3, r8
    d2be:	025d      	lsls	r5, r3, #9
    d2c0:	0058      	lsls	r0, r3, #1
    d2c2:	0fdb      	lsrs	r3, r3, #31
    d2c4:	0a6d      	lsrs	r5, r5, #9
    d2c6:	0e00      	lsrs	r0, r0, #24
    d2c8:	4698      	mov	r8, r3
    d2ca:	d043      	beq.n	d354 <__aeabi_fmul+0xc8>
    d2cc:	28ff      	cmp	r0, #255	; 0xff
    d2ce:	d03b      	beq.n	d348 <__aeabi_fmul+0xbc>
    d2d0:	00eb      	lsls	r3, r5, #3
    d2d2:	2580      	movs	r5, #128	; 0x80
    d2d4:	2200      	movs	r2, #0
    d2d6:	04ed      	lsls	r5, r5, #19
    d2d8:	431d      	orrs	r5, r3
    d2da:	387f      	subs	r0, #127	; 0x7f
    d2dc:	1836      	adds	r6, r6, r0
    d2de:	1c73      	adds	r3, r6, #1
    d2e0:	4641      	mov	r1, r8
    d2e2:	469b      	mov	fp, r3
    d2e4:	464b      	mov	r3, r9
    d2e6:	4061      	eors	r1, r4
    d2e8:	4313      	orrs	r3, r2
    d2ea:	2b0f      	cmp	r3, #15
    d2ec:	d864      	bhi.n	d3b8 <__aeabi_fmul+0x12c>
    d2ee:	4875      	ldr	r0, [pc, #468]	; (d4c4 <__aeabi_fmul+0x238>)
    d2f0:	009b      	lsls	r3, r3, #2
    d2f2:	58c3      	ldr	r3, [r0, r3]
    d2f4:	469f      	mov	pc, r3
    d2f6:	2f00      	cmp	r7, #0
    d2f8:	d142      	bne.n	d380 <__aeabi_fmul+0xf4>
    d2fa:	2308      	movs	r3, #8
    d2fc:	4699      	mov	r9, r3
    d2fe:	3b06      	subs	r3, #6
    d300:	26ff      	movs	r6, #255	; 0xff
    d302:	469a      	mov	sl, r3
    d304:	e7da      	b.n	d2bc <__aeabi_fmul+0x30>
    d306:	4641      	mov	r1, r8
    d308:	2a02      	cmp	r2, #2
    d30a:	d028      	beq.n	d35e <__aeabi_fmul+0xd2>
    d30c:	2a03      	cmp	r2, #3
    d30e:	d100      	bne.n	d312 <__aeabi_fmul+0x86>
    d310:	e0ce      	b.n	d4b0 <__aeabi_fmul+0x224>
    d312:	2a01      	cmp	r2, #1
    d314:	d000      	beq.n	d318 <__aeabi_fmul+0x8c>
    d316:	e0ac      	b.n	d472 <__aeabi_fmul+0x1e6>
    d318:	4011      	ands	r1, r2
    d31a:	2000      	movs	r0, #0
    d31c:	2200      	movs	r2, #0
    d31e:	b2cc      	uxtb	r4, r1
    d320:	0240      	lsls	r0, r0, #9
    d322:	05d2      	lsls	r2, r2, #23
    d324:	0a40      	lsrs	r0, r0, #9
    d326:	07e4      	lsls	r4, r4, #31
    d328:	4310      	orrs	r0, r2
    d32a:	4320      	orrs	r0, r4
    d32c:	bc3c      	pop	{r2, r3, r4, r5}
    d32e:	4690      	mov	r8, r2
    d330:	4699      	mov	r9, r3
    d332:	46a2      	mov	sl, r4
    d334:	46ab      	mov	fp, r5
    d336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d338:	2f00      	cmp	r7, #0
    d33a:	d115      	bne.n	d368 <__aeabi_fmul+0xdc>
    d33c:	2304      	movs	r3, #4
    d33e:	4699      	mov	r9, r3
    d340:	3b03      	subs	r3, #3
    d342:	2600      	movs	r6, #0
    d344:	469a      	mov	sl, r3
    d346:	e7b9      	b.n	d2bc <__aeabi_fmul+0x30>
    d348:	20ff      	movs	r0, #255	; 0xff
    d34a:	2202      	movs	r2, #2
    d34c:	2d00      	cmp	r5, #0
    d34e:	d0c5      	beq.n	d2dc <__aeabi_fmul+0x50>
    d350:	2203      	movs	r2, #3
    d352:	e7c3      	b.n	d2dc <__aeabi_fmul+0x50>
    d354:	2d00      	cmp	r5, #0
    d356:	d119      	bne.n	d38c <__aeabi_fmul+0x100>
    d358:	2000      	movs	r0, #0
    d35a:	2201      	movs	r2, #1
    d35c:	e7be      	b.n	d2dc <__aeabi_fmul+0x50>
    d35e:	2401      	movs	r4, #1
    d360:	22ff      	movs	r2, #255	; 0xff
    d362:	400c      	ands	r4, r1
    d364:	2000      	movs	r0, #0
    d366:	e7db      	b.n	d320 <__aeabi_fmul+0x94>
    d368:	0038      	movs	r0, r7
    d36a:	f000 faeb 	bl	d944 <__clzsi2>
    d36e:	2676      	movs	r6, #118	; 0x76
    d370:	1f43      	subs	r3, r0, #5
    d372:	409f      	lsls	r7, r3
    d374:	2300      	movs	r3, #0
    d376:	4276      	negs	r6, r6
    d378:	1a36      	subs	r6, r6, r0
    d37a:	4699      	mov	r9, r3
    d37c:	469a      	mov	sl, r3
    d37e:	e79d      	b.n	d2bc <__aeabi_fmul+0x30>
    d380:	230c      	movs	r3, #12
    d382:	4699      	mov	r9, r3
    d384:	3b09      	subs	r3, #9
    d386:	26ff      	movs	r6, #255	; 0xff
    d388:	469a      	mov	sl, r3
    d38a:	e797      	b.n	d2bc <__aeabi_fmul+0x30>
    d38c:	0028      	movs	r0, r5
    d38e:	f000 fad9 	bl	d944 <__clzsi2>
    d392:	1f43      	subs	r3, r0, #5
    d394:	409d      	lsls	r5, r3
    d396:	2376      	movs	r3, #118	; 0x76
    d398:	425b      	negs	r3, r3
    d39a:	1a18      	subs	r0, r3, r0
    d39c:	2200      	movs	r2, #0
    d39e:	e79d      	b.n	d2dc <__aeabi_fmul+0x50>
    d3a0:	2080      	movs	r0, #128	; 0x80
    d3a2:	2400      	movs	r4, #0
    d3a4:	03c0      	lsls	r0, r0, #15
    d3a6:	22ff      	movs	r2, #255	; 0xff
    d3a8:	e7ba      	b.n	d320 <__aeabi_fmul+0x94>
    d3aa:	003d      	movs	r5, r7
    d3ac:	4652      	mov	r2, sl
    d3ae:	e7ab      	b.n	d308 <__aeabi_fmul+0x7c>
    d3b0:	003d      	movs	r5, r7
    d3b2:	0021      	movs	r1, r4
    d3b4:	4652      	mov	r2, sl
    d3b6:	e7a7      	b.n	d308 <__aeabi_fmul+0x7c>
    d3b8:	0c3b      	lsrs	r3, r7, #16
    d3ba:	469c      	mov	ip, r3
    d3bc:	042a      	lsls	r2, r5, #16
    d3be:	0c12      	lsrs	r2, r2, #16
    d3c0:	0c2b      	lsrs	r3, r5, #16
    d3c2:	0014      	movs	r4, r2
    d3c4:	4660      	mov	r0, ip
    d3c6:	4665      	mov	r5, ip
    d3c8:	043f      	lsls	r7, r7, #16
    d3ca:	0c3f      	lsrs	r7, r7, #16
    d3cc:	437c      	muls	r4, r7
    d3ce:	4342      	muls	r2, r0
    d3d0:	435d      	muls	r5, r3
    d3d2:	437b      	muls	r3, r7
    d3d4:	0c27      	lsrs	r7, r4, #16
    d3d6:	189b      	adds	r3, r3, r2
    d3d8:	18ff      	adds	r7, r7, r3
    d3da:	42ba      	cmp	r2, r7
    d3dc:	d903      	bls.n	d3e6 <__aeabi_fmul+0x15a>
    d3de:	2380      	movs	r3, #128	; 0x80
    d3e0:	025b      	lsls	r3, r3, #9
    d3e2:	469c      	mov	ip, r3
    d3e4:	4465      	add	r5, ip
    d3e6:	0424      	lsls	r4, r4, #16
    d3e8:	043a      	lsls	r2, r7, #16
    d3ea:	0c24      	lsrs	r4, r4, #16
    d3ec:	1912      	adds	r2, r2, r4
    d3ee:	0193      	lsls	r3, r2, #6
    d3f0:	1e5c      	subs	r4, r3, #1
    d3f2:	41a3      	sbcs	r3, r4
    d3f4:	0c3f      	lsrs	r7, r7, #16
    d3f6:	0e92      	lsrs	r2, r2, #26
    d3f8:	197d      	adds	r5, r7, r5
    d3fa:	431a      	orrs	r2, r3
    d3fc:	01ad      	lsls	r5, r5, #6
    d3fe:	4315      	orrs	r5, r2
    d400:	012b      	lsls	r3, r5, #4
    d402:	d504      	bpl.n	d40e <__aeabi_fmul+0x182>
    d404:	2301      	movs	r3, #1
    d406:	465e      	mov	r6, fp
    d408:	086a      	lsrs	r2, r5, #1
    d40a:	401d      	ands	r5, r3
    d40c:	4315      	orrs	r5, r2
    d40e:	0032      	movs	r2, r6
    d410:	327f      	adds	r2, #127	; 0x7f
    d412:	2a00      	cmp	r2, #0
    d414:	dd25      	ble.n	d462 <__aeabi_fmul+0x1d6>
    d416:	076b      	lsls	r3, r5, #29
    d418:	d004      	beq.n	d424 <__aeabi_fmul+0x198>
    d41a:	230f      	movs	r3, #15
    d41c:	402b      	ands	r3, r5
    d41e:	2b04      	cmp	r3, #4
    d420:	d000      	beq.n	d424 <__aeabi_fmul+0x198>
    d422:	3504      	adds	r5, #4
    d424:	012b      	lsls	r3, r5, #4
    d426:	d503      	bpl.n	d430 <__aeabi_fmul+0x1a4>
    d428:	0032      	movs	r2, r6
    d42a:	4b27      	ldr	r3, [pc, #156]	; (d4c8 <__aeabi_fmul+0x23c>)
    d42c:	3280      	adds	r2, #128	; 0x80
    d42e:	401d      	ands	r5, r3
    d430:	2afe      	cmp	r2, #254	; 0xfe
    d432:	dc94      	bgt.n	d35e <__aeabi_fmul+0xd2>
    d434:	2401      	movs	r4, #1
    d436:	01a8      	lsls	r0, r5, #6
    d438:	0a40      	lsrs	r0, r0, #9
    d43a:	b2d2      	uxtb	r2, r2
    d43c:	400c      	ands	r4, r1
    d43e:	e76f      	b.n	d320 <__aeabi_fmul+0x94>
    d440:	2080      	movs	r0, #128	; 0x80
    d442:	03c0      	lsls	r0, r0, #15
    d444:	4207      	tst	r7, r0
    d446:	d007      	beq.n	d458 <__aeabi_fmul+0x1cc>
    d448:	4205      	tst	r5, r0
    d44a:	d105      	bne.n	d458 <__aeabi_fmul+0x1cc>
    d44c:	4328      	orrs	r0, r5
    d44e:	0240      	lsls	r0, r0, #9
    d450:	0a40      	lsrs	r0, r0, #9
    d452:	4644      	mov	r4, r8
    d454:	22ff      	movs	r2, #255	; 0xff
    d456:	e763      	b.n	d320 <__aeabi_fmul+0x94>
    d458:	4338      	orrs	r0, r7
    d45a:	0240      	lsls	r0, r0, #9
    d45c:	0a40      	lsrs	r0, r0, #9
    d45e:	22ff      	movs	r2, #255	; 0xff
    d460:	e75e      	b.n	d320 <__aeabi_fmul+0x94>
    d462:	2401      	movs	r4, #1
    d464:	1aa3      	subs	r3, r4, r2
    d466:	2b1b      	cmp	r3, #27
    d468:	dd05      	ble.n	d476 <__aeabi_fmul+0x1ea>
    d46a:	400c      	ands	r4, r1
    d46c:	2200      	movs	r2, #0
    d46e:	2000      	movs	r0, #0
    d470:	e756      	b.n	d320 <__aeabi_fmul+0x94>
    d472:	465e      	mov	r6, fp
    d474:	e7cb      	b.n	d40e <__aeabi_fmul+0x182>
    d476:	002a      	movs	r2, r5
    d478:	2020      	movs	r0, #32
    d47a:	40da      	lsrs	r2, r3
    d47c:	1ac3      	subs	r3, r0, r3
    d47e:	409d      	lsls	r5, r3
    d480:	002b      	movs	r3, r5
    d482:	1e5d      	subs	r5, r3, #1
    d484:	41ab      	sbcs	r3, r5
    d486:	4313      	orrs	r3, r2
    d488:	075a      	lsls	r2, r3, #29
    d48a:	d004      	beq.n	d496 <__aeabi_fmul+0x20a>
    d48c:	220f      	movs	r2, #15
    d48e:	401a      	ands	r2, r3
    d490:	2a04      	cmp	r2, #4
    d492:	d000      	beq.n	d496 <__aeabi_fmul+0x20a>
    d494:	3304      	adds	r3, #4
    d496:	015a      	lsls	r2, r3, #5
    d498:	d504      	bpl.n	d4a4 <__aeabi_fmul+0x218>
    d49a:	2401      	movs	r4, #1
    d49c:	2201      	movs	r2, #1
    d49e:	400c      	ands	r4, r1
    d4a0:	2000      	movs	r0, #0
    d4a2:	e73d      	b.n	d320 <__aeabi_fmul+0x94>
    d4a4:	2401      	movs	r4, #1
    d4a6:	019b      	lsls	r3, r3, #6
    d4a8:	0a58      	lsrs	r0, r3, #9
    d4aa:	400c      	ands	r4, r1
    d4ac:	2200      	movs	r2, #0
    d4ae:	e737      	b.n	d320 <__aeabi_fmul+0x94>
    d4b0:	2080      	movs	r0, #128	; 0x80
    d4b2:	2401      	movs	r4, #1
    d4b4:	03c0      	lsls	r0, r0, #15
    d4b6:	4328      	orrs	r0, r5
    d4b8:	0240      	lsls	r0, r0, #9
    d4ba:	0a40      	lsrs	r0, r0, #9
    d4bc:	400c      	ands	r4, r1
    d4be:	22ff      	movs	r2, #255	; 0xff
    d4c0:	e72e      	b.n	d320 <__aeabi_fmul+0x94>
    d4c2:	46c0      	nop			; (mov r8, r8)
    d4c4:	0000ec50 	.word	0x0000ec50
    d4c8:	f7ffffff 	.word	0xf7ffffff

0000d4cc <__aeabi_fsub>:
    d4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4ce:	464f      	mov	r7, r9
    d4d0:	46d6      	mov	lr, sl
    d4d2:	4646      	mov	r6, r8
    d4d4:	0044      	lsls	r4, r0, #1
    d4d6:	b5c0      	push	{r6, r7, lr}
    d4d8:	0fc2      	lsrs	r2, r0, #31
    d4da:	0247      	lsls	r7, r0, #9
    d4dc:	0248      	lsls	r0, r1, #9
    d4de:	0a40      	lsrs	r0, r0, #9
    d4e0:	4684      	mov	ip, r0
    d4e2:	4666      	mov	r6, ip
    d4e4:	0a7b      	lsrs	r3, r7, #9
    d4e6:	0048      	lsls	r0, r1, #1
    d4e8:	0fc9      	lsrs	r1, r1, #31
    d4ea:	469a      	mov	sl, r3
    d4ec:	0e24      	lsrs	r4, r4, #24
    d4ee:	0015      	movs	r5, r2
    d4f0:	00db      	lsls	r3, r3, #3
    d4f2:	0e00      	lsrs	r0, r0, #24
    d4f4:	4689      	mov	r9, r1
    d4f6:	00f6      	lsls	r6, r6, #3
    d4f8:	28ff      	cmp	r0, #255	; 0xff
    d4fa:	d100      	bne.n	d4fe <__aeabi_fsub+0x32>
    d4fc:	e08f      	b.n	d61e <__aeabi_fsub+0x152>
    d4fe:	2101      	movs	r1, #1
    d500:	464f      	mov	r7, r9
    d502:	404f      	eors	r7, r1
    d504:	0039      	movs	r1, r7
    d506:	4291      	cmp	r1, r2
    d508:	d066      	beq.n	d5d8 <__aeabi_fsub+0x10c>
    d50a:	1a22      	subs	r2, r4, r0
    d50c:	2a00      	cmp	r2, #0
    d50e:	dc00      	bgt.n	d512 <__aeabi_fsub+0x46>
    d510:	e09d      	b.n	d64e <__aeabi_fsub+0x182>
    d512:	2800      	cmp	r0, #0
    d514:	d13d      	bne.n	d592 <__aeabi_fsub+0xc6>
    d516:	2e00      	cmp	r6, #0
    d518:	d100      	bne.n	d51c <__aeabi_fsub+0x50>
    d51a:	e08b      	b.n	d634 <__aeabi_fsub+0x168>
    d51c:	1e51      	subs	r1, r2, #1
    d51e:	2900      	cmp	r1, #0
    d520:	d000      	beq.n	d524 <__aeabi_fsub+0x58>
    d522:	e0b5      	b.n	d690 <__aeabi_fsub+0x1c4>
    d524:	2401      	movs	r4, #1
    d526:	1b9b      	subs	r3, r3, r6
    d528:	015a      	lsls	r2, r3, #5
    d52a:	d544      	bpl.n	d5b6 <__aeabi_fsub+0xea>
    d52c:	019b      	lsls	r3, r3, #6
    d52e:	099f      	lsrs	r7, r3, #6
    d530:	0038      	movs	r0, r7
    d532:	f000 fa07 	bl	d944 <__clzsi2>
    d536:	3805      	subs	r0, #5
    d538:	4087      	lsls	r7, r0
    d53a:	4284      	cmp	r4, r0
    d53c:	dd00      	ble.n	d540 <__aeabi_fsub+0x74>
    d53e:	e096      	b.n	d66e <__aeabi_fsub+0x1a2>
    d540:	1b04      	subs	r4, r0, r4
    d542:	003a      	movs	r2, r7
    d544:	2020      	movs	r0, #32
    d546:	3401      	adds	r4, #1
    d548:	40e2      	lsrs	r2, r4
    d54a:	1b04      	subs	r4, r0, r4
    d54c:	40a7      	lsls	r7, r4
    d54e:	003b      	movs	r3, r7
    d550:	1e5f      	subs	r7, r3, #1
    d552:	41bb      	sbcs	r3, r7
    d554:	2400      	movs	r4, #0
    d556:	4313      	orrs	r3, r2
    d558:	075a      	lsls	r2, r3, #29
    d55a:	d004      	beq.n	d566 <__aeabi_fsub+0x9a>
    d55c:	220f      	movs	r2, #15
    d55e:	401a      	ands	r2, r3
    d560:	2a04      	cmp	r2, #4
    d562:	d000      	beq.n	d566 <__aeabi_fsub+0x9a>
    d564:	3304      	adds	r3, #4
    d566:	015a      	lsls	r2, r3, #5
    d568:	d527      	bpl.n	d5ba <__aeabi_fsub+0xee>
    d56a:	3401      	adds	r4, #1
    d56c:	2cff      	cmp	r4, #255	; 0xff
    d56e:	d100      	bne.n	d572 <__aeabi_fsub+0xa6>
    d570:	e079      	b.n	d666 <__aeabi_fsub+0x19a>
    d572:	2201      	movs	r2, #1
    d574:	019b      	lsls	r3, r3, #6
    d576:	0a5b      	lsrs	r3, r3, #9
    d578:	b2e4      	uxtb	r4, r4
    d57a:	402a      	ands	r2, r5
    d57c:	025b      	lsls	r3, r3, #9
    d57e:	05e4      	lsls	r4, r4, #23
    d580:	0a58      	lsrs	r0, r3, #9
    d582:	07d2      	lsls	r2, r2, #31
    d584:	4320      	orrs	r0, r4
    d586:	4310      	orrs	r0, r2
    d588:	bc1c      	pop	{r2, r3, r4}
    d58a:	4690      	mov	r8, r2
    d58c:	4699      	mov	r9, r3
    d58e:	46a2      	mov	sl, r4
    d590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d592:	2cff      	cmp	r4, #255	; 0xff
    d594:	d0e0      	beq.n	d558 <__aeabi_fsub+0x8c>
    d596:	2180      	movs	r1, #128	; 0x80
    d598:	04c9      	lsls	r1, r1, #19
    d59a:	430e      	orrs	r6, r1
    d59c:	2a1b      	cmp	r2, #27
    d59e:	dc7b      	bgt.n	d698 <__aeabi_fsub+0x1cc>
    d5a0:	0031      	movs	r1, r6
    d5a2:	2020      	movs	r0, #32
    d5a4:	40d1      	lsrs	r1, r2
    d5a6:	1a82      	subs	r2, r0, r2
    d5a8:	4096      	lsls	r6, r2
    d5aa:	1e72      	subs	r2, r6, #1
    d5ac:	4196      	sbcs	r6, r2
    d5ae:	430e      	orrs	r6, r1
    d5b0:	1b9b      	subs	r3, r3, r6
    d5b2:	015a      	lsls	r2, r3, #5
    d5b4:	d4ba      	bmi.n	d52c <__aeabi_fsub+0x60>
    d5b6:	075a      	lsls	r2, r3, #29
    d5b8:	d1d0      	bne.n	d55c <__aeabi_fsub+0x90>
    d5ba:	2201      	movs	r2, #1
    d5bc:	08df      	lsrs	r7, r3, #3
    d5be:	402a      	ands	r2, r5
    d5c0:	2cff      	cmp	r4, #255	; 0xff
    d5c2:	d133      	bne.n	d62c <__aeabi_fsub+0x160>
    d5c4:	2f00      	cmp	r7, #0
    d5c6:	d100      	bne.n	d5ca <__aeabi_fsub+0xfe>
    d5c8:	e0a8      	b.n	d71c <__aeabi_fsub+0x250>
    d5ca:	2380      	movs	r3, #128	; 0x80
    d5cc:	03db      	lsls	r3, r3, #15
    d5ce:	433b      	orrs	r3, r7
    d5d0:	025b      	lsls	r3, r3, #9
    d5d2:	0a5b      	lsrs	r3, r3, #9
    d5d4:	24ff      	movs	r4, #255	; 0xff
    d5d6:	e7d1      	b.n	d57c <__aeabi_fsub+0xb0>
    d5d8:	1a21      	subs	r1, r4, r0
    d5da:	2900      	cmp	r1, #0
    d5dc:	dd4c      	ble.n	d678 <__aeabi_fsub+0x1ac>
    d5de:	2800      	cmp	r0, #0
    d5e0:	d02a      	beq.n	d638 <__aeabi_fsub+0x16c>
    d5e2:	2cff      	cmp	r4, #255	; 0xff
    d5e4:	d0b8      	beq.n	d558 <__aeabi_fsub+0x8c>
    d5e6:	2080      	movs	r0, #128	; 0x80
    d5e8:	04c0      	lsls	r0, r0, #19
    d5ea:	4306      	orrs	r6, r0
    d5ec:	291b      	cmp	r1, #27
    d5ee:	dd00      	ble.n	d5f2 <__aeabi_fsub+0x126>
    d5f0:	e0af      	b.n	d752 <__aeabi_fsub+0x286>
    d5f2:	0030      	movs	r0, r6
    d5f4:	2720      	movs	r7, #32
    d5f6:	40c8      	lsrs	r0, r1
    d5f8:	1a79      	subs	r1, r7, r1
    d5fa:	408e      	lsls	r6, r1
    d5fc:	1e71      	subs	r1, r6, #1
    d5fe:	418e      	sbcs	r6, r1
    d600:	4306      	orrs	r6, r0
    d602:	199b      	adds	r3, r3, r6
    d604:	0159      	lsls	r1, r3, #5
    d606:	d5d6      	bpl.n	d5b6 <__aeabi_fsub+0xea>
    d608:	3401      	adds	r4, #1
    d60a:	2cff      	cmp	r4, #255	; 0xff
    d60c:	d100      	bne.n	d610 <__aeabi_fsub+0x144>
    d60e:	e085      	b.n	d71c <__aeabi_fsub+0x250>
    d610:	2201      	movs	r2, #1
    d612:	497a      	ldr	r1, [pc, #488]	; (d7fc <__aeabi_fsub+0x330>)
    d614:	401a      	ands	r2, r3
    d616:	085b      	lsrs	r3, r3, #1
    d618:	400b      	ands	r3, r1
    d61a:	4313      	orrs	r3, r2
    d61c:	e79c      	b.n	d558 <__aeabi_fsub+0x8c>
    d61e:	2e00      	cmp	r6, #0
    d620:	d000      	beq.n	d624 <__aeabi_fsub+0x158>
    d622:	e770      	b.n	d506 <__aeabi_fsub+0x3a>
    d624:	e76b      	b.n	d4fe <__aeabi_fsub+0x32>
    d626:	1e3b      	subs	r3, r7, #0
    d628:	d1c5      	bne.n	d5b6 <__aeabi_fsub+0xea>
    d62a:	2200      	movs	r2, #0
    d62c:	027b      	lsls	r3, r7, #9
    d62e:	0a5b      	lsrs	r3, r3, #9
    d630:	b2e4      	uxtb	r4, r4
    d632:	e7a3      	b.n	d57c <__aeabi_fsub+0xb0>
    d634:	0014      	movs	r4, r2
    d636:	e78f      	b.n	d558 <__aeabi_fsub+0x8c>
    d638:	2e00      	cmp	r6, #0
    d63a:	d04d      	beq.n	d6d8 <__aeabi_fsub+0x20c>
    d63c:	1e48      	subs	r0, r1, #1
    d63e:	2800      	cmp	r0, #0
    d640:	d157      	bne.n	d6f2 <__aeabi_fsub+0x226>
    d642:	199b      	adds	r3, r3, r6
    d644:	2401      	movs	r4, #1
    d646:	015a      	lsls	r2, r3, #5
    d648:	d5b5      	bpl.n	d5b6 <__aeabi_fsub+0xea>
    d64a:	2402      	movs	r4, #2
    d64c:	e7e0      	b.n	d610 <__aeabi_fsub+0x144>
    d64e:	2a00      	cmp	r2, #0
    d650:	d125      	bne.n	d69e <__aeabi_fsub+0x1d2>
    d652:	1c62      	adds	r2, r4, #1
    d654:	b2d2      	uxtb	r2, r2
    d656:	2a01      	cmp	r2, #1
    d658:	dd72      	ble.n	d740 <__aeabi_fsub+0x274>
    d65a:	1b9f      	subs	r7, r3, r6
    d65c:	017a      	lsls	r2, r7, #5
    d65e:	d535      	bpl.n	d6cc <__aeabi_fsub+0x200>
    d660:	1af7      	subs	r7, r6, r3
    d662:	000d      	movs	r5, r1
    d664:	e764      	b.n	d530 <__aeabi_fsub+0x64>
    d666:	2201      	movs	r2, #1
    d668:	2300      	movs	r3, #0
    d66a:	402a      	ands	r2, r5
    d66c:	e786      	b.n	d57c <__aeabi_fsub+0xb0>
    d66e:	003b      	movs	r3, r7
    d670:	4a63      	ldr	r2, [pc, #396]	; (d800 <__aeabi_fsub+0x334>)
    d672:	1a24      	subs	r4, r4, r0
    d674:	4013      	ands	r3, r2
    d676:	e76f      	b.n	d558 <__aeabi_fsub+0x8c>
    d678:	2900      	cmp	r1, #0
    d67a:	d16c      	bne.n	d756 <__aeabi_fsub+0x28a>
    d67c:	1c61      	adds	r1, r4, #1
    d67e:	b2c8      	uxtb	r0, r1
    d680:	2801      	cmp	r0, #1
    d682:	dd4e      	ble.n	d722 <__aeabi_fsub+0x256>
    d684:	29ff      	cmp	r1, #255	; 0xff
    d686:	d049      	beq.n	d71c <__aeabi_fsub+0x250>
    d688:	199b      	adds	r3, r3, r6
    d68a:	085b      	lsrs	r3, r3, #1
    d68c:	000c      	movs	r4, r1
    d68e:	e763      	b.n	d558 <__aeabi_fsub+0x8c>
    d690:	2aff      	cmp	r2, #255	; 0xff
    d692:	d041      	beq.n	d718 <__aeabi_fsub+0x24c>
    d694:	000a      	movs	r2, r1
    d696:	e781      	b.n	d59c <__aeabi_fsub+0xd0>
    d698:	2601      	movs	r6, #1
    d69a:	1b9b      	subs	r3, r3, r6
    d69c:	e789      	b.n	d5b2 <__aeabi_fsub+0xe6>
    d69e:	2c00      	cmp	r4, #0
    d6a0:	d01c      	beq.n	d6dc <__aeabi_fsub+0x210>
    d6a2:	28ff      	cmp	r0, #255	; 0xff
    d6a4:	d021      	beq.n	d6ea <__aeabi_fsub+0x21e>
    d6a6:	2480      	movs	r4, #128	; 0x80
    d6a8:	04e4      	lsls	r4, r4, #19
    d6aa:	4252      	negs	r2, r2
    d6ac:	4323      	orrs	r3, r4
    d6ae:	2a1b      	cmp	r2, #27
    d6b0:	dd00      	ble.n	d6b4 <__aeabi_fsub+0x1e8>
    d6b2:	e096      	b.n	d7e2 <__aeabi_fsub+0x316>
    d6b4:	001c      	movs	r4, r3
    d6b6:	2520      	movs	r5, #32
    d6b8:	40d4      	lsrs	r4, r2
    d6ba:	1aaa      	subs	r2, r5, r2
    d6bc:	4093      	lsls	r3, r2
    d6be:	1e5a      	subs	r2, r3, #1
    d6c0:	4193      	sbcs	r3, r2
    d6c2:	4323      	orrs	r3, r4
    d6c4:	1af3      	subs	r3, r6, r3
    d6c6:	0004      	movs	r4, r0
    d6c8:	000d      	movs	r5, r1
    d6ca:	e72d      	b.n	d528 <__aeabi_fsub+0x5c>
    d6cc:	2f00      	cmp	r7, #0
    d6ce:	d000      	beq.n	d6d2 <__aeabi_fsub+0x206>
    d6d0:	e72e      	b.n	d530 <__aeabi_fsub+0x64>
    d6d2:	2200      	movs	r2, #0
    d6d4:	2400      	movs	r4, #0
    d6d6:	e7a9      	b.n	d62c <__aeabi_fsub+0x160>
    d6d8:	000c      	movs	r4, r1
    d6da:	e73d      	b.n	d558 <__aeabi_fsub+0x8c>
    d6dc:	2b00      	cmp	r3, #0
    d6de:	d058      	beq.n	d792 <__aeabi_fsub+0x2c6>
    d6e0:	43d2      	mvns	r2, r2
    d6e2:	2a00      	cmp	r2, #0
    d6e4:	d0ee      	beq.n	d6c4 <__aeabi_fsub+0x1f8>
    d6e6:	28ff      	cmp	r0, #255	; 0xff
    d6e8:	d1e1      	bne.n	d6ae <__aeabi_fsub+0x1e2>
    d6ea:	0033      	movs	r3, r6
    d6ec:	24ff      	movs	r4, #255	; 0xff
    d6ee:	000d      	movs	r5, r1
    d6f0:	e732      	b.n	d558 <__aeabi_fsub+0x8c>
    d6f2:	29ff      	cmp	r1, #255	; 0xff
    d6f4:	d010      	beq.n	d718 <__aeabi_fsub+0x24c>
    d6f6:	0001      	movs	r1, r0
    d6f8:	e778      	b.n	d5ec <__aeabi_fsub+0x120>
    d6fa:	2b00      	cmp	r3, #0
    d6fc:	d06e      	beq.n	d7dc <__aeabi_fsub+0x310>
    d6fe:	24ff      	movs	r4, #255	; 0xff
    d700:	2e00      	cmp	r6, #0
    d702:	d100      	bne.n	d706 <__aeabi_fsub+0x23a>
    d704:	e728      	b.n	d558 <__aeabi_fsub+0x8c>
    d706:	2280      	movs	r2, #128	; 0x80
    d708:	4651      	mov	r1, sl
    d70a:	03d2      	lsls	r2, r2, #15
    d70c:	4211      	tst	r1, r2
    d70e:	d003      	beq.n	d718 <__aeabi_fsub+0x24c>
    d710:	4661      	mov	r1, ip
    d712:	4211      	tst	r1, r2
    d714:	d100      	bne.n	d718 <__aeabi_fsub+0x24c>
    d716:	0033      	movs	r3, r6
    d718:	24ff      	movs	r4, #255	; 0xff
    d71a:	e71d      	b.n	d558 <__aeabi_fsub+0x8c>
    d71c:	24ff      	movs	r4, #255	; 0xff
    d71e:	2300      	movs	r3, #0
    d720:	e72c      	b.n	d57c <__aeabi_fsub+0xb0>
    d722:	2c00      	cmp	r4, #0
    d724:	d1e9      	bne.n	d6fa <__aeabi_fsub+0x22e>
    d726:	2b00      	cmp	r3, #0
    d728:	d063      	beq.n	d7f2 <__aeabi_fsub+0x326>
    d72a:	2e00      	cmp	r6, #0
    d72c:	d100      	bne.n	d730 <__aeabi_fsub+0x264>
    d72e:	e713      	b.n	d558 <__aeabi_fsub+0x8c>
    d730:	199b      	adds	r3, r3, r6
    d732:	015a      	lsls	r2, r3, #5
    d734:	d400      	bmi.n	d738 <__aeabi_fsub+0x26c>
    d736:	e73e      	b.n	d5b6 <__aeabi_fsub+0xea>
    d738:	4a31      	ldr	r2, [pc, #196]	; (d800 <__aeabi_fsub+0x334>)
    d73a:	000c      	movs	r4, r1
    d73c:	4013      	ands	r3, r2
    d73e:	e70b      	b.n	d558 <__aeabi_fsub+0x8c>
    d740:	2c00      	cmp	r4, #0
    d742:	d11e      	bne.n	d782 <__aeabi_fsub+0x2b6>
    d744:	2b00      	cmp	r3, #0
    d746:	d12f      	bne.n	d7a8 <__aeabi_fsub+0x2dc>
    d748:	2e00      	cmp	r6, #0
    d74a:	d04f      	beq.n	d7ec <__aeabi_fsub+0x320>
    d74c:	0033      	movs	r3, r6
    d74e:	000d      	movs	r5, r1
    d750:	e702      	b.n	d558 <__aeabi_fsub+0x8c>
    d752:	2601      	movs	r6, #1
    d754:	e755      	b.n	d602 <__aeabi_fsub+0x136>
    d756:	2c00      	cmp	r4, #0
    d758:	d11f      	bne.n	d79a <__aeabi_fsub+0x2ce>
    d75a:	2b00      	cmp	r3, #0
    d75c:	d043      	beq.n	d7e6 <__aeabi_fsub+0x31a>
    d75e:	43c9      	mvns	r1, r1
    d760:	2900      	cmp	r1, #0
    d762:	d00b      	beq.n	d77c <__aeabi_fsub+0x2b0>
    d764:	28ff      	cmp	r0, #255	; 0xff
    d766:	d039      	beq.n	d7dc <__aeabi_fsub+0x310>
    d768:	291b      	cmp	r1, #27
    d76a:	dc44      	bgt.n	d7f6 <__aeabi_fsub+0x32a>
    d76c:	001c      	movs	r4, r3
    d76e:	2720      	movs	r7, #32
    d770:	40cc      	lsrs	r4, r1
    d772:	1a79      	subs	r1, r7, r1
    d774:	408b      	lsls	r3, r1
    d776:	1e59      	subs	r1, r3, #1
    d778:	418b      	sbcs	r3, r1
    d77a:	4323      	orrs	r3, r4
    d77c:	199b      	adds	r3, r3, r6
    d77e:	0004      	movs	r4, r0
    d780:	e740      	b.n	d604 <__aeabi_fsub+0x138>
    d782:	2b00      	cmp	r3, #0
    d784:	d11a      	bne.n	d7bc <__aeabi_fsub+0x2f0>
    d786:	2e00      	cmp	r6, #0
    d788:	d124      	bne.n	d7d4 <__aeabi_fsub+0x308>
    d78a:	2780      	movs	r7, #128	; 0x80
    d78c:	2200      	movs	r2, #0
    d78e:	03ff      	lsls	r7, r7, #15
    d790:	e71b      	b.n	d5ca <__aeabi_fsub+0xfe>
    d792:	0033      	movs	r3, r6
    d794:	0004      	movs	r4, r0
    d796:	000d      	movs	r5, r1
    d798:	e6de      	b.n	d558 <__aeabi_fsub+0x8c>
    d79a:	28ff      	cmp	r0, #255	; 0xff
    d79c:	d01e      	beq.n	d7dc <__aeabi_fsub+0x310>
    d79e:	2480      	movs	r4, #128	; 0x80
    d7a0:	04e4      	lsls	r4, r4, #19
    d7a2:	4249      	negs	r1, r1
    d7a4:	4323      	orrs	r3, r4
    d7a6:	e7df      	b.n	d768 <__aeabi_fsub+0x29c>
    d7a8:	2e00      	cmp	r6, #0
    d7aa:	d100      	bne.n	d7ae <__aeabi_fsub+0x2e2>
    d7ac:	e6d4      	b.n	d558 <__aeabi_fsub+0x8c>
    d7ae:	1b9f      	subs	r7, r3, r6
    d7b0:	017a      	lsls	r2, r7, #5
    d7b2:	d400      	bmi.n	d7b6 <__aeabi_fsub+0x2ea>
    d7b4:	e737      	b.n	d626 <__aeabi_fsub+0x15a>
    d7b6:	1af3      	subs	r3, r6, r3
    d7b8:	000d      	movs	r5, r1
    d7ba:	e6cd      	b.n	d558 <__aeabi_fsub+0x8c>
    d7bc:	24ff      	movs	r4, #255	; 0xff
    d7be:	2e00      	cmp	r6, #0
    d7c0:	d100      	bne.n	d7c4 <__aeabi_fsub+0x2f8>
    d7c2:	e6c9      	b.n	d558 <__aeabi_fsub+0x8c>
    d7c4:	2280      	movs	r2, #128	; 0x80
    d7c6:	4650      	mov	r0, sl
    d7c8:	03d2      	lsls	r2, r2, #15
    d7ca:	4210      	tst	r0, r2
    d7cc:	d0a4      	beq.n	d718 <__aeabi_fsub+0x24c>
    d7ce:	4660      	mov	r0, ip
    d7d0:	4210      	tst	r0, r2
    d7d2:	d1a1      	bne.n	d718 <__aeabi_fsub+0x24c>
    d7d4:	0033      	movs	r3, r6
    d7d6:	000d      	movs	r5, r1
    d7d8:	24ff      	movs	r4, #255	; 0xff
    d7da:	e6bd      	b.n	d558 <__aeabi_fsub+0x8c>
    d7dc:	0033      	movs	r3, r6
    d7de:	24ff      	movs	r4, #255	; 0xff
    d7e0:	e6ba      	b.n	d558 <__aeabi_fsub+0x8c>
    d7e2:	2301      	movs	r3, #1
    d7e4:	e76e      	b.n	d6c4 <__aeabi_fsub+0x1f8>
    d7e6:	0033      	movs	r3, r6
    d7e8:	0004      	movs	r4, r0
    d7ea:	e6b5      	b.n	d558 <__aeabi_fsub+0x8c>
    d7ec:	2700      	movs	r7, #0
    d7ee:	2200      	movs	r2, #0
    d7f0:	e71c      	b.n	d62c <__aeabi_fsub+0x160>
    d7f2:	0033      	movs	r3, r6
    d7f4:	e6b0      	b.n	d558 <__aeabi_fsub+0x8c>
    d7f6:	2301      	movs	r3, #1
    d7f8:	e7c0      	b.n	d77c <__aeabi_fsub+0x2b0>
    d7fa:	46c0      	nop			; (mov r8, r8)
    d7fc:	7dffffff 	.word	0x7dffffff
    d800:	fbffffff 	.word	0xfbffffff

0000d804 <__aeabi_f2iz>:
    d804:	0241      	lsls	r1, r0, #9
    d806:	0043      	lsls	r3, r0, #1
    d808:	0fc2      	lsrs	r2, r0, #31
    d80a:	0a49      	lsrs	r1, r1, #9
    d80c:	0e1b      	lsrs	r3, r3, #24
    d80e:	2000      	movs	r0, #0
    d810:	2b7e      	cmp	r3, #126	; 0x7e
    d812:	dd0d      	ble.n	d830 <__aeabi_f2iz+0x2c>
    d814:	2b9d      	cmp	r3, #157	; 0x9d
    d816:	dc0c      	bgt.n	d832 <__aeabi_f2iz+0x2e>
    d818:	2080      	movs	r0, #128	; 0x80
    d81a:	0400      	lsls	r0, r0, #16
    d81c:	4301      	orrs	r1, r0
    d81e:	2b95      	cmp	r3, #149	; 0x95
    d820:	dc0a      	bgt.n	d838 <__aeabi_f2iz+0x34>
    d822:	2096      	movs	r0, #150	; 0x96
    d824:	1ac3      	subs	r3, r0, r3
    d826:	40d9      	lsrs	r1, r3
    d828:	4248      	negs	r0, r1
    d82a:	2a00      	cmp	r2, #0
    d82c:	d100      	bne.n	d830 <__aeabi_f2iz+0x2c>
    d82e:	0008      	movs	r0, r1
    d830:	4770      	bx	lr
    d832:	4b03      	ldr	r3, [pc, #12]	; (d840 <__aeabi_f2iz+0x3c>)
    d834:	18d0      	adds	r0, r2, r3
    d836:	e7fb      	b.n	d830 <__aeabi_f2iz+0x2c>
    d838:	3b96      	subs	r3, #150	; 0x96
    d83a:	4099      	lsls	r1, r3
    d83c:	e7f4      	b.n	d828 <__aeabi_f2iz+0x24>
    d83e:	46c0      	nop			; (mov r8, r8)
    d840:	7fffffff 	.word	0x7fffffff

0000d844 <__aeabi_ui2f>:
    d844:	b510      	push	{r4, lr}
    d846:	1e04      	subs	r4, r0, #0
    d848:	d027      	beq.n	d89a <__aeabi_ui2f+0x56>
    d84a:	f000 f87b 	bl	d944 <__clzsi2>
    d84e:	239e      	movs	r3, #158	; 0x9e
    d850:	1a1b      	subs	r3, r3, r0
    d852:	2b96      	cmp	r3, #150	; 0x96
    d854:	dc0a      	bgt.n	d86c <__aeabi_ui2f+0x28>
    d856:	2296      	movs	r2, #150	; 0x96
    d858:	1ad2      	subs	r2, r2, r3
    d85a:	4094      	lsls	r4, r2
    d85c:	0264      	lsls	r4, r4, #9
    d85e:	0a64      	lsrs	r4, r4, #9
    d860:	b2db      	uxtb	r3, r3
    d862:	0264      	lsls	r4, r4, #9
    d864:	05db      	lsls	r3, r3, #23
    d866:	0a60      	lsrs	r0, r4, #9
    d868:	4318      	orrs	r0, r3
    d86a:	bd10      	pop	{r4, pc}
    d86c:	2b99      	cmp	r3, #153	; 0x99
    d86e:	dc17      	bgt.n	d8a0 <__aeabi_ui2f+0x5c>
    d870:	2299      	movs	r2, #153	; 0x99
    d872:	1ad2      	subs	r2, r2, r3
    d874:	2a00      	cmp	r2, #0
    d876:	dd27      	ble.n	d8c8 <__aeabi_ui2f+0x84>
    d878:	4094      	lsls	r4, r2
    d87a:	0022      	movs	r2, r4
    d87c:	4c13      	ldr	r4, [pc, #76]	; (d8cc <__aeabi_ui2f+0x88>)
    d87e:	4014      	ands	r4, r2
    d880:	0751      	lsls	r1, r2, #29
    d882:	d004      	beq.n	d88e <__aeabi_ui2f+0x4a>
    d884:	210f      	movs	r1, #15
    d886:	400a      	ands	r2, r1
    d888:	2a04      	cmp	r2, #4
    d88a:	d000      	beq.n	d88e <__aeabi_ui2f+0x4a>
    d88c:	3404      	adds	r4, #4
    d88e:	0162      	lsls	r2, r4, #5
    d890:	d412      	bmi.n	d8b8 <__aeabi_ui2f+0x74>
    d892:	01a4      	lsls	r4, r4, #6
    d894:	0a64      	lsrs	r4, r4, #9
    d896:	b2db      	uxtb	r3, r3
    d898:	e7e3      	b.n	d862 <__aeabi_ui2f+0x1e>
    d89a:	2300      	movs	r3, #0
    d89c:	2400      	movs	r4, #0
    d89e:	e7e0      	b.n	d862 <__aeabi_ui2f+0x1e>
    d8a0:	22b9      	movs	r2, #185	; 0xb9
    d8a2:	0021      	movs	r1, r4
    d8a4:	1ad2      	subs	r2, r2, r3
    d8a6:	4091      	lsls	r1, r2
    d8a8:	000a      	movs	r2, r1
    d8aa:	1e51      	subs	r1, r2, #1
    d8ac:	418a      	sbcs	r2, r1
    d8ae:	2105      	movs	r1, #5
    d8b0:	1a09      	subs	r1, r1, r0
    d8b2:	40cc      	lsrs	r4, r1
    d8b4:	4314      	orrs	r4, r2
    d8b6:	e7db      	b.n	d870 <__aeabi_ui2f+0x2c>
    d8b8:	4b04      	ldr	r3, [pc, #16]	; (d8cc <__aeabi_ui2f+0x88>)
    d8ba:	401c      	ands	r4, r3
    d8bc:	239f      	movs	r3, #159	; 0x9f
    d8be:	01a4      	lsls	r4, r4, #6
    d8c0:	1a1b      	subs	r3, r3, r0
    d8c2:	0a64      	lsrs	r4, r4, #9
    d8c4:	b2db      	uxtb	r3, r3
    d8c6:	e7cc      	b.n	d862 <__aeabi_ui2f+0x1e>
    d8c8:	0022      	movs	r2, r4
    d8ca:	e7d7      	b.n	d87c <__aeabi_ui2f+0x38>
    d8cc:	fbffffff 	.word	0xfbffffff

0000d8d0 <__aeabi_cfrcmple>:
    d8d0:	4684      	mov	ip, r0
    d8d2:	1c08      	adds	r0, r1, #0
    d8d4:	4661      	mov	r1, ip
    d8d6:	e7ff      	b.n	d8d8 <__aeabi_cfcmpeq>

0000d8d8 <__aeabi_cfcmpeq>:
    d8d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d8da:	f000 f8b7 	bl	da4c <__lesf2>
    d8de:	2800      	cmp	r0, #0
    d8e0:	d401      	bmi.n	d8e6 <__aeabi_cfcmpeq+0xe>
    d8e2:	2100      	movs	r1, #0
    d8e4:	42c8      	cmn	r0, r1
    d8e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000d8e8 <__aeabi_fcmpeq>:
    d8e8:	b510      	push	{r4, lr}
    d8ea:	f000 f849 	bl	d980 <__eqsf2>
    d8ee:	4240      	negs	r0, r0
    d8f0:	3001      	adds	r0, #1
    d8f2:	bd10      	pop	{r4, pc}

0000d8f4 <__aeabi_fcmplt>:
    d8f4:	b510      	push	{r4, lr}
    d8f6:	f000 f8a9 	bl	da4c <__lesf2>
    d8fa:	2800      	cmp	r0, #0
    d8fc:	db01      	blt.n	d902 <__aeabi_fcmplt+0xe>
    d8fe:	2000      	movs	r0, #0
    d900:	bd10      	pop	{r4, pc}
    d902:	2001      	movs	r0, #1
    d904:	bd10      	pop	{r4, pc}
    d906:	46c0      	nop			; (mov r8, r8)

0000d908 <__aeabi_fcmple>:
    d908:	b510      	push	{r4, lr}
    d90a:	f000 f89f 	bl	da4c <__lesf2>
    d90e:	2800      	cmp	r0, #0
    d910:	dd01      	ble.n	d916 <__aeabi_fcmple+0xe>
    d912:	2000      	movs	r0, #0
    d914:	bd10      	pop	{r4, pc}
    d916:	2001      	movs	r0, #1
    d918:	bd10      	pop	{r4, pc}
    d91a:	46c0      	nop			; (mov r8, r8)

0000d91c <__aeabi_fcmpgt>:
    d91c:	b510      	push	{r4, lr}
    d91e:	f000 f855 	bl	d9cc <__gesf2>
    d922:	2800      	cmp	r0, #0
    d924:	dc01      	bgt.n	d92a <__aeabi_fcmpgt+0xe>
    d926:	2000      	movs	r0, #0
    d928:	bd10      	pop	{r4, pc}
    d92a:	2001      	movs	r0, #1
    d92c:	bd10      	pop	{r4, pc}
    d92e:	46c0      	nop			; (mov r8, r8)

0000d930 <__aeabi_fcmpge>:
    d930:	b510      	push	{r4, lr}
    d932:	f000 f84b 	bl	d9cc <__gesf2>
    d936:	2800      	cmp	r0, #0
    d938:	da01      	bge.n	d93e <__aeabi_fcmpge+0xe>
    d93a:	2000      	movs	r0, #0
    d93c:	bd10      	pop	{r4, pc}
    d93e:	2001      	movs	r0, #1
    d940:	bd10      	pop	{r4, pc}
    d942:	46c0      	nop			; (mov r8, r8)

0000d944 <__clzsi2>:
    d944:	211c      	movs	r1, #28
    d946:	2301      	movs	r3, #1
    d948:	041b      	lsls	r3, r3, #16
    d94a:	4298      	cmp	r0, r3
    d94c:	d301      	bcc.n	d952 <__clzsi2+0xe>
    d94e:	0c00      	lsrs	r0, r0, #16
    d950:	3910      	subs	r1, #16
    d952:	0a1b      	lsrs	r3, r3, #8
    d954:	4298      	cmp	r0, r3
    d956:	d301      	bcc.n	d95c <__clzsi2+0x18>
    d958:	0a00      	lsrs	r0, r0, #8
    d95a:	3908      	subs	r1, #8
    d95c:	091b      	lsrs	r3, r3, #4
    d95e:	4298      	cmp	r0, r3
    d960:	d301      	bcc.n	d966 <__clzsi2+0x22>
    d962:	0900      	lsrs	r0, r0, #4
    d964:	3904      	subs	r1, #4
    d966:	a202      	add	r2, pc, #8	; (adr r2, d970 <__clzsi2+0x2c>)
    d968:	5c10      	ldrb	r0, [r2, r0]
    d96a:	1840      	adds	r0, r0, r1
    d96c:	4770      	bx	lr
    d96e:	46c0      	nop			; (mov r8, r8)
    d970:	02020304 	.word	0x02020304
    d974:	01010101 	.word	0x01010101
	...

0000d980 <__eqsf2>:
    d980:	b570      	push	{r4, r5, r6, lr}
    d982:	0042      	lsls	r2, r0, #1
    d984:	0245      	lsls	r5, r0, #9
    d986:	024e      	lsls	r6, r1, #9
    d988:	004c      	lsls	r4, r1, #1
    d98a:	0fc3      	lsrs	r3, r0, #31
    d98c:	0a6d      	lsrs	r5, r5, #9
    d98e:	0e12      	lsrs	r2, r2, #24
    d990:	0a76      	lsrs	r6, r6, #9
    d992:	0e24      	lsrs	r4, r4, #24
    d994:	0fc9      	lsrs	r1, r1, #31
    d996:	2001      	movs	r0, #1
    d998:	2aff      	cmp	r2, #255	; 0xff
    d99a:	d006      	beq.n	d9aa <__eqsf2+0x2a>
    d99c:	2cff      	cmp	r4, #255	; 0xff
    d99e:	d003      	beq.n	d9a8 <__eqsf2+0x28>
    d9a0:	42a2      	cmp	r2, r4
    d9a2:	d101      	bne.n	d9a8 <__eqsf2+0x28>
    d9a4:	42b5      	cmp	r5, r6
    d9a6:	d006      	beq.n	d9b6 <__eqsf2+0x36>
    d9a8:	bd70      	pop	{r4, r5, r6, pc}
    d9aa:	2d00      	cmp	r5, #0
    d9ac:	d1fc      	bne.n	d9a8 <__eqsf2+0x28>
    d9ae:	2cff      	cmp	r4, #255	; 0xff
    d9b0:	d1fa      	bne.n	d9a8 <__eqsf2+0x28>
    d9b2:	2e00      	cmp	r6, #0
    d9b4:	d1f8      	bne.n	d9a8 <__eqsf2+0x28>
    d9b6:	428b      	cmp	r3, r1
    d9b8:	d006      	beq.n	d9c8 <__eqsf2+0x48>
    d9ba:	2001      	movs	r0, #1
    d9bc:	2a00      	cmp	r2, #0
    d9be:	d1f3      	bne.n	d9a8 <__eqsf2+0x28>
    d9c0:	0028      	movs	r0, r5
    d9c2:	1e45      	subs	r5, r0, #1
    d9c4:	41a8      	sbcs	r0, r5
    d9c6:	e7ef      	b.n	d9a8 <__eqsf2+0x28>
    d9c8:	2000      	movs	r0, #0
    d9ca:	e7ed      	b.n	d9a8 <__eqsf2+0x28>

0000d9cc <__gesf2>:
    d9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9ce:	0042      	lsls	r2, r0, #1
    d9d0:	0245      	lsls	r5, r0, #9
    d9d2:	024c      	lsls	r4, r1, #9
    d9d4:	0fc3      	lsrs	r3, r0, #31
    d9d6:	0048      	lsls	r0, r1, #1
    d9d8:	0a6d      	lsrs	r5, r5, #9
    d9da:	0e12      	lsrs	r2, r2, #24
    d9dc:	0a64      	lsrs	r4, r4, #9
    d9de:	0e00      	lsrs	r0, r0, #24
    d9e0:	0fc9      	lsrs	r1, r1, #31
    d9e2:	2aff      	cmp	r2, #255	; 0xff
    d9e4:	d01e      	beq.n	da24 <__gesf2+0x58>
    d9e6:	28ff      	cmp	r0, #255	; 0xff
    d9e8:	d021      	beq.n	da2e <__gesf2+0x62>
    d9ea:	2a00      	cmp	r2, #0
    d9ec:	d10a      	bne.n	da04 <__gesf2+0x38>
    d9ee:	426e      	negs	r6, r5
    d9f0:	416e      	adcs	r6, r5
    d9f2:	b2f6      	uxtb	r6, r6
    d9f4:	2800      	cmp	r0, #0
    d9f6:	d10f      	bne.n	da18 <__gesf2+0x4c>
    d9f8:	2c00      	cmp	r4, #0
    d9fa:	d10d      	bne.n	da18 <__gesf2+0x4c>
    d9fc:	2000      	movs	r0, #0
    d9fe:	2d00      	cmp	r5, #0
    da00:	d009      	beq.n	da16 <__gesf2+0x4a>
    da02:	e005      	b.n	da10 <__gesf2+0x44>
    da04:	2800      	cmp	r0, #0
    da06:	d101      	bne.n	da0c <__gesf2+0x40>
    da08:	2c00      	cmp	r4, #0
    da0a:	d001      	beq.n	da10 <__gesf2+0x44>
    da0c:	428b      	cmp	r3, r1
    da0e:	d011      	beq.n	da34 <__gesf2+0x68>
    da10:	2101      	movs	r1, #1
    da12:	4258      	negs	r0, r3
    da14:	4308      	orrs	r0, r1
    da16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da18:	2e00      	cmp	r6, #0
    da1a:	d0f7      	beq.n	da0c <__gesf2+0x40>
    da1c:	2001      	movs	r0, #1
    da1e:	3901      	subs	r1, #1
    da20:	4308      	orrs	r0, r1
    da22:	e7f8      	b.n	da16 <__gesf2+0x4a>
    da24:	2d00      	cmp	r5, #0
    da26:	d0de      	beq.n	d9e6 <__gesf2+0x1a>
    da28:	2002      	movs	r0, #2
    da2a:	4240      	negs	r0, r0
    da2c:	e7f3      	b.n	da16 <__gesf2+0x4a>
    da2e:	2c00      	cmp	r4, #0
    da30:	d0db      	beq.n	d9ea <__gesf2+0x1e>
    da32:	e7f9      	b.n	da28 <__gesf2+0x5c>
    da34:	4282      	cmp	r2, r0
    da36:	dceb      	bgt.n	da10 <__gesf2+0x44>
    da38:	db04      	blt.n	da44 <__gesf2+0x78>
    da3a:	42a5      	cmp	r5, r4
    da3c:	d8e8      	bhi.n	da10 <__gesf2+0x44>
    da3e:	2000      	movs	r0, #0
    da40:	42a5      	cmp	r5, r4
    da42:	d2e8      	bcs.n	da16 <__gesf2+0x4a>
    da44:	2101      	movs	r1, #1
    da46:	1e58      	subs	r0, r3, #1
    da48:	4308      	orrs	r0, r1
    da4a:	e7e4      	b.n	da16 <__gesf2+0x4a>

0000da4c <__lesf2>:
    da4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    da4e:	0042      	lsls	r2, r0, #1
    da50:	024d      	lsls	r5, r1, #9
    da52:	004c      	lsls	r4, r1, #1
    da54:	0246      	lsls	r6, r0, #9
    da56:	0a76      	lsrs	r6, r6, #9
    da58:	0e12      	lsrs	r2, r2, #24
    da5a:	0fc3      	lsrs	r3, r0, #31
    da5c:	0a6d      	lsrs	r5, r5, #9
    da5e:	0e24      	lsrs	r4, r4, #24
    da60:	0fc9      	lsrs	r1, r1, #31
    da62:	2aff      	cmp	r2, #255	; 0xff
    da64:	d016      	beq.n	da94 <__lesf2+0x48>
    da66:	2cff      	cmp	r4, #255	; 0xff
    da68:	d018      	beq.n	da9c <__lesf2+0x50>
    da6a:	2a00      	cmp	r2, #0
    da6c:	d10a      	bne.n	da84 <__lesf2+0x38>
    da6e:	4270      	negs	r0, r6
    da70:	4170      	adcs	r0, r6
    da72:	b2c0      	uxtb	r0, r0
    da74:	2c00      	cmp	r4, #0
    da76:	d015      	beq.n	daa4 <__lesf2+0x58>
    da78:	2800      	cmp	r0, #0
    da7a:	d005      	beq.n	da88 <__lesf2+0x3c>
    da7c:	2001      	movs	r0, #1
    da7e:	3901      	subs	r1, #1
    da80:	4308      	orrs	r0, r1
    da82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da84:	2c00      	cmp	r4, #0
    da86:	d013      	beq.n	dab0 <__lesf2+0x64>
    da88:	4299      	cmp	r1, r3
    da8a:	d014      	beq.n	dab6 <__lesf2+0x6a>
    da8c:	2001      	movs	r0, #1
    da8e:	425b      	negs	r3, r3
    da90:	4318      	orrs	r0, r3
    da92:	e7f6      	b.n	da82 <__lesf2+0x36>
    da94:	2002      	movs	r0, #2
    da96:	2e00      	cmp	r6, #0
    da98:	d1f3      	bne.n	da82 <__lesf2+0x36>
    da9a:	e7e4      	b.n	da66 <__lesf2+0x1a>
    da9c:	2002      	movs	r0, #2
    da9e:	2d00      	cmp	r5, #0
    daa0:	d1ef      	bne.n	da82 <__lesf2+0x36>
    daa2:	e7e2      	b.n	da6a <__lesf2+0x1e>
    daa4:	2d00      	cmp	r5, #0
    daa6:	d1e7      	bne.n	da78 <__lesf2+0x2c>
    daa8:	2000      	movs	r0, #0
    daaa:	2e00      	cmp	r6, #0
    daac:	d0e9      	beq.n	da82 <__lesf2+0x36>
    daae:	e7ed      	b.n	da8c <__lesf2+0x40>
    dab0:	2d00      	cmp	r5, #0
    dab2:	d1e9      	bne.n	da88 <__lesf2+0x3c>
    dab4:	e7ea      	b.n	da8c <__lesf2+0x40>
    dab6:	42a2      	cmp	r2, r4
    dab8:	dc06      	bgt.n	dac8 <__lesf2+0x7c>
    daba:	dbdf      	blt.n	da7c <__lesf2+0x30>
    dabc:	42ae      	cmp	r6, r5
    dabe:	d803      	bhi.n	dac8 <__lesf2+0x7c>
    dac0:	2000      	movs	r0, #0
    dac2:	42ae      	cmp	r6, r5
    dac4:	d3da      	bcc.n	da7c <__lesf2+0x30>
    dac6:	e7dc      	b.n	da82 <__lesf2+0x36>
    dac8:	2001      	movs	r0, #1
    daca:	4249      	negs	r1, r1
    dacc:	4308      	orrs	r0, r1
    dace:	e7d8      	b.n	da82 <__lesf2+0x36>

0000dad0 <atoi>:
    dad0:	b510      	push	{r4, lr}
    dad2:	220a      	movs	r2, #10
    dad4:	2100      	movs	r1, #0
    dad6:	f000 f9cb 	bl	de70 <strtol>
    dada:	bd10      	pop	{r4, pc}

0000dadc <__libc_init_array>:
    dadc:	b570      	push	{r4, r5, r6, lr}
    dade:	2600      	movs	r6, #0
    dae0:	4d0c      	ldr	r5, [pc, #48]	; (db14 <__libc_init_array+0x38>)
    dae2:	4c0d      	ldr	r4, [pc, #52]	; (db18 <__libc_init_array+0x3c>)
    dae4:	1b64      	subs	r4, r4, r5
    dae6:	10a4      	asrs	r4, r4, #2
    dae8:	42a6      	cmp	r6, r4
    daea:	d109      	bne.n	db00 <__libc_init_array+0x24>
    daec:	2600      	movs	r6, #0
    daee:	f001 f99f 	bl	ee30 <_init>
    daf2:	4d0a      	ldr	r5, [pc, #40]	; (db1c <__libc_init_array+0x40>)
    daf4:	4c0a      	ldr	r4, [pc, #40]	; (db20 <__libc_init_array+0x44>)
    daf6:	1b64      	subs	r4, r4, r5
    daf8:	10a4      	asrs	r4, r4, #2
    dafa:	42a6      	cmp	r6, r4
    dafc:	d105      	bne.n	db0a <__libc_init_array+0x2e>
    dafe:	bd70      	pop	{r4, r5, r6, pc}
    db00:	00b3      	lsls	r3, r6, #2
    db02:	58eb      	ldr	r3, [r5, r3]
    db04:	4798      	blx	r3
    db06:	3601      	adds	r6, #1
    db08:	e7ee      	b.n	dae8 <__libc_init_array+0xc>
    db0a:	00b3      	lsls	r3, r6, #2
    db0c:	58eb      	ldr	r3, [r5, r3]
    db0e:	4798      	blx	r3
    db10:	3601      	adds	r6, #1
    db12:	e7f2      	b.n	dafa <__libc_init_array+0x1e>
    db14:	0000ee3c 	.word	0x0000ee3c
    db18:	0000ee3c 	.word	0x0000ee3c
    db1c:	0000ee3c 	.word	0x0000ee3c
    db20:	0000ee40 	.word	0x0000ee40

0000db24 <memcpy>:
    db24:	2300      	movs	r3, #0
    db26:	b510      	push	{r4, lr}
    db28:	429a      	cmp	r2, r3
    db2a:	d100      	bne.n	db2e <memcpy+0xa>
    db2c:	bd10      	pop	{r4, pc}
    db2e:	5ccc      	ldrb	r4, [r1, r3]
    db30:	54c4      	strb	r4, [r0, r3]
    db32:	3301      	adds	r3, #1
    db34:	e7f8      	b.n	db28 <memcpy+0x4>

0000db36 <memmove>:
    db36:	b510      	push	{r4, lr}
    db38:	4288      	cmp	r0, r1
    db3a:	d902      	bls.n	db42 <memmove+0xc>
    db3c:	188b      	adds	r3, r1, r2
    db3e:	4298      	cmp	r0, r3
    db40:	d308      	bcc.n	db54 <memmove+0x1e>
    db42:	2300      	movs	r3, #0
    db44:	429a      	cmp	r2, r3
    db46:	d007      	beq.n	db58 <memmove+0x22>
    db48:	5ccc      	ldrb	r4, [r1, r3]
    db4a:	54c4      	strb	r4, [r0, r3]
    db4c:	3301      	adds	r3, #1
    db4e:	e7f9      	b.n	db44 <memmove+0xe>
    db50:	5c8b      	ldrb	r3, [r1, r2]
    db52:	5483      	strb	r3, [r0, r2]
    db54:	3a01      	subs	r2, #1
    db56:	d2fb      	bcs.n	db50 <memmove+0x1a>
    db58:	bd10      	pop	{r4, pc}

0000db5a <memset>:
    db5a:	0003      	movs	r3, r0
    db5c:	1882      	adds	r2, r0, r2
    db5e:	4293      	cmp	r3, r2
    db60:	d100      	bne.n	db64 <memset+0xa>
    db62:	4770      	bx	lr
    db64:	7019      	strb	r1, [r3, #0]
    db66:	3301      	adds	r3, #1
    db68:	e7f9      	b.n	db5e <memset+0x4>
	...

0000db6c <_free_r>:
    db6c:	b570      	push	{r4, r5, r6, lr}
    db6e:	0005      	movs	r5, r0
    db70:	2900      	cmp	r1, #0
    db72:	d010      	beq.n	db96 <_free_r+0x2a>
    db74:	1f0c      	subs	r4, r1, #4
    db76:	6823      	ldr	r3, [r4, #0]
    db78:	2b00      	cmp	r3, #0
    db7a:	da00      	bge.n	db7e <_free_r+0x12>
    db7c:	18e4      	adds	r4, r4, r3
    db7e:	0028      	movs	r0, r5
    db80:	f000 f99f 	bl	dec2 <__malloc_lock>
    db84:	4a1d      	ldr	r2, [pc, #116]	; (dbfc <_free_r+0x90>)
    db86:	6813      	ldr	r3, [r2, #0]
    db88:	2b00      	cmp	r3, #0
    db8a:	d105      	bne.n	db98 <_free_r+0x2c>
    db8c:	6063      	str	r3, [r4, #4]
    db8e:	6014      	str	r4, [r2, #0]
    db90:	0028      	movs	r0, r5
    db92:	f000 f997 	bl	dec4 <__malloc_unlock>
    db96:	bd70      	pop	{r4, r5, r6, pc}
    db98:	42a3      	cmp	r3, r4
    db9a:	d909      	bls.n	dbb0 <_free_r+0x44>
    db9c:	6821      	ldr	r1, [r4, #0]
    db9e:	1860      	adds	r0, r4, r1
    dba0:	4283      	cmp	r3, r0
    dba2:	d1f3      	bne.n	db8c <_free_r+0x20>
    dba4:	6818      	ldr	r0, [r3, #0]
    dba6:	685b      	ldr	r3, [r3, #4]
    dba8:	1841      	adds	r1, r0, r1
    dbaa:	6021      	str	r1, [r4, #0]
    dbac:	e7ee      	b.n	db8c <_free_r+0x20>
    dbae:	0013      	movs	r3, r2
    dbb0:	685a      	ldr	r2, [r3, #4]
    dbb2:	2a00      	cmp	r2, #0
    dbb4:	d001      	beq.n	dbba <_free_r+0x4e>
    dbb6:	42a2      	cmp	r2, r4
    dbb8:	d9f9      	bls.n	dbae <_free_r+0x42>
    dbba:	6819      	ldr	r1, [r3, #0]
    dbbc:	1858      	adds	r0, r3, r1
    dbbe:	42a0      	cmp	r0, r4
    dbc0:	d10b      	bne.n	dbda <_free_r+0x6e>
    dbc2:	6820      	ldr	r0, [r4, #0]
    dbc4:	1809      	adds	r1, r1, r0
    dbc6:	1858      	adds	r0, r3, r1
    dbc8:	6019      	str	r1, [r3, #0]
    dbca:	4282      	cmp	r2, r0
    dbcc:	d1e0      	bne.n	db90 <_free_r+0x24>
    dbce:	6810      	ldr	r0, [r2, #0]
    dbd0:	6852      	ldr	r2, [r2, #4]
    dbd2:	1841      	adds	r1, r0, r1
    dbd4:	6019      	str	r1, [r3, #0]
    dbd6:	605a      	str	r2, [r3, #4]
    dbd8:	e7da      	b.n	db90 <_free_r+0x24>
    dbda:	42a0      	cmp	r0, r4
    dbdc:	d902      	bls.n	dbe4 <_free_r+0x78>
    dbde:	230c      	movs	r3, #12
    dbe0:	602b      	str	r3, [r5, #0]
    dbe2:	e7d5      	b.n	db90 <_free_r+0x24>
    dbe4:	6821      	ldr	r1, [r4, #0]
    dbe6:	1860      	adds	r0, r4, r1
    dbe8:	4282      	cmp	r2, r0
    dbea:	d103      	bne.n	dbf4 <_free_r+0x88>
    dbec:	6810      	ldr	r0, [r2, #0]
    dbee:	6852      	ldr	r2, [r2, #4]
    dbf0:	1841      	adds	r1, r0, r1
    dbf2:	6021      	str	r1, [r4, #0]
    dbf4:	6062      	str	r2, [r4, #4]
    dbf6:	605c      	str	r4, [r3, #4]
    dbf8:	e7ca      	b.n	db90 <_free_r+0x24>
    dbfa:	46c0      	nop			; (mov r8, r8)
    dbfc:	20000728 	.word	0x20000728

0000dc00 <_malloc_r>:
    dc00:	2303      	movs	r3, #3
    dc02:	b570      	push	{r4, r5, r6, lr}
    dc04:	1ccd      	adds	r5, r1, #3
    dc06:	439d      	bics	r5, r3
    dc08:	3508      	adds	r5, #8
    dc0a:	0006      	movs	r6, r0
    dc0c:	2d0c      	cmp	r5, #12
    dc0e:	d21e      	bcs.n	dc4e <_malloc_r+0x4e>
    dc10:	250c      	movs	r5, #12
    dc12:	42a9      	cmp	r1, r5
    dc14:	d81d      	bhi.n	dc52 <_malloc_r+0x52>
    dc16:	0030      	movs	r0, r6
    dc18:	f000 f953 	bl	dec2 <__malloc_lock>
    dc1c:	4a25      	ldr	r2, [pc, #148]	; (dcb4 <_malloc_r+0xb4>)
    dc1e:	6814      	ldr	r4, [r2, #0]
    dc20:	0021      	movs	r1, r4
    dc22:	2900      	cmp	r1, #0
    dc24:	d119      	bne.n	dc5a <_malloc_r+0x5a>
    dc26:	4c24      	ldr	r4, [pc, #144]	; (dcb8 <_malloc_r+0xb8>)
    dc28:	6823      	ldr	r3, [r4, #0]
    dc2a:	2b00      	cmp	r3, #0
    dc2c:	d103      	bne.n	dc36 <_malloc_r+0x36>
    dc2e:	0030      	movs	r0, r6
    dc30:	f000 f844 	bl	dcbc <_sbrk_r>
    dc34:	6020      	str	r0, [r4, #0]
    dc36:	0029      	movs	r1, r5
    dc38:	0030      	movs	r0, r6
    dc3a:	f000 f83f 	bl	dcbc <_sbrk_r>
    dc3e:	1c43      	adds	r3, r0, #1
    dc40:	d12c      	bne.n	dc9c <_malloc_r+0x9c>
    dc42:	230c      	movs	r3, #12
    dc44:	0030      	movs	r0, r6
    dc46:	6033      	str	r3, [r6, #0]
    dc48:	f000 f93c 	bl	dec4 <__malloc_unlock>
    dc4c:	e003      	b.n	dc56 <_malloc_r+0x56>
    dc4e:	2d00      	cmp	r5, #0
    dc50:	dadf      	bge.n	dc12 <_malloc_r+0x12>
    dc52:	230c      	movs	r3, #12
    dc54:	6033      	str	r3, [r6, #0]
    dc56:	2000      	movs	r0, #0
    dc58:	bd70      	pop	{r4, r5, r6, pc}
    dc5a:	680b      	ldr	r3, [r1, #0]
    dc5c:	1b5b      	subs	r3, r3, r5
    dc5e:	d41a      	bmi.n	dc96 <_malloc_r+0x96>
    dc60:	2b0b      	cmp	r3, #11
    dc62:	d903      	bls.n	dc6c <_malloc_r+0x6c>
    dc64:	600b      	str	r3, [r1, #0]
    dc66:	18cc      	adds	r4, r1, r3
    dc68:	6025      	str	r5, [r4, #0]
    dc6a:	e003      	b.n	dc74 <_malloc_r+0x74>
    dc6c:	428c      	cmp	r4, r1
    dc6e:	d10e      	bne.n	dc8e <_malloc_r+0x8e>
    dc70:	6863      	ldr	r3, [r4, #4]
    dc72:	6013      	str	r3, [r2, #0]
    dc74:	0030      	movs	r0, r6
    dc76:	f000 f925 	bl	dec4 <__malloc_unlock>
    dc7a:	0020      	movs	r0, r4
    dc7c:	2207      	movs	r2, #7
    dc7e:	300b      	adds	r0, #11
    dc80:	1d23      	adds	r3, r4, #4
    dc82:	4390      	bics	r0, r2
    dc84:	1ac3      	subs	r3, r0, r3
    dc86:	d0e7      	beq.n	dc58 <_malloc_r+0x58>
    dc88:	425a      	negs	r2, r3
    dc8a:	50e2      	str	r2, [r4, r3]
    dc8c:	e7e4      	b.n	dc58 <_malloc_r+0x58>
    dc8e:	684b      	ldr	r3, [r1, #4]
    dc90:	6063      	str	r3, [r4, #4]
    dc92:	000c      	movs	r4, r1
    dc94:	e7ee      	b.n	dc74 <_malloc_r+0x74>
    dc96:	000c      	movs	r4, r1
    dc98:	6849      	ldr	r1, [r1, #4]
    dc9a:	e7c2      	b.n	dc22 <_malloc_r+0x22>
    dc9c:	2303      	movs	r3, #3
    dc9e:	1cc4      	adds	r4, r0, #3
    dca0:	439c      	bics	r4, r3
    dca2:	42a0      	cmp	r0, r4
    dca4:	d0e0      	beq.n	dc68 <_malloc_r+0x68>
    dca6:	1a21      	subs	r1, r4, r0
    dca8:	0030      	movs	r0, r6
    dcaa:	f000 f807 	bl	dcbc <_sbrk_r>
    dcae:	1c43      	adds	r3, r0, #1
    dcb0:	d1da      	bne.n	dc68 <_malloc_r+0x68>
    dcb2:	e7c6      	b.n	dc42 <_malloc_r+0x42>
    dcb4:	20000728 	.word	0x20000728
    dcb8:	2000072c 	.word	0x2000072c

0000dcbc <_sbrk_r>:
    dcbc:	2300      	movs	r3, #0
    dcbe:	b570      	push	{r4, r5, r6, lr}
    dcc0:	4c06      	ldr	r4, [pc, #24]	; (dcdc <_sbrk_r+0x20>)
    dcc2:	0005      	movs	r5, r0
    dcc4:	0008      	movs	r0, r1
    dcc6:	6023      	str	r3, [r4, #0]
    dcc8:	f7fb fd52 	bl	9770 <_sbrk>
    dccc:	1c43      	adds	r3, r0, #1
    dcce:	d103      	bne.n	dcd8 <_sbrk_r+0x1c>
    dcd0:	6823      	ldr	r3, [r4, #0]
    dcd2:	2b00      	cmp	r3, #0
    dcd4:	d000      	beq.n	dcd8 <_sbrk_r+0x1c>
    dcd6:	602b      	str	r3, [r5, #0]
    dcd8:	bd70      	pop	{r4, r5, r6, pc}
    dcda:	46c0      	nop			; (mov r8, r8)
    dcdc:	200010fc 	.word	0x200010fc

0000dce0 <siprintf>:
    dce0:	b40e      	push	{r1, r2, r3}
    dce2:	b510      	push	{r4, lr}
    dce4:	b09d      	sub	sp, #116	; 0x74
    dce6:	a902      	add	r1, sp, #8
    dce8:	9002      	str	r0, [sp, #8]
    dcea:	6108      	str	r0, [r1, #16]
    dcec:	480b      	ldr	r0, [pc, #44]	; (dd1c <siprintf+0x3c>)
    dcee:	2482      	movs	r4, #130	; 0x82
    dcf0:	6088      	str	r0, [r1, #8]
    dcf2:	6148      	str	r0, [r1, #20]
    dcf4:	2001      	movs	r0, #1
    dcf6:	4240      	negs	r0, r0
    dcf8:	ab1f      	add	r3, sp, #124	; 0x7c
    dcfa:	81c8      	strh	r0, [r1, #14]
    dcfc:	4808      	ldr	r0, [pc, #32]	; (dd20 <siprintf+0x40>)
    dcfe:	cb04      	ldmia	r3!, {r2}
    dd00:	00a4      	lsls	r4, r4, #2
    dd02:	6800      	ldr	r0, [r0, #0]
    dd04:	9301      	str	r3, [sp, #4]
    dd06:	818c      	strh	r4, [r1, #12]
    dd08:	f000 f940 	bl	df8c <_svfiprintf_r>
    dd0c:	2300      	movs	r3, #0
    dd0e:	9a02      	ldr	r2, [sp, #8]
    dd10:	7013      	strb	r3, [r2, #0]
    dd12:	b01d      	add	sp, #116	; 0x74
    dd14:	bc10      	pop	{r4}
    dd16:	bc08      	pop	{r3}
    dd18:	b003      	add	sp, #12
    dd1a:	4718      	bx	r3
    dd1c:	7fffffff 	.word	0x7fffffff
    dd20:	20000070 	.word	0x20000070

0000dd24 <strlen>:
    dd24:	2300      	movs	r3, #0
    dd26:	5cc2      	ldrb	r2, [r0, r3]
    dd28:	3301      	adds	r3, #1
    dd2a:	2a00      	cmp	r2, #0
    dd2c:	d1fb      	bne.n	dd26 <strlen+0x2>
    dd2e:	1e58      	subs	r0, r3, #1
    dd30:	4770      	bx	lr

0000dd32 <strstr>:
    dd32:	b510      	push	{r4, lr}
    dd34:	0002      	movs	r2, r0
    dd36:	7800      	ldrb	r0, [r0, #0]
    dd38:	2800      	cmp	r0, #0
    dd3a:	d104      	bne.n	dd46 <strstr+0x14>
    dd3c:	7809      	ldrb	r1, [r1, #0]
    dd3e:	2900      	cmp	r1, #0
    dd40:	d00d      	beq.n	dd5e <strstr+0x2c>
    dd42:	bd10      	pop	{r4, pc}
    dd44:	3201      	adds	r2, #1
    dd46:	7810      	ldrb	r0, [r2, #0]
    dd48:	2800      	cmp	r0, #0
    dd4a:	d0fa      	beq.n	dd42 <strstr+0x10>
    dd4c:	2300      	movs	r3, #0
    dd4e:	5cc8      	ldrb	r0, [r1, r3]
    dd50:	2800      	cmp	r0, #0
    dd52:	d004      	beq.n	dd5e <strstr+0x2c>
    dd54:	5cd4      	ldrb	r4, [r2, r3]
    dd56:	4284      	cmp	r4, r0
    dd58:	d1f4      	bne.n	dd44 <strstr+0x12>
    dd5a:	3301      	adds	r3, #1
    dd5c:	e7f7      	b.n	dd4e <strstr+0x1c>
    dd5e:	0010      	movs	r0, r2
    dd60:	e7ef      	b.n	dd42 <strstr+0x10>
	...

0000dd64 <_strtol_l.isra.0>:
    dd64:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd66:	001f      	movs	r7, r3
    dd68:	000e      	movs	r6, r1
    dd6a:	b087      	sub	sp, #28
    dd6c:	9005      	str	r0, [sp, #20]
    dd6e:	9103      	str	r1, [sp, #12]
    dd70:	9202      	str	r2, [sp, #8]
    dd72:	980c      	ldr	r0, [sp, #48]	; 0x30
    dd74:	7834      	ldrb	r4, [r6, #0]
    dd76:	f000 f88f 	bl	de98 <__locale_ctype_ptr_l>
    dd7a:	2208      	movs	r2, #8
    dd7c:	1900      	adds	r0, r0, r4
    dd7e:	7843      	ldrb	r3, [r0, #1]
    dd80:	1c75      	adds	r5, r6, #1
    dd82:	4013      	ands	r3, r2
    dd84:	d10c      	bne.n	dda0 <_strtol_l.isra.0+0x3c>
    dd86:	2c2d      	cmp	r4, #45	; 0x2d
    dd88:	d10c      	bne.n	dda4 <_strtol_l.isra.0+0x40>
    dd8a:	3301      	adds	r3, #1
    dd8c:	782c      	ldrb	r4, [r5, #0]
    dd8e:	9301      	str	r3, [sp, #4]
    dd90:	1cb5      	adds	r5, r6, #2
    dd92:	2f00      	cmp	r7, #0
    dd94:	d00c      	beq.n	ddb0 <_strtol_l.isra.0+0x4c>
    dd96:	2f10      	cmp	r7, #16
    dd98:	d114      	bne.n	ddc4 <_strtol_l.isra.0+0x60>
    dd9a:	2c30      	cmp	r4, #48	; 0x30
    dd9c:	d00a      	beq.n	ddb4 <_strtol_l.isra.0+0x50>
    dd9e:	e011      	b.n	ddc4 <_strtol_l.isra.0+0x60>
    dda0:	002e      	movs	r6, r5
    dda2:	e7e6      	b.n	dd72 <_strtol_l.isra.0+0xe>
    dda4:	9301      	str	r3, [sp, #4]
    dda6:	2c2b      	cmp	r4, #43	; 0x2b
    dda8:	d1f3      	bne.n	dd92 <_strtol_l.isra.0+0x2e>
    ddaa:	782c      	ldrb	r4, [r5, #0]
    ddac:	1cb5      	adds	r5, r6, #2
    ddae:	e7f0      	b.n	dd92 <_strtol_l.isra.0+0x2e>
    ddb0:	2c30      	cmp	r4, #48	; 0x30
    ddb2:	d12f      	bne.n	de14 <_strtol_l.isra.0+0xb0>
    ddb4:	2220      	movs	r2, #32
    ddb6:	782b      	ldrb	r3, [r5, #0]
    ddb8:	4393      	bics	r3, r2
    ddba:	2b58      	cmp	r3, #88	; 0x58
    ddbc:	d151      	bne.n	de62 <_strtol_l.isra.0+0xfe>
    ddbe:	2710      	movs	r7, #16
    ddc0:	786c      	ldrb	r4, [r5, #1]
    ddc2:	3502      	adds	r5, #2
    ddc4:	9b01      	ldr	r3, [sp, #4]
    ddc6:	4a29      	ldr	r2, [pc, #164]	; (de6c <_strtol_l.isra.0+0x108>)
    ddc8:	0039      	movs	r1, r7
    ddca:	189e      	adds	r6, r3, r2
    ddcc:	0030      	movs	r0, r6
    ddce:	f7ff f80d 	bl	cdec <__aeabi_uidivmod>
    ddd2:	0030      	movs	r0, r6
    ddd4:	9104      	str	r1, [sp, #16]
    ddd6:	0039      	movs	r1, r7
    ddd8:	f7fe ff82 	bl	cce0 <__udivsi3>
    dddc:	2101      	movs	r1, #1
    ddde:	2300      	movs	r3, #0
    dde0:	4249      	negs	r1, r1
    dde2:	0002      	movs	r2, r0
    dde4:	468c      	mov	ip, r1
    dde6:	0018      	movs	r0, r3
    dde8:	0021      	movs	r1, r4
    ddea:	3930      	subs	r1, #48	; 0x30
    ddec:	2909      	cmp	r1, #9
    ddee:	d813      	bhi.n	de18 <_strtol_l.isra.0+0xb4>
    ddf0:	000c      	movs	r4, r1
    ddf2:	42a7      	cmp	r7, r4
    ddf4:	dd1c      	ble.n	de30 <_strtol_l.isra.0+0xcc>
    ddf6:	1c59      	adds	r1, r3, #1
    ddf8:	d009      	beq.n	de0e <_strtol_l.isra.0+0xaa>
    ddfa:	4663      	mov	r3, ip
    ddfc:	4282      	cmp	r2, r0
    ddfe:	d306      	bcc.n	de0e <_strtol_l.isra.0+0xaa>
    de00:	d102      	bne.n	de08 <_strtol_l.isra.0+0xa4>
    de02:	9904      	ldr	r1, [sp, #16]
    de04:	42a1      	cmp	r1, r4
    de06:	db02      	blt.n	de0e <_strtol_l.isra.0+0xaa>
    de08:	2301      	movs	r3, #1
    de0a:	4378      	muls	r0, r7
    de0c:	1820      	adds	r0, r4, r0
    de0e:	782c      	ldrb	r4, [r5, #0]
    de10:	3501      	adds	r5, #1
    de12:	e7e9      	b.n	dde8 <_strtol_l.isra.0+0x84>
    de14:	270a      	movs	r7, #10
    de16:	e7d5      	b.n	ddc4 <_strtol_l.isra.0+0x60>
    de18:	0021      	movs	r1, r4
    de1a:	3941      	subs	r1, #65	; 0x41
    de1c:	2919      	cmp	r1, #25
    de1e:	d801      	bhi.n	de24 <_strtol_l.isra.0+0xc0>
    de20:	3c37      	subs	r4, #55	; 0x37
    de22:	e7e6      	b.n	ddf2 <_strtol_l.isra.0+0x8e>
    de24:	0021      	movs	r1, r4
    de26:	3961      	subs	r1, #97	; 0x61
    de28:	2919      	cmp	r1, #25
    de2a:	d801      	bhi.n	de30 <_strtol_l.isra.0+0xcc>
    de2c:	3c57      	subs	r4, #87	; 0x57
    de2e:	e7e0      	b.n	ddf2 <_strtol_l.isra.0+0x8e>
    de30:	1c5a      	adds	r2, r3, #1
    de32:	d108      	bne.n	de46 <_strtol_l.isra.0+0xe2>
    de34:	9a05      	ldr	r2, [sp, #20]
    de36:	3323      	adds	r3, #35	; 0x23
    de38:	6013      	str	r3, [r2, #0]
    de3a:	9b02      	ldr	r3, [sp, #8]
    de3c:	0030      	movs	r0, r6
    de3e:	2b00      	cmp	r3, #0
    de40:	d10b      	bne.n	de5a <_strtol_l.isra.0+0xf6>
    de42:	b007      	add	sp, #28
    de44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de46:	9a01      	ldr	r2, [sp, #4]
    de48:	2a00      	cmp	r2, #0
    de4a:	d000      	beq.n	de4e <_strtol_l.isra.0+0xea>
    de4c:	4240      	negs	r0, r0
    de4e:	9a02      	ldr	r2, [sp, #8]
    de50:	2a00      	cmp	r2, #0
    de52:	d0f6      	beq.n	de42 <_strtol_l.isra.0+0xde>
    de54:	9a03      	ldr	r2, [sp, #12]
    de56:	2b00      	cmp	r3, #0
    de58:	d000      	beq.n	de5c <_strtol_l.isra.0+0xf8>
    de5a:	1e6a      	subs	r2, r5, #1
    de5c:	9b02      	ldr	r3, [sp, #8]
    de5e:	601a      	str	r2, [r3, #0]
    de60:	e7ef      	b.n	de42 <_strtol_l.isra.0+0xde>
    de62:	2430      	movs	r4, #48	; 0x30
    de64:	2f00      	cmp	r7, #0
    de66:	d1ad      	bne.n	ddc4 <_strtol_l.isra.0+0x60>
    de68:	3708      	adds	r7, #8
    de6a:	e7ab      	b.n	ddc4 <_strtol_l.isra.0+0x60>
    de6c:	7fffffff 	.word	0x7fffffff

0000de70 <strtol>:
    de70:	b537      	push	{r0, r1, r2, r4, r5, lr}
    de72:	0013      	movs	r3, r2
    de74:	4a06      	ldr	r2, [pc, #24]	; (de90 <strtol+0x20>)
    de76:	0005      	movs	r5, r0
    de78:	6810      	ldr	r0, [r2, #0]
    de7a:	6a04      	ldr	r4, [r0, #32]
    de7c:	2c00      	cmp	r4, #0
    de7e:	d100      	bne.n	de82 <strtol+0x12>
    de80:	4c04      	ldr	r4, [pc, #16]	; (de94 <strtol+0x24>)
    de82:	000a      	movs	r2, r1
    de84:	9400      	str	r4, [sp, #0]
    de86:	0029      	movs	r1, r5
    de88:	f7ff ff6c 	bl	dd64 <_strtol_l.isra.0>
    de8c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    de8e:	46c0      	nop			; (mov r8, r8)
    de90:	20000070 	.word	0x20000070
    de94:	200000d4 	.word	0x200000d4

0000de98 <__locale_ctype_ptr_l>:
    de98:	30ec      	adds	r0, #236	; 0xec
    de9a:	6800      	ldr	r0, [r0, #0]
    de9c:	4770      	bx	lr

0000de9e <__ascii_mbtowc>:
    de9e:	b082      	sub	sp, #8
    dea0:	2900      	cmp	r1, #0
    dea2:	d100      	bne.n	dea6 <__ascii_mbtowc+0x8>
    dea4:	a901      	add	r1, sp, #4
    dea6:	1e10      	subs	r0, r2, #0
    dea8:	d006      	beq.n	deb8 <__ascii_mbtowc+0x1a>
    deaa:	2b00      	cmp	r3, #0
    deac:	d006      	beq.n	debc <__ascii_mbtowc+0x1e>
    deae:	7813      	ldrb	r3, [r2, #0]
    deb0:	600b      	str	r3, [r1, #0]
    deb2:	7810      	ldrb	r0, [r2, #0]
    deb4:	1e43      	subs	r3, r0, #1
    deb6:	4198      	sbcs	r0, r3
    deb8:	b002      	add	sp, #8
    deba:	4770      	bx	lr
    debc:	2002      	movs	r0, #2
    debe:	4240      	negs	r0, r0
    dec0:	e7fa      	b.n	deb8 <__ascii_mbtowc+0x1a>

0000dec2 <__malloc_lock>:
    dec2:	4770      	bx	lr

0000dec4 <__malloc_unlock>:
    dec4:	4770      	bx	lr
	...

0000dec8 <__ssputs_r>:
    dec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    deca:	688e      	ldr	r6, [r1, #8]
    decc:	b085      	sub	sp, #20
    dece:	0007      	movs	r7, r0
    ded0:	000c      	movs	r4, r1
    ded2:	9203      	str	r2, [sp, #12]
    ded4:	9301      	str	r3, [sp, #4]
    ded6:	429e      	cmp	r6, r3
    ded8:	d839      	bhi.n	df4e <__ssputs_r+0x86>
    deda:	2390      	movs	r3, #144	; 0x90
    dedc:	898a      	ldrh	r2, [r1, #12]
    dede:	00db      	lsls	r3, r3, #3
    dee0:	421a      	tst	r2, r3
    dee2:	d034      	beq.n	df4e <__ssputs_r+0x86>
    dee4:	2503      	movs	r5, #3
    dee6:	6909      	ldr	r1, [r1, #16]
    dee8:	6823      	ldr	r3, [r4, #0]
    deea:	1a5b      	subs	r3, r3, r1
    deec:	9302      	str	r3, [sp, #8]
    deee:	6963      	ldr	r3, [r4, #20]
    def0:	9802      	ldr	r0, [sp, #8]
    def2:	435d      	muls	r5, r3
    def4:	0feb      	lsrs	r3, r5, #31
    def6:	195d      	adds	r5, r3, r5
    def8:	9b01      	ldr	r3, [sp, #4]
    defa:	106d      	asrs	r5, r5, #1
    defc:	3301      	adds	r3, #1
    defe:	181b      	adds	r3, r3, r0
    df00:	42ab      	cmp	r3, r5
    df02:	d900      	bls.n	df06 <__ssputs_r+0x3e>
    df04:	001d      	movs	r5, r3
    df06:	0553      	lsls	r3, r2, #21
    df08:	d532      	bpl.n	df70 <__ssputs_r+0xa8>
    df0a:	0029      	movs	r1, r5
    df0c:	0038      	movs	r0, r7
    df0e:	f7ff fe77 	bl	dc00 <_malloc_r>
    df12:	1e06      	subs	r6, r0, #0
    df14:	d109      	bne.n	df2a <__ssputs_r+0x62>
    df16:	230c      	movs	r3, #12
    df18:	603b      	str	r3, [r7, #0]
    df1a:	2340      	movs	r3, #64	; 0x40
    df1c:	2001      	movs	r0, #1
    df1e:	89a2      	ldrh	r2, [r4, #12]
    df20:	4240      	negs	r0, r0
    df22:	4313      	orrs	r3, r2
    df24:	81a3      	strh	r3, [r4, #12]
    df26:	b005      	add	sp, #20
    df28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df2a:	9a02      	ldr	r2, [sp, #8]
    df2c:	6921      	ldr	r1, [r4, #16]
    df2e:	f7ff fdf9 	bl	db24 <memcpy>
    df32:	89a3      	ldrh	r3, [r4, #12]
    df34:	4a14      	ldr	r2, [pc, #80]	; (df88 <__ssputs_r+0xc0>)
    df36:	401a      	ands	r2, r3
    df38:	2380      	movs	r3, #128	; 0x80
    df3a:	4313      	orrs	r3, r2
    df3c:	81a3      	strh	r3, [r4, #12]
    df3e:	9b02      	ldr	r3, [sp, #8]
    df40:	6126      	str	r6, [r4, #16]
    df42:	18f6      	adds	r6, r6, r3
    df44:	6026      	str	r6, [r4, #0]
    df46:	6165      	str	r5, [r4, #20]
    df48:	9e01      	ldr	r6, [sp, #4]
    df4a:	1aed      	subs	r5, r5, r3
    df4c:	60a5      	str	r5, [r4, #8]
    df4e:	9b01      	ldr	r3, [sp, #4]
    df50:	42b3      	cmp	r3, r6
    df52:	d200      	bcs.n	df56 <__ssputs_r+0x8e>
    df54:	001e      	movs	r6, r3
    df56:	0032      	movs	r2, r6
    df58:	9903      	ldr	r1, [sp, #12]
    df5a:	6820      	ldr	r0, [r4, #0]
    df5c:	f7ff fdeb 	bl	db36 <memmove>
    df60:	68a3      	ldr	r3, [r4, #8]
    df62:	2000      	movs	r0, #0
    df64:	1b9b      	subs	r3, r3, r6
    df66:	60a3      	str	r3, [r4, #8]
    df68:	6823      	ldr	r3, [r4, #0]
    df6a:	199e      	adds	r6, r3, r6
    df6c:	6026      	str	r6, [r4, #0]
    df6e:	e7da      	b.n	df26 <__ssputs_r+0x5e>
    df70:	002a      	movs	r2, r5
    df72:	0038      	movs	r0, r7
    df74:	f000 faad 	bl	e4d2 <_realloc_r>
    df78:	1e06      	subs	r6, r0, #0
    df7a:	d1e0      	bne.n	df3e <__ssputs_r+0x76>
    df7c:	6921      	ldr	r1, [r4, #16]
    df7e:	0038      	movs	r0, r7
    df80:	f7ff fdf4 	bl	db6c <_free_r>
    df84:	e7c7      	b.n	df16 <__ssputs_r+0x4e>
    df86:	46c0      	nop			; (mov r8, r8)
    df88:	fffffb7f 	.word	0xfffffb7f

0000df8c <_svfiprintf_r>:
    df8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    df8e:	b09f      	sub	sp, #124	; 0x7c
    df90:	9002      	str	r0, [sp, #8]
    df92:	9305      	str	r3, [sp, #20]
    df94:	898b      	ldrh	r3, [r1, #12]
    df96:	000f      	movs	r7, r1
    df98:	0016      	movs	r6, r2
    df9a:	061b      	lsls	r3, r3, #24
    df9c:	d511      	bpl.n	dfc2 <_svfiprintf_r+0x36>
    df9e:	690b      	ldr	r3, [r1, #16]
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	d10e      	bne.n	dfc2 <_svfiprintf_r+0x36>
    dfa4:	2140      	movs	r1, #64	; 0x40
    dfa6:	f7ff fe2b 	bl	dc00 <_malloc_r>
    dfaa:	6038      	str	r0, [r7, #0]
    dfac:	6138      	str	r0, [r7, #16]
    dfae:	2800      	cmp	r0, #0
    dfb0:	d105      	bne.n	dfbe <_svfiprintf_r+0x32>
    dfb2:	230c      	movs	r3, #12
    dfb4:	9a02      	ldr	r2, [sp, #8]
    dfb6:	3801      	subs	r0, #1
    dfb8:	6013      	str	r3, [r2, #0]
    dfba:	b01f      	add	sp, #124	; 0x7c
    dfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dfbe:	2340      	movs	r3, #64	; 0x40
    dfc0:	617b      	str	r3, [r7, #20]
    dfc2:	2300      	movs	r3, #0
    dfc4:	ad06      	add	r5, sp, #24
    dfc6:	616b      	str	r3, [r5, #20]
    dfc8:	3320      	adds	r3, #32
    dfca:	766b      	strb	r3, [r5, #25]
    dfcc:	3310      	adds	r3, #16
    dfce:	76ab      	strb	r3, [r5, #26]
    dfd0:	0034      	movs	r4, r6
    dfd2:	7823      	ldrb	r3, [r4, #0]
    dfd4:	2b00      	cmp	r3, #0
    dfd6:	d147      	bne.n	e068 <_svfiprintf_r+0xdc>
    dfd8:	1ba3      	subs	r3, r4, r6
    dfda:	9304      	str	r3, [sp, #16]
    dfdc:	d00d      	beq.n	dffa <_svfiprintf_r+0x6e>
    dfde:	1ba3      	subs	r3, r4, r6
    dfe0:	0032      	movs	r2, r6
    dfe2:	0039      	movs	r1, r7
    dfe4:	9802      	ldr	r0, [sp, #8]
    dfe6:	f7ff ff6f 	bl	dec8 <__ssputs_r>
    dfea:	1c43      	adds	r3, r0, #1
    dfec:	d100      	bne.n	dff0 <_svfiprintf_r+0x64>
    dfee:	e0b5      	b.n	e15c <_svfiprintf_r+0x1d0>
    dff0:	696a      	ldr	r2, [r5, #20]
    dff2:	9b04      	ldr	r3, [sp, #16]
    dff4:	4694      	mov	ip, r2
    dff6:	4463      	add	r3, ip
    dff8:	616b      	str	r3, [r5, #20]
    dffa:	7823      	ldrb	r3, [r4, #0]
    dffc:	2b00      	cmp	r3, #0
    dffe:	d100      	bne.n	e002 <_svfiprintf_r+0x76>
    e000:	e0ac      	b.n	e15c <_svfiprintf_r+0x1d0>
    e002:	2201      	movs	r2, #1
    e004:	2300      	movs	r3, #0
    e006:	4252      	negs	r2, r2
    e008:	606a      	str	r2, [r5, #4]
    e00a:	a902      	add	r1, sp, #8
    e00c:	3254      	adds	r2, #84	; 0x54
    e00e:	1852      	adds	r2, r2, r1
    e010:	3401      	adds	r4, #1
    e012:	602b      	str	r3, [r5, #0]
    e014:	60eb      	str	r3, [r5, #12]
    e016:	60ab      	str	r3, [r5, #8]
    e018:	7013      	strb	r3, [r2, #0]
    e01a:	65ab      	str	r3, [r5, #88]	; 0x58
    e01c:	4e58      	ldr	r6, [pc, #352]	; (e180 <_svfiprintf_r+0x1f4>)
    e01e:	2205      	movs	r2, #5
    e020:	7821      	ldrb	r1, [r4, #0]
    e022:	0030      	movs	r0, r6
    e024:	f000 fa4a 	bl	e4bc <memchr>
    e028:	1c62      	adds	r2, r4, #1
    e02a:	2800      	cmp	r0, #0
    e02c:	d120      	bne.n	e070 <_svfiprintf_r+0xe4>
    e02e:	6829      	ldr	r1, [r5, #0]
    e030:	06cb      	lsls	r3, r1, #27
    e032:	d504      	bpl.n	e03e <_svfiprintf_r+0xb2>
    e034:	2353      	movs	r3, #83	; 0x53
    e036:	ae02      	add	r6, sp, #8
    e038:	3020      	adds	r0, #32
    e03a:	199b      	adds	r3, r3, r6
    e03c:	7018      	strb	r0, [r3, #0]
    e03e:	070b      	lsls	r3, r1, #28
    e040:	d504      	bpl.n	e04c <_svfiprintf_r+0xc0>
    e042:	2353      	movs	r3, #83	; 0x53
    e044:	202b      	movs	r0, #43	; 0x2b
    e046:	ae02      	add	r6, sp, #8
    e048:	199b      	adds	r3, r3, r6
    e04a:	7018      	strb	r0, [r3, #0]
    e04c:	7823      	ldrb	r3, [r4, #0]
    e04e:	2b2a      	cmp	r3, #42	; 0x2a
    e050:	d016      	beq.n	e080 <_svfiprintf_r+0xf4>
    e052:	2000      	movs	r0, #0
    e054:	210a      	movs	r1, #10
    e056:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e058:	7822      	ldrb	r2, [r4, #0]
    e05a:	3a30      	subs	r2, #48	; 0x30
    e05c:	2a09      	cmp	r2, #9
    e05e:	d955      	bls.n	e10c <_svfiprintf_r+0x180>
    e060:	2800      	cmp	r0, #0
    e062:	d015      	beq.n	e090 <_svfiprintf_r+0x104>
    e064:	9309      	str	r3, [sp, #36]	; 0x24
    e066:	e013      	b.n	e090 <_svfiprintf_r+0x104>
    e068:	2b25      	cmp	r3, #37	; 0x25
    e06a:	d0b5      	beq.n	dfd8 <_svfiprintf_r+0x4c>
    e06c:	3401      	adds	r4, #1
    e06e:	e7b0      	b.n	dfd2 <_svfiprintf_r+0x46>
    e070:	2301      	movs	r3, #1
    e072:	1b80      	subs	r0, r0, r6
    e074:	4083      	lsls	r3, r0
    e076:	6829      	ldr	r1, [r5, #0]
    e078:	0014      	movs	r4, r2
    e07a:	430b      	orrs	r3, r1
    e07c:	602b      	str	r3, [r5, #0]
    e07e:	e7cd      	b.n	e01c <_svfiprintf_r+0x90>
    e080:	9b05      	ldr	r3, [sp, #20]
    e082:	1d18      	adds	r0, r3, #4
    e084:	681b      	ldr	r3, [r3, #0]
    e086:	9005      	str	r0, [sp, #20]
    e088:	2b00      	cmp	r3, #0
    e08a:	db39      	blt.n	e100 <_svfiprintf_r+0x174>
    e08c:	9309      	str	r3, [sp, #36]	; 0x24
    e08e:	0014      	movs	r4, r2
    e090:	7823      	ldrb	r3, [r4, #0]
    e092:	2b2e      	cmp	r3, #46	; 0x2e
    e094:	d10b      	bne.n	e0ae <_svfiprintf_r+0x122>
    e096:	7863      	ldrb	r3, [r4, #1]
    e098:	1c62      	adds	r2, r4, #1
    e09a:	2b2a      	cmp	r3, #42	; 0x2a
    e09c:	d13e      	bne.n	e11c <_svfiprintf_r+0x190>
    e09e:	9b05      	ldr	r3, [sp, #20]
    e0a0:	3402      	adds	r4, #2
    e0a2:	1d1a      	adds	r2, r3, #4
    e0a4:	681b      	ldr	r3, [r3, #0]
    e0a6:	9205      	str	r2, [sp, #20]
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	db34      	blt.n	e116 <_svfiprintf_r+0x18a>
    e0ac:	9307      	str	r3, [sp, #28]
    e0ae:	4e35      	ldr	r6, [pc, #212]	; (e184 <_svfiprintf_r+0x1f8>)
    e0b0:	7821      	ldrb	r1, [r4, #0]
    e0b2:	2203      	movs	r2, #3
    e0b4:	0030      	movs	r0, r6
    e0b6:	f000 fa01 	bl	e4bc <memchr>
    e0ba:	2800      	cmp	r0, #0
    e0bc:	d006      	beq.n	e0cc <_svfiprintf_r+0x140>
    e0be:	2340      	movs	r3, #64	; 0x40
    e0c0:	1b80      	subs	r0, r0, r6
    e0c2:	4083      	lsls	r3, r0
    e0c4:	682a      	ldr	r2, [r5, #0]
    e0c6:	3401      	adds	r4, #1
    e0c8:	4313      	orrs	r3, r2
    e0ca:	602b      	str	r3, [r5, #0]
    e0cc:	7821      	ldrb	r1, [r4, #0]
    e0ce:	2206      	movs	r2, #6
    e0d0:	482d      	ldr	r0, [pc, #180]	; (e188 <_svfiprintf_r+0x1fc>)
    e0d2:	1c66      	adds	r6, r4, #1
    e0d4:	7629      	strb	r1, [r5, #24]
    e0d6:	f000 f9f1 	bl	e4bc <memchr>
    e0da:	2800      	cmp	r0, #0
    e0dc:	d046      	beq.n	e16c <_svfiprintf_r+0x1e0>
    e0de:	4b2b      	ldr	r3, [pc, #172]	; (e18c <_svfiprintf_r+0x200>)
    e0e0:	2b00      	cmp	r3, #0
    e0e2:	d12f      	bne.n	e144 <_svfiprintf_r+0x1b8>
    e0e4:	6829      	ldr	r1, [r5, #0]
    e0e6:	9b05      	ldr	r3, [sp, #20]
    e0e8:	2207      	movs	r2, #7
    e0ea:	05c9      	lsls	r1, r1, #23
    e0ec:	d528      	bpl.n	e140 <_svfiprintf_r+0x1b4>
    e0ee:	189b      	adds	r3, r3, r2
    e0f0:	4393      	bics	r3, r2
    e0f2:	3308      	adds	r3, #8
    e0f4:	9305      	str	r3, [sp, #20]
    e0f6:	696b      	ldr	r3, [r5, #20]
    e0f8:	9a03      	ldr	r2, [sp, #12]
    e0fa:	189b      	adds	r3, r3, r2
    e0fc:	616b      	str	r3, [r5, #20]
    e0fe:	e767      	b.n	dfd0 <_svfiprintf_r+0x44>
    e100:	425b      	negs	r3, r3
    e102:	60eb      	str	r3, [r5, #12]
    e104:	2302      	movs	r3, #2
    e106:	430b      	orrs	r3, r1
    e108:	602b      	str	r3, [r5, #0]
    e10a:	e7c0      	b.n	e08e <_svfiprintf_r+0x102>
    e10c:	434b      	muls	r3, r1
    e10e:	3401      	adds	r4, #1
    e110:	189b      	adds	r3, r3, r2
    e112:	2001      	movs	r0, #1
    e114:	e7a0      	b.n	e058 <_svfiprintf_r+0xcc>
    e116:	2301      	movs	r3, #1
    e118:	425b      	negs	r3, r3
    e11a:	e7c7      	b.n	e0ac <_svfiprintf_r+0x120>
    e11c:	2300      	movs	r3, #0
    e11e:	0014      	movs	r4, r2
    e120:	200a      	movs	r0, #10
    e122:	001a      	movs	r2, r3
    e124:	606b      	str	r3, [r5, #4]
    e126:	7821      	ldrb	r1, [r4, #0]
    e128:	3930      	subs	r1, #48	; 0x30
    e12a:	2909      	cmp	r1, #9
    e12c:	d903      	bls.n	e136 <_svfiprintf_r+0x1aa>
    e12e:	2b00      	cmp	r3, #0
    e130:	d0bd      	beq.n	e0ae <_svfiprintf_r+0x122>
    e132:	9207      	str	r2, [sp, #28]
    e134:	e7bb      	b.n	e0ae <_svfiprintf_r+0x122>
    e136:	4342      	muls	r2, r0
    e138:	3401      	adds	r4, #1
    e13a:	1852      	adds	r2, r2, r1
    e13c:	2301      	movs	r3, #1
    e13e:	e7f2      	b.n	e126 <_svfiprintf_r+0x19a>
    e140:	3307      	adds	r3, #7
    e142:	e7d5      	b.n	e0f0 <_svfiprintf_r+0x164>
    e144:	ab05      	add	r3, sp, #20
    e146:	9300      	str	r3, [sp, #0]
    e148:	003a      	movs	r2, r7
    e14a:	4b11      	ldr	r3, [pc, #68]	; (e190 <_svfiprintf_r+0x204>)
    e14c:	0029      	movs	r1, r5
    e14e:	9802      	ldr	r0, [sp, #8]
    e150:	e000      	b.n	e154 <_svfiprintf_r+0x1c8>
    e152:	bf00      	nop
    e154:	9003      	str	r0, [sp, #12]
    e156:	9b03      	ldr	r3, [sp, #12]
    e158:	3301      	adds	r3, #1
    e15a:	d1cc      	bne.n	e0f6 <_svfiprintf_r+0x16a>
    e15c:	89bb      	ldrh	r3, [r7, #12]
    e15e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e160:	065b      	lsls	r3, r3, #25
    e162:	d400      	bmi.n	e166 <_svfiprintf_r+0x1da>
    e164:	e729      	b.n	dfba <_svfiprintf_r+0x2e>
    e166:	2001      	movs	r0, #1
    e168:	4240      	negs	r0, r0
    e16a:	e726      	b.n	dfba <_svfiprintf_r+0x2e>
    e16c:	ab05      	add	r3, sp, #20
    e16e:	9300      	str	r3, [sp, #0]
    e170:	003a      	movs	r2, r7
    e172:	4b07      	ldr	r3, [pc, #28]	; (e190 <_svfiprintf_r+0x204>)
    e174:	0029      	movs	r1, r5
    e176:	9802      	ldr	r0, [sp, #8]
    e178:	f000 f87a 	bl	e270 <_printf_i>
    e17c:	e7ea      	b.n	e154 <_svfiprintf_r+0x1c8>
    e17e:	46c0      	nop			; (mov r8, r8)
    e180:	0000ecfa 	.word	0x0000ecfa
    e184:	0000ed00 	.word	0x0000ed00
    e188:	0000ed04 	.word	0x0000ed04
    e18c:	00000000 	.word	0x00000000
    e190:	0000dec9 	.word	0x0000dec9

0000e194 <_printf_common>:
    e194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e196:	0015      	movs	r5, r2
    e198:	9301      	str	r3, [sp, #4]
    e19a:	688a      	ldr	r2, [r1, #8]
    e19c:	690b      	ldr	r3, [r1, #16]
    e19e:	9000      	str	r0, [sp, #0]
    e1a0:	000c      	movs	r4, r1
    e1a2:	4293      	cmp	r3, r2
    e1a4:	da00      	bge.n	e1a8 <_printf_common+0x14>
    e1a6:	0013      	movs	r3, r2
    e1a8:	0022      	movs	r2, r4
    e1aa:	602b      	str	r3, [r5, #0]
    e1ac:	3243      	adds	r2, #67	; 0x43
    e1ae:	7812      	ldrb	r2, [r2, #0]
    e1b0:	2a00      	cmp	r2, #0
    e1b2:	d001      	beq.n	e1b8 <_printf_common+0x24>
    e1b4:	3301      	adds	r3, #1
    e1b6:	602b      	str	r3, [r5, #0]
    e1b8:	6823      	ldr	r3, [r4, #0]
    e1ba:	069b      	lsls	r3, r3, #26
    e1bc:	d502      	bpl.n	e1c4 <_printf_common+0x30>
    e1be:	682b      	ldr	r3, [r5, #0]
    e1c0:	3302      	adds	r3, #2
    e1c2:	602b      	str	r3, [r5, #0]
    e1c4:	2706      	movs	r7, #6
    e1c6:	6823      	ldr	r3, [r4, #0]
    e1c8:	401f      	ands	r7, r3
    e1ca:	d027      	beq.n	e21c <_printf_common+0x88>
    e1cc:	0023      	movs	r3, r4
    e1ce:	3343      	adds	r3, #67	; 0x43
    e1d0:	781b      	ldrb	r3, [r3, #0]
    e1d2:	1e5a      	subs	r2, r3, #1
    e1d4:	4193      	sbcs	r3, r2
    e1d6:	6822      	ldr	r2, [r4, #0]
    e1d8:	0692      	lsls	r2, r2, #26
    e1da:	d430      	bmi.n	e23e <_printf_common+0xaa>
    e1dc:	0022      	movs	r2, r4
    e1de:	9901      	ldr	r1, [sp, #4]
    e1e0:	3243      	adds	r2, #67	; 0x43
    e1e2:	9800      	ldr	r0, [sp, #0]
    e1e4:	9e08      	ldr	r6, [sp, #32]
    e1e6:	47b0      	blx	r6
    e1e8:	1c43      	adds	r3, r0, #1
    e1ea:	d025      	beq.n	e238 <_printf_common+0xa4>
    e1ec:	2306      	movs	r3, #6
    e1ee:	6820      	ldr	r0, [r4, #0]
    e1f0:	682a      	ldr	r2, [r5, #0]
    e1f2:	68e1      	ldr	r1, [r4, #12]
    e1f4:	4003      	ands	r3, r0
    e1f6:	2500      	movs	r5, #0
    e1f8:	2b04      	cmp	r3, #4
    e1fa:	d103      	bne.n	e204 <_printf_common+0x70>
    e1fc:	1a8d      	subs	r5, r1, r2
    e1fe:	43eb      	mvns	r3, r5
    e200:	17db      	asrs	r3, r3, #31
    e202:	401d      	ands	r5, r3
    e204:	68a3      	ldr	r3, [r4, #8]
    e206:	6922      	ldr	r2, [r4, #16]
    e208:	4293      	cmp	r3, r2
    e20a:	dd01      	ble.n	e210 <_printf_common+0x7c>
    e20c:	1a9b      	subs	r3, r3, r2
    e20e:	18ed      	adds	r5, r5, r3
    e210:	2700      	movs	r7, #0
    e212:	42bd      	cmp	r5, r7
    e214:	d120      	bne.n	e258 <_printf_common+0xc4>
    e216:	2000      	movs	r0, #0
    e218:	e010      	b.n	e23c <_printf_common+0xa8>
    e21a:	3701      	adds	r7, #1
    e21c:	68e3      	ldr	r3, [r4, #12]
    e21e:	682a      	ldr	r2, [r5, #0]
    e220:	1a9b      	subs	r3, r3, r2
    e222:	429f      	cmp	r7, r3
    e224:	dad2      	bge.n	e1cc <_printf_common+0x38>
    e226:	0022      	movs	r2, r4
    e228:	2301      	movs	r3, #1
    e22a:	3219      	adds	r2, #25
    e22c:	9901      	ldr	r1, [sp, #4]
    e22e:	9800      	ldr	r0, [sp, #0]
    e230:	9e08      	ldr	r6, [sp, #32]
    e232:	47b0      	blx	r6
    e234:	1c43      	adds	r3, r0, #1
    e236:	d1f0      	bne.n	e21a <_printf_common+0x86>
    e238:	2001      	movs	r0, #1
    e23a:	4240      	negs	r0, r0
    e23c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e23e:	2030      	movs	r0, #48	; 0x30
    e240:	18e1      	adds	r1, r4, r3
    e242:	3143      	adds	r1, #67	; 0x43
    e244:	7008      	strb	r0, [r1, #0]
    e246:	0021      	movs	r1, r4
    e248:	1c5a      	adds	r2, r3, #1
    e24a:	3145      	adds	r1, #69	; 0x45
    e24c:	7809      	ldrb	r1, [r1, #0]
    e24e:	18a2      	adds	r2, r4, r2
    e250:	3243      	adds	r2, #67	; 0x43
    e252:	3302      	adds	r3, #2
    e254:	7011      	strb	r1, [r2, #0]
    e256:	e7c1      	b.n	e1dc <_printf_common+0x48>
    e258:	0022      	movs	r2, r4
    e25a:	2301      	movs	r3, #1
    e25c:	321a      	adds	r2, #26
    e25e:	9901      	ldr	r1, [sp, #4]
    e260:	9800      	ldr	r0, [sp, #0]
    e262:	9e08      	ldr	r6, [sp, #32]
    e264:	47b0      	blx	r6
    e266:	1c43      	adds	r3, r0, #1
    e268:	d0e6      	beq.n	e238 <_printf_common+0xa4>
    e26a:	3701      	adds	r7, #1
    e26c:	e7d1      	b.n	e212 <_printf_common+0x7e>
	...

0000e270 <_printf_i>:
    e270:	b5f0      	push	{r4, r5, r6, r7, lr}
    e272:	b08b      	sub	sp, #44	; 0x2c
    e274:	9206      	str	r2, [sp, #24]
    e276:	000a      	movs	r2, r1
    e278:	3243      	adds	r2, #67	; 0x43
    e27a:	9307      	str	r3, [sp, #28]
    e27c:	9005      	str	r0, [sp, #20]
    e27e:	9204      	str	r2, [sp, #16]
    e280:	7e0a      	ldrb	r2, [r1, #24]
    e282:	000c      	movs	r4, r1
    e284:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e286:	2a6e      	cmp	r2, #110	; 0x6e
    e288:	d100      	bne.n	e28c <_printf_i+0x1c>
    e28a:	e08f      	b.n	e3ac <_printf_i+0x13c>
    e28c:	d817      	bhi.n	e2be <_printf_i+0x4e>
    e28e:	2a63      	cmp	r2, #99	; 0x63
    e290:	d02c      	beq.n	e2ec <_printf_i+0x7c>
    e292:	d808      	bhi.n	e2a6 <_printf_i+0x36>
    e294:	2a00      	cmp	r2, #0
    e296:	d100      	bne.n	e29a <_printf_i+0x2a>
    e298:	e099      	b.n	e3ce <_printf_i+0x15e>
    e29a:	2a58      	cmp	r2, #88	; 0x58
    e29c:	d054      	beq.n	e348 <_printf_i+0xd8>
    e29e:	0026      	movs	r6, r4
    e2a0:	3642      	adds	r6, #66	; 0x42
    e2a2:	7032      	strb	r2, [r6, #0]
    e2a4:	e029      	b.n	e2fa <_printf_i+0x8a>
    e2a6:	2a64      	cmp	r2, #100	; 0x64
    e2a8:	d001      	beq.n	e2ae <_printf_i+0x3e>
    e2aa:	2a69      	cmp	r2, #105	; 0x69
    e2ac:	d1f7      	bne.n	e29e <_printf_i+0x2e>
    e2ae:	6821      	ldr	r1, [r4, #0]
    e2b0:	681a      	ldr	r2, [r3, #0]
    e2b2:	0608      	lsls	r0, r1, #24
    e2b4:	d523      	bpl.n	e2fe <_printf_i+0x8e>
    e2b6:	1d11      	adds	r1, r2, #4
    e2b8:	6019      	str	r1, [r3, #0]
    e2ba:	6815      	ldr	r5, [r2, #0]
    e2bc:	e025      	b.n	e30a <_printf_i+0x9a>
    e2be:	2a73      	cmp	r2, #115	; 0x73
    e2c0:	d100      	bne.n	e2c4 <_printf_i+0x54>
    e2c2:	e088      	b.n	e3d6 <_printf_i+0x166>
    e2c4:	d808      	bhi.n	e2d8 <_printf_i+0x68>
    e2c6:	2a6f      	cmp	r2, #111	; 0x6f
    e2c8:	d029      	beq.n	e31e <_printf_i+0xae>
    e2ca:	2a70      	cmp	r2, #112	; 0x70
    e2cc:	d1e7      	bne.n	e29e <_printf_i+0x2e>
    e2ce:	2220      	movs	r2, #32
    e2d0:	6809      	ldr	r1, [r1, #0]
    e2d2:	430a      	orrs	r2, r1
    e2d4:	6022      	str	r2, [r4, #0]
    e2d6:	e003      	b.n	e2e0 <_printf_i+0x70>
    e2d8:	2a75      	cmp	r2, #117	; 0x75
    e2da:	d020      	beq.n	e31e <_printf_i+0xae>
    e2dc:	2a78      	cmp	r2, #120	; 0x78
    e2de:	d1de      	bne.n	e29e <_printf_i+0x2e>
    e2e0:	0022      	movs	r2, r4
    e2e2:	2178      	movs	r1, #120	; 0x78
    e2e4:	3245      	adds	r2, #69	; 0x45
    e2e6:	7011      	strb	r1, [r2, #0]
    e2e8:	4a6c      	ldr	r2, [pc, #432]	; (e49c <_printf_i+0x22c>)
    e2ea:	e030      	b.n	e34e <_printf_i+0xde>
    e2ec:	000e      	movs	r6, r1
    e2ee:	681a      	ldr	r2, [r3, #0]
    e2f0:	3642      	adds	r6, #66	; 0x42
    e2f2:	1d11      	adds	r1, r2, #4
    e2f4:	6019      	str	r1, [r3, #0]
    e2f6:	6813      	ldr	r3, [r2, #0]
    e2f8:	7033      	strb	r3, [r6, #0]
    e2fa:	2301      	movs	r3, #1
    e2fc:	e079      	b.n	e3f2 <_printf_i+0x182>
    e2fe:	0649      	lsls	r1, r1, #25
    e300:	d5d9      	bpl.n	e2b6 <_printf_i+0x46>
    e302:	1d11      	adds	r1, r2, #4
    e304:	6019      	str	r1, [r3, #0]
    e306:	2300      	movs	r3, #0
    e308:	5ed5      	ldrsh	r5, [r2, r3]
    e30a:	2d00      	cmp	r5, #0
    e30c:	da03      	bge.n	e316 <_printf_i+0xa6>
    e30e:	232d      	movs	r3, #45	; 0x2d
    e310:	9a04      	ldr	r2, [sp, #16]
    e312:	426d      	negs	r5, r5
    e314:	7013      	strb	r3, [r2, #0]
    e316:	4b62      	ldr	r3, [pc, #392]	; (e4a0 <_printf_i+0x230>)
    e318:	270a      	movs	r7, #10
    e31a:	9303      	str	r3, [sp, #12]
    e31c:	e02f      	b.n	e37e <_printf_i+0x10e>
    e31e:	6820      	ldr	r0, [r4, #0]
    e320:	6819      	ldr	r1, [r3, #0]
    e322:	0605      	lsls	r5, r0, #24
    e324:	d503      	bpl.n	e32e <_printf_i+0xbe>
    e326:	1d08      	adds	r0, r1, #4
    e328:	6018      	str	r0, [r3, #0]
    e32a:	680d      	ldr	r5, [r1, #0]
    e32c:	e005      	b.n	e33a <_printf_i+0xca>
    e32e:	0640      	lsls	r0, r0, #25
    e330:	d5f9      	bpl.n	e326 <_printf_i+0xb6>
    e332:	680d      	ldr	r5, [r1, #0]
    e334:	1d08      	adds	r0, r1, #4
    e336:	6018      	str	r0, [r3, #0]
    e338:	b2ad      	uxth	r5, r5
    e33a:	4b59      	ldr	r3, [pc, #356]	; (e4a0 <_printf_i+0x230>)
    e33c:	2708      	movs	r7, #8
    e33e:	9303      	str	r3, [sp, #12]
    e340:	2a6f      	cmp	r2, #111	; 0x6f
    e342:	d018      	beq.n	e376 <_printf_i+0x106>
    e344:	270a      	movs	r7, #10
    e346:	e016      	b.n	e376 <_printf_i+0x106>
    e348:	3145      	adds	r1, #69	; 0x45
    e34a:	700a      	strb	r2, [r1, #0]
    e34c:	4a54      	ldr	r2, [pc, #336]	; (e4a0 <_printf_i+0x230>)
    e34e:	9203      	str	r2, [sp, #12]
    e350:	681a      	ldr	r2, [r3, #0]
    e352:	6821      	ldr	r1, [r4, #0]
    e354:	1d10      	adds	r0, r2, #4
    e356:	6018      	str	r0, [r3, #0]
    e358:	6815      	ldr	r5, [r2, #0]
    e35a:	0608      	lsls	r0, r1, #24
    e35c:	d522      	bpl.n	e3a4 <_printf_i+0x134>
    e35e:	07cb      	lsls	r3, r1, #31
    e360:	d502      	bpl.n	e368 <_printf_i+0xf8>
    e362:	2320      	movs	r3, #32
    e364:	4319      	orrs	r1, r3
    e366:	6021      	str	r1, [r4, #0]
    e368:	2710      	movs	r7, #16
    e36a:	2d00      	cmp	r5, #0
    e36c:	d103      	bne.n	e376 <_printf_i+0x106>
    e36e:	2320      	movs	r3, #32
    e370:	6822      	ldr	r2, [r4, #0]
    e372:	439a      	bics	r2, r3
    e374:	6022      	str	r2, [r4, #0]
    e376:	0023      	movs	r3, r4
    e378:	2200      	movs	r2, #0
    e37a:	3343      	adds	r3, #67	; 0x43
    e37c:	701a      	strb	r2, [r3, #0]
    e37e:	6863      	ldr	r3, [r4, #4]
    e380:	60a3      	str	r3, [r4, #8]
    e382:	2b00      	cmp	r3, #0
    e384:	db5c      	blt.n	e440 <_printf_i+0x1d0>
    e386:	2204      	movs	r2, #4
    e388:	6821      	ldr	r1, [r4, #0]
    e38a:	4391      	bics	r1, r2
    e38c:	6021      	str	r1, [r4, #0]
    e38e:	2d00      	cmp	r5, #0
    e390:	d158      	bne.n	e444 <_printf_i+0x1d4>
    e392:	9e04      	ldr	r6, [sp, #16]
    e394:	2b00      	cmp	r3, #0
    e396:	d064      	beq.n	e462 <_printf_i+0x1f2>
    e398:	0026      	movs	r6, r4
    e39a:	9b03      	ldr	r3, [sp, #12]
    e39c:	3642      	adds	r6, #66	; 0x42
    e39e:	781b      	ldrb	r3, [r3, #0]
    e3a0:	7033      	strb	r3, [r6, #0]
    e3a2:	e05e      	b.n	e462 <_printf_i+0x1f2>
    e3a4:	0648      	lsls	r0, r1, #25
    e3a6:	d5da      	bpl.n	e35e <_printf_i+0xee>
    e3a8:	b2ad      	uxth	r5, r5
    e3aa:	e7d8      	b.n	e35e <_printf_i+0xee>
    e3ac:	6809      	ldr	r1, [r1, #0]
    e3ae:	681a      	ldr	r2, [r3, #0]
    e3b0:	0608      	lsls	r0, r1, #24
    e3b2:	d505      	bpl.n	e3c0 <_printf_i+0x150>
    e3b4:	1d11      	adds	r1, r2, #4
    e3b6:	6019      	str	r1, [r3, #0]
    e3b8:	6813      	ldr	r3, [r2, #0]
    e3ba:	6962      	ldr	r2, [r4, #20]
    e3bc:	601a      	str	r2, [r3, #0]
    e3be:	e006      	b.n	e3ce <_printf_i+0x15e>
    e3c0:	0649      	lsls	r1, r1, #25
    e3c2:	d5f7      	bpl.n	e3b4 <_printf_i+0x144>
    e3c4:	1d11      	adds	r1, r2, #4
    e3c6:	6019      	str	r1, [r3, #0]
    e3c8:	6813      	ldr	r3, [r2, #0]
    e3ca:	8aa2      	ldrh	r2, [r4, #20]
    e3cc:	801a      	strh	r2, [r3, #0]
    e3ce:	2300      	movs	r3, #0
    e3d0:	9e04      	ldr	r6, [sp, #16]
    e3d2:	6123      	str	r3, [r4, #16]
    e3d4:	e054      	b.n	e480 <_printf_i+0x210>
    e3d6:	681a      	ldr	r2, [r3, #0]
    e3d8:	1d11      	adds	r1, r2, #4
    e3da:	6019      	str	r1, [r3, #0]
    e3dc:	6816      	ldr	r6, [r2, #0]
    e3de:	2100      	movs	r1, #0
    e3e0:	6862      	ldr	r2, [r4, #4]
    e3e2:	0030      	movs	r0, r6
    e3e4:	f000 f86a 	bl	e4bc <memchr>
    e3e8:	2800      	cmp	r0, #0
    e3ea:	d001      	beq.n	e3f0 <_printf_i+0x180>
    e3ec:	1b80      	subs	r0, r0, r6
    e3ee:	6060      	str	r0, [r4, #4]
    e3f0:	6863      	ldr	r3, [r4, #4]
    e3f2:	6123      	str	r3, [r4, #16]
    e3f4:	2300      	movs	r3, #0
    e3f6:	9a04      	ldr	r2, [sp, #16]
    e3f8:	7013      	strb	r3, [r2, #0]
    e3fa:	e041      	b.n	e480 <_printf_i+0x210>
    e3fc:	6923      	ldr	r3, [r4, #16]
    e3fe:	0032      	movs	r2, r6
    e400:	9906      	ldr	r1, [sp, #24]
    e402:	9805      	ldr	r0, [sp, #20]
    e404:	9d07      	ldr	r5, [sp, #28]
    e406:	47a8      	blx	r5
    e408:	1c43      	adds	r3, r0, #1
    e40a:	d043      	beq.n	e494 <_printf_i+0x224>
    e40c:	6823      	ldr	r3, [r4, #0]
    e40e:	2500      	movs	r5, #0
    e410:	079b      	lsls	r3, r3, #30
    e412:	d40f      	bmi.n	e434 <_printf_i+0x1c4>
    e414:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e416:	68e0      	ldr	r0, [r4, #12]
    e418:	4298      	cmp	r0, r3
    e41a:	da3d      	bge.n	e498 <_printf_i+0x228>
    e41c:	0018      	movs	r0, r3
    e41e:	e03b      	b.n	e498 <_printf_i+0x228>
    e420:	0022      	movs	r2, r4
    e422:	2301      	movs	r3, #1
    e424:	3219      	adds	r2, #25
    e426:	9906      	ldr	r1, [sp, #24]
    e428:	9805      	ldr	r0, [sp, #20]
    e42a:	9e07      	ldr	r6, [sp, #28]
    e42c:	47b0      	blx	r6
    e42e:	1c43      	adds	r3, r0, #1
    e430:	d030      	beq.n	e494 <_printf_i+0x224>
    e432:	3501      	adds	r5, #1
    e434:	68e3      	ldr	r3, [r4, #12]
    e436:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e438:	1a9b      	subs	r3, r3, r2
    e43a:	429d      	cmp	r5, r3
    e43c:	dbf0      	blt.n	e420 <_printf_i+0x1b0>
    e43e:	e7e9      	b.n	e414 <_printf_i+0x1a4>
    e440:	2d00      	cmp	r5, #0
    e442:	d0a9      	beq.n	e398 <_printf_i+0x128>
    e444:	9e04      	ldr	r6, [sp, #16]
    e446:	0028      	movs	r0, r5
    e448:	0039      	movs	r1, r7
    e44a:	f7fe fccf 	bl	cdec <__aeabi_uidivmod>
    e44e:	9b03      	ldr	r3, [sp, #12]
    e450:	3e01      	subs	r6, #1
    e452:	5c5b      	ldrb	r3, [r3, r1]
    e454:	0028      	movs	r0, r5
    e456:	7033      	strb	r3, [r6, #0]
    e458:	0039      	movs	r1, r7
    e45a:	f7fe fc41 	bl	cce0 <__udivsi3>
    e45e:	1e05      	subs	r5, r0, #0
    e460:	d1f1      	bne.n	e446 <_printf_i+0x1d6>
    e462:	2f08      	cmp	r7, #8
    e464:	d109      	bne.n	e47a <_printf_i+0x20a>
    e466:	6823      	ldr	r3, [r4, #0]
    e468:	07db      	lsls	r3, r3, #31
    e46a:	d506      	bpl.n	e47a <_printf_i+0x20a>
    e46c:	6863      	ldr	r3, [r4, #4]
    e46e:	6922      	ldr	r2, [r4, #16]
    e470:	4293      	cmp	r3, r2
    e472:	dc02      	bgt.n	e47a <_printf_i+0x20a>
    e474:	2330      	movs	r3, #48	; 0x30
    e476:	3e01      	subs	r6, #1
    e478:	7033      	strb	r3, [r6, #0]
    e47a:	9b04      	ldr	r3, [sp, #16]
    e47c:	1b9b      	subs	r3, r3, r6
    e47e:	6123      	str	r3, [r4, #16]
    e480:	9b07      	ldr	r3, [sp, #28]
    e482:	aa09      	add	r2, sp, #36	; 0x24
    e484:	9300      	str	r3, [sp, #0]
    e486:	0021      	movs	r1, r4
    e488:	9b06      	ldr	r3, [sp, #24]
    e48a:	9805      	ldr	r0, [sp, #20]
    e48c:	f7ff fe82 	bl	e194 <_printf_common>
    e490:	1c43      	adds	r3, r0, #1
    e492:	d1b3      	bne.n	e3fc <_printf_i+0x18c>
    e494:	2001      	movs	r0, #1
    e496:	4240      	negs	r0, r0
    e498:	b00b      	add	sp, #44	; 0x2c
    e49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e49c:	0000ed1c 	.word	0x0000ed1c
    e4a0:	0000ed0b 	.word	0x0000ed0b

0000e4a4 <__ascii_wctomb>:
    e4a4:	1e0b      	subs	r3, r1, #0
    e4a6:	d004      	beq.n	e4b2 <__ascii_wctomb+0xe>
    e4a8:	2aff      	cmp	r2, #255	; 0xff
    e4aa:	d904      	bls.n	e4b6 <__ascii_wctomb+0x12>
    e4ac:	238a      	movs	r3, #138	; 0x8a
    e4ae:	6003      	str	r3, [r0, #0]
    e4b0:	3b8b      	subs	r3, #139	; 0x8b
    e4b2:	0018      	movs	r0, r3
    e4b4:	4770      	bx	lr
    e4b6:	700a      	strb	r2, [r1, #0]
    e4b8:	2301      	movs	r3, #1
    e4ba:	e7fa      	b.n	e4b2 <__ascii_wctomb+0xe>

0000e4bc <memchr>:
    e4bc:	b2c9      	uxtb	r1, r1
    e4be:	1882      	adds	r2, r0, r2
    e4c0:	4290      	cmp	r0, r2
    e4c2:	d101      	bne.n	e4c8 <memchr+0xc>
    e4c4:	2000      	movs	r0, #0
    e4c6:	4770      	bx	lr
    e4c8:	7803      	ldrb	r3, [r0, #0]
    e4ca:	428b      	cmp	r3, r1
    e4cc:	d0fb      	beq.n	e4c6 <memchr+0xa>
    e4ce:	3001      	adds	r0, #1
    e4d0:	e7f6      	b.n	e4c0 <memchr+0x4>

0000e4d2 <_realloc_r>:
    e4d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4d4:	0007      	movs	r7, r0
    e4d6:	000d      	movs	r5, r1
    e4d8:	0016      	movs	r6, r2
    e4da:	2900      	cmp	r1, #0
    e4dc:	d105      	bne.n	e4ea <_realloc_r+0x18>
    e4de:	0011      	movs	r1, r2
    e4e0:	f7ff fb8e 	bl	dc00 <_malloc_r>
    e4e4:	0004      	movs	r4, r0
    e4e6:	0020      	movs	r0, r4
    e4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4ea:	2a00      	cmp	r2, #0
    e4ec:	d103      	bne.n	e4f6 <_realloc_r+0x24>
    e4ee:	f7ff fb3d 	bl	db6c <_free_r>
    e4f2:	0034      	movs	r4, r6
    e4f4:	e7f7      	b.n	e4e6 <_realloc_r+0x14>
    e4f6:	f000 f812 	bl	e51e <_malloc_usable_size_r>
    e4fa:	002c      	movs	r4, r5
    e4fc:	4286      	cmp	r6, r0
    e4fe:	d9f2      	bls.n	e4e6 <_realloc_r+0x14>
    e500:	0031      	movs	r1, r6
    e502:	0038      	movs	r0, r7
    e504:	f7ff fb7c 	bl	dc00 <_malloc_r>
    e508:	1e04      	subs	r4, r0, #0
    e50a:	d0ec      	beq.n	e4e6 <_realloc_r+0x14>
    e50c:	0029      	movs	r1, r5
    e50e:	0032      	movs	r2, r6
    e510:	f7ff fb08 	bl	db24 <memcpy>
    e514:	0029      	movs	r1, r5
    e516:	0038      	movs	r0, r7
    e518:	f7ff fb28 	bl	db6c <_free_r>
    e51c:	e7e3      	b.n	e4e6 <_realloc_r+0x14>

0000e51e <_malloc_usable_size_r>:
    e51e:	1f0b      	subs	r3, r1, #4
    e520:	681b      	ldr	r3, [r3, #0]
    e522:	1f18      	subs	r0, r3, #4
    e524:	2b00      	cmp	r3, #0
    e526:	da01      	bge.n	e52c <_malloc_usable_size_r+0xe>
    e528:	580b      	ldr	r3, [r1, r0]
    e52a:	18c0      	adds	r0, r0, r3
    e52c:	4770      	bx	lr
    e52e:	0000      	movs	r0, r0
    e530:	0000f5f4 	.word	0x0000f5f4
    e534:	65636341 	.word	0x65636341
    e538:	6f72656c 	.word	0x6f72656c
    e53c:	6574656d 	.word	0x6574656d
    e540:	6e692072 	.word	0x6e692072
    e544:	2e2e7469 	.word	0x2e2e7469
    e548:	0000202e 	.word	0x0000202e
    e54c:	4c494146 	.word	0x4c494146
    e550:	000a0d21 	.word	0x000a0d21
    e554:	5b676572 	.word	0x5b676572
    e558:	30257830 	.word	0x30257830
    e55c:	205d7832 	.word	0x205d7832
    e560:	7830203d 	.word	0x7830203d
    e564:	78323025 	.word	0x78323025
    e568:	00000a0d 	.word	0x00000a0d
    e56c:	65636341 	.word	0x65636341
    e570:	6f72656c 	.word	0x6f72656c
    e574:	6574656d 	.word	0x6574656d
    e578:	6c732072 	.word	0x6c732072
    e57c:	2e706565 	.word	0x2e706565
    e580:	00202e2e 	.word	0x00202e2e
    e584:	00006325 	.word	0x00006325
    e588:	38364342 	.word	0x38364342
    e58c:	73657220 	.word	0x73657220
    e590:	2e2e7465 	.word	0x2e2e7465
    e594:	0000202e 	.word	0x0000202e
    e598:	492d424e 	.word	0x492d424e
    e59c:	4320546f 	.word	0x4320546f
    e5a0:	2d20444d 	.word	0x2d20444d
    e5a4:	0000203e 	.word	0x0000203e
    e5a8:	00004b4f 	.word	0x00004b4f
    e5ac:	432b5441 	.word	0x432b5441
    e5b0:	0a0d5153 	.word	0x0a0d5153
    e5b4:	00000000 	.word	0x00000000
    e5b8:	4e2b5441 	.word	0x4e2b5441
    e5bc:	52434f53 	.word	0x52434f53
    e5c0:	5247443d 	.word	0x5247443d
    e5c4:	312c4d41 	.word	0x312c4d41
    e5c8:	64252c37 	.word	0x64252c37
    e5cc:	0a0d312c 	.word	0x0a0d312c
    e5d0:	00000000 	.word	0x00000000
    e5d4:	4e2b5441 	.word	0x4e2b5441
    e5d8:	52434f53 	.word	0x52434f53
    e5dc:	5254533d 	.word	0x5254533d
    e5e0:	2c4d4145 	.word	0x2c4d4145
    e5e4:	64252c36 	.word	0x64252c36
    e5e8:	0a0d312c 	.word	0x0a0d312c
    e5ec:	00000000 	.word	0x00000000
    e5f0:	6b636f53 	.word	0x6b636f53
    e5f4:	23207465 	.word	0x23207465
    e5f8:	0a0d6325 	.word	0x0a0d6325
    e5fc:	00000000 	.word	0x00000000
    e600:	4e2b5441 	.word	0x4e2b5441
    e604:	4c434f53 	.word	0x4c434f53
    e608:	0d63253d 	.word	0x0d63253d
    e60c:	0000000a 	.word	0x0000000a
    e610:	4147432b 	.word	0x4147432b
    e614:	313a5454 	.word	0x313a5454
    e618:	00000000 	.word	0x00000000
    e61c:	432b5441 	.word	0x432b5441
    e620:	54544147 	.word	0x54544147
    e624:	000a0d3f 	.word	0x000a0d3f
    e628:	4e2b5441 	.word	0x4e2b5441
    e62c:	54534f53 	.word	0x54534f53
    e630:	2c63253d 	.word	0x2c63253d
    e634:	252c7325 	.word	0x252c7325
    e638:	64252c64 	.word	0x64252c64
    e63c:	0000002c 	.word	0x0000002c
    e640:	4e2b5441 	.word	0x4e2b5441
    e644:	4f434f53 	.word	0x4f434f53
    e648:	252c313d 	.word	0x252c313d
    e64c:	64252c73 	.word	0x64252c73
    e650:	00000a0d 	.word	0x00000a0d
    e654:	4e2b5441 	.word	0x4e2b5441
    e658:	44534f53 	.word	0x44534f53
    e65c:	252c313d 	.word	0x252c313d
    e660:	00002c64 	.word	0x00002c64
    e664:	4f534e2b 	.word	0x4f534e2b
    e668:	3a494d4e 	.word	0x3a494d4e
    e66c:	002c6325 	.word	0x002c6325
    e670:	20230a0d 	.word	0x20230a0d
    e674:	7220666f 	.word	0x7220666f
    e678:	79622078 	.word	0x79622078
    e67c:	20736574 	.word	0x20736574
    e680:	6425203d 	.word	0x6425203d
    e684:	00000a0d 	.word	0x00000a0d
    e688:	432b5441 	.word	0x432b5441
    e68c:	4e4f4353 	.word	0x4e4f4353
    e690:	0a0d303d 	.word	0x0a0d303d
    e694:	00000000 	.word	0x00000000
    e698:	432b5441 	.word	0x432b5441
    e69c:	47455245 	.word	0x47455245
    e6a0:	0a0d303d 	.word	0x0a0d303d
    e6a4:	00000000 	.word	0x00000000
    e6a8:	4e2b5441 	.word	0x4e2b5441
    e6ac:	46524f53 	.word	0x46524f53
    e6b0:	2c63253d 	.word	0x2c63253d
    e6b4:	0a0d6425 	.word	0x0a0d6425
    e6b8:	00000000 	.word	0x00000000
    e6bc:	432b5441 	.word	0x432b5441
    e6c0:	44415047 	.word	0x44415047
    e6c4:	303d5244 	.word	0x303d5244
    e6c8:	00000a0d 	.word	0x00000a0d
    e6cc:	5047432b 	.word	0x5047432b
    e6d0:	52444441 	.word	0x52444441
    e6d4:	002c303a 	.word	0x002c303a
    e6d8:	61205049 	.word	0x61205049
    e6dc:	65726464 	.word	0x65726464
    e6e0:	203a7373 	.word	0x203a7373
    e6e4:	0a0d7325 	.word	0x0a0d7325
    e6e8:	00000000 	.word	0x00000000
    e6ec:	432b5441 	.word	0x432b5441
    e6f0:	0d494d49 	.word	0x0d494d49
    e6f4:	0000000a 	.word	0x0000000a
    e6f8:	49534d49 	.word	0x49534d49
    e6fc:	7325203a 	.word	0x7325203a
    e700:	00000a0d 	.word	0x00000a0d
    e704:	0d495441 	.word	0x0d495441
    e708:	0000000a 	.word	0x0000000a
    e70c:	4e2b5441 	.word	0x4e2b5441
    e710:	464e4f43 	.word	0x464e4f43
    e714:	413d4749 	.word	0x413d4749
    e718:	434f5455 	.word	0x434f5455
    e71c:	454e4e4f 	.word	0x454e4e4f
    e720:	462c5443 	.word	0x462c5443
    e724:	45534c41 	.word	0x45534c41
    e728:	00000a0d 	.word	0x00000a0d
    e72c:	432b5441 	.word	0x432b5441
    e730:	3d4e5546 	.word	0x3d4e5546
    e734:	000a0d30 	.word	0x000a0d30
    e738:	4e2b5441 	.word	0x4e2b5441
    e73c:	444e4142 	.word	0x444e4142
    e740:	0d30323d 	.word	0x0d30323d
    e744:	0000000a 	.word	0x0000000a
    e748:	432b5441 	.word	0x432b5441
    e74c:	3d4e5546 	.word	0x3d4e5546
    e750:	000a0d31 	.word	0x000a0d31
    e754:	432b5441 	.word	0x432b5441
    e758:	3d45454d 	.word	0x3d45454d
    e75c:	000a0d31 	.word	0x000a0d31
    e760:	432b5441 	.word	0x432b5441
    e764:	47455245 	.word	0x47455245
    e768:	0a0d313d 	.word	0x0a0d313d
    e76c:	00000000 	.word	0x00000000
    e770:	432b5441 	.word	0x432b5441
    e774:	4e4f4353 	.word	0x4e4f4353
    e778:	0a0d313d 	.word	0x0a0d313d
    e77c:	00000000 	.word	0x00000000
    e780:	432b5441 	.word	0x432b5441
    e784:	4f434447 	.word	0x4f434447
    e788:	303d544e 	.word	0x303d544e
    e78c:	5049222c 	.word	0x5049222c
    e790:	69222c22 	.word	0x69222c22
    e794:	0d22746f 	.word	0x0d22746f
    e798:	0000000a 	.word	0x0000000a
    e79c:	5245432b 	.word	0x5245432b
    e7a0:	313a4745 	.word	0x313a4745
    e7a4:	00000000 	.word	0x00000000
    e7a8:	432b5441 	.word	0x432b5441
    e7ac:	3d53504f 	.word	0x3d53504f
    e7b0:	2c322c31 	.word	0x2c322c31
    e7b4:	30323222 	.word	0x30323222
    e7b8:	0d223530 	.word	0x0d223530
    e7bc:	0000000a 	.word	0x0000000a
    e7c0:	432b5441 	.word	0x432b5441
    e7c4:	58524445 	.word	0x58524445
    e7c8:	0d333d53 	.word	0x0d333d53
    e7cc:	0000000a 	.word	0x0000000a
    e7d0:	4e2b5441 	.word	0x4e2b5441
    e7d4:	524d5350 	.word	0x524d5350
    e7d8:	0a0d313d 	.word	0x0a0d313d
    e7dc:	00000000 	.word	0x00000000
    e7e0:	512b5441 	.word	0x512b5441
    e7e4:	53474552 	.word	0x53474552
    e7e8:	323d5457 	.word	0x323d5457
    e7ec:	00000a0d 	.word	0x00000a0d
    e7f0:	432b5441 	.word	0x432b5441
    e7f4:	534d5350 	.word	0x534d5350
    e7f8:	2c2c313d 	.word	0x2c2c313d
    e7fc:	3031302c 	.word	0x3031302c
    e800:	31303030 	.word	0x31303030
    e804:	30312c31 	.word	0x30312c31
    e808:	30303030 	.word	0x30303030
    e80c:	0a0d3030 	.word	0x0a0d3030
    e810:	00000000 	.word	0x00000000
    e814:	432b5441 	.word	0x432b5441
    e818:	534d5350 	.word	0x534d5350
    e81c:	000a0d3f 	.word	0x000a0d3f
    e820:	65747441 	.word	0x65747441
    e824:	2074706d 	.word	0x2074706d
    e828:	66206425 	.word	0x66206425
    e82c:	656c6961 	.word	0x656c6961
    e830:	52202e64 	.word	0x52202e64
    e834:	79727465 	.word	0x79727465
    e838:	0d2e2e2e 	.word	0x0d2e2e2e
    e83c:	0000000a 	.word	0x0000000a
    e840:	6e6e6f43 	.word	0x6e6e6f43
    e844:	20746365 	.word	0x20746365
    e848:	0d214b4f 	.word	0x0d214b4f
    e84c:	0000000a 	.word	0x0000000a
    e850:	432b5441 	.word	0x432b5441
    e854:	3f4b4c43 	.word	0x3f4b4c43
    e858:	00000a0d 	.word	0x00000a0d
    e85c:	4c43432b 	.word	0x4c43432b
    e860:	00003a4b 	.word	0x00003a4b
    e864:	78696e55 	.word	0x78696e55
    e868:	20535420 	.word	0x20535420
    e86c:	6c25203d 	.word	0x6c25203d
    e870:	000a0d64 	.word	0x000a0d64
    e874:	682f2e2e 	.word	0x682f2e2e
    e878:	732f6c61 	.word	0x732f6c61
    e87c:	682f6372 	.word	0x682f6372
    e880:	615f6c61 	.word	0x615f6c61
    e884:	615f6364 	.word	0x615f6364
    e888:	636e7973 	.word	0x636e7973
    e88c:	0000632e 	.word	0x0000632e
    e890:	682f2e2e 	.word	0x682f2e2e
    e894:	732f6c61 	.word	0x732f6c61
    e898:	682f6372 	.word	0x682f6372
    e89c:	635f6c61 	.word	0x635f6c61
    e8a0:	6e656c61 	.word	0x6e656c61
    e8a4:	2e726164 	.word	0x2e726164
    e8a8:	00000063 	.word	0x00000063
    e8ac:	682f2e2e 	.word	0x682f2e2e
    e8b0:	732f6c61 	.word	0x732f6c61
    e8b4:	682f6372 	.word	0x682f6372
    e8b8:	695f6c61 	.word	0x695f6c61
    e8bc:	6d5f6332 	.word	0x6d5f6332
    e8c0:	6e79735f 	.word	0x6e79735f
    e8c4:	00632e63 	.word	0x00632e63
    e8c8:	682f2e2e 	.word	0x682f2e2e
    e8cc:	732f6c61 	.word	0x732f6c61
    e8d0:	682f6372 	.word	0x682f6372
    e8d4:	695f6c61 	.word	0x695f6c61
    e8d8:	00632e6f 	.word	0x00632e6f
    e8dc:	682f2e2e 	.word	0x682f2e2e
    e8e0:	732f6c61 	.word	0x732f6c61
    e8e4:	682f6372 	.word	0x682f6372
    e8e8:	735f6c61 	.word	0x735f6c61
    e8ec:	6d5f6970 	.word	0x6d5f6970
    e8f0:	6e79735f 	.word	0x6e79735f
    e8f4:	00632e63 	.word	0x00632e63
    e8f8:	682f2e2e 	.word	0x682f2e2e
    e8fc:	732f6c61 	.word	0x732f6c61
    e900:	682f6372 	.word	0x682f6372
    e904:	745f6c61 	.word	0x745f6c61
    e908:	72656d69 	.word	0x72656d69
    e90c:	0000632e 	.word	0x0000632e
    e910:	682f2e2e 	.word	0x682f2e2e
    e914:	732f6c61 	.word	0x732f6c61
    e918:	682f6372 	.word	0x682f6372
    e91c:	755f6c61 	.word	0x755f6c61
    e920:	74726173 	.word	0x74726173
    e924:	7973615f 	.word	0x7973615f
    e928:	632e636e 	.word	0x632e636e
    e92c:	00000000 	.word	0x00000000
    e930:	682f2e2e 	.word	0x682f2e2e
    e934:	752f6c61 	.word	0x752f6c61
    e938:	736c6974 	.word	0x736c6974
    e93c:	6372732f 	.word	0x6372732f
    e940:	6974752f 	.word	0x6974752f
    e944:	6c5f736c 	.word	0x6c5f736c
    e948:	2e747369 	.word	0x2e747369
    e94c:	00000063 	.word	0x00000063
    e950:	682f2e2e 	.word	0x682f2e2e
    e954:	752f6c61 	.word	0x752f6c61
    e958:	736c6974 	.word	0x736c6974
    e95c:	6372732f 	.word	0x6372732f
    e960:	6974752f 	.word	0x6974752f
    e964:	725f736c 	.word	0x725f736c
    e968:	62676e69 	.word	0x62676e69
    e96c:	65666675 	.word	0x65666675
    e970:	00632e72 	.word	0x00632e72

0000e974 <_adcs>:
    e974:	05000000 18120000 00000030 00000000     ........0.......
	...
    e990:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    e9a0:	632e6364 00000000 682f2e2e 722f6c70     dc.c....../hpl/r
    e9b0:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....

0000e9c0 <_i2cms>:
    e9c0:	00000002 00200014 00000100 00000049     ...... .....I...
    e9d0:	00d70000 00f42400 00000005 00200014     .....$........ .
    e9e0:	00000100 00000049 00d70000 00f42400     ....I........$..

0000e9f0 <_usarts>:
    e9f0:	00000003 40100004 00030000 0000e282     .......@........
    ea00:	00000000 00000004 40100004 00030000     ...........@....
    ea10:	0000fd8a 00000000 682f2e2e 732f6c70     ........../hpl/s
    ea20:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    ea30:	0000632e                                .c..

0000ea34 <_tcs>:
    ea34:	00001100 00000308 00000000 000007d0     ................
    ea44:	00000000 682f2e2e 742f6c70 70682f63     ....../hpl/tc/hp
    ea54:	63745f6c 0000632e 00002000              l_tc.c... ..

0000ea60 <_usb_ep_cfgs>:
    ea60:	200006a4 00000000 00000040 20000664     ... ....@...d.. 
    ea70:	00000000 00000040 20000624 00000000     ....@...$.. ....
    ea80:	00000040 43544853 3e2d2033 3d205409     @...SHTC3 ->.T =
    ea90:	2e642520 43206425 3d204809 2e642520      %d.%d C.H = %d.
    eaa0:	25206425 00000a0d 32504d42 2d203038     %d %....BMP280 -
    eab0:	2054093e 6425203d 2064252e 20500943     >.T = %d.%d C.P 
    eac0:	6425203d 2064252e 7261426d 00000a0d     = %d.%d mBar....
    ead0:	37314842 56463035 3e2d2049 3d204c09     BH1750FVI ->.L =
    eae0:	646c2520 78756c20 0a0d0a0d 00000000      %ld lux........
    eaf0:	252c6425 64252c64 00000a0d 6e616c53     %d,%d,%d....Slan
    eb00:	7020656a 7461646f 2e616b61 0a0d2e2e     je podataka.....
    eb10:	00000000 2e393931 2e373432 312e3731     ....199.247.17.1
    eb20:	00000035 6f67644f 20726f76 76726573     5...Odgovor serv
    eb30:	20617265 25203e2d 000a0d73 202d2d2d     era -> %s...--- 
    eb40:	2d4e5446 20504956 492d424e 2d20546f     FTN-VIP NB-IoT -
    eb50:	0a0d2d2d 00000000 6564227b 65636976     --......{"device
    eb60:	7b203a22 6c617622 3a226575 7d642520     ": {"value": %d}
    eb70:	756c222c 203a226d 6176227b 2265756c     ,"lum": {"value"
    eb80:	6c25203a 007d7d64 0000ca80 0000c768     : %ld}}.....h...
    eb90:	0000ca80 0000c79a 0000ca80 0000c6be     ................
    eba0:	0000ca80 0000ca80 0000ca80 0000c6d2     ................
    ebb0:	0000ca80 0000c7ce 752f2e2e 642f6273     ........../usb/d
    ebc0:	63697665 73752f65 2e636462 00000063     evice/usbdc.c...
    ebd0:	0000d188 0000d158 0000d16a 0000d0ac     ....X...j.......
    ebe0:	0000d16a 0000d14e 0000d16a 0000d0ac     j...N...j.......
    ebf0:	0000d158 0000d158 0000d14e 0000d0ac     X...X...N.......
    ec00:	0000d0b4 0000d0b4 0000d0b4 0000d170     ............p...
    ec10:	0000d158 0000d158 0000d12c 0000d210     X...X...,.......
    ec20:	0000d12c 0000d14e 0000d12c 0000d210     ,...N...,.......
    ec30:	0000d158 0000d158 0000d14e 0000d210     X...X...N.......
    ec40:	0000d0b4 0000d0b4 0000d0b4 0000d21a     ................
    ec50:	0000d3b8 0000d308 0000d308 0000d306     ................
    ec60:	0000d3aa 0000d3aa 0000d3a0 0000d306     ................
    ec70:	0000d3aa 0000d3a0 0000d3aa 0000d306     ................
    ec80:	0000d3b0 0000d3b0 0000d3b0 0000d440     ............@...

0000ec90 <__sf_fake_stderr>:
	...

0000ecb0 <__sf_fake_stdin>:
	...

0000ecd0 <__sf_fake_stdout>:
	...
    ecf0:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    ed00:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    ed10:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    ed20:	37363534 62613938 66656463 20200000              456789abcdef.

0000ed2d <_ctype_>:
    ed2d:	20202000 20202020 28282020 20282828     .         ((((( 
    ed3d:	20202020 20202020 20202020 20202020                     
    ed4d:	10108820 10101010 10101010 10101010      ...............
    ed5d:	04040410 04040404 10040404 10101010     ................
    ed6d:	41411010 41414141 01010101 01010101     ..AAAAAA........
    ed7d:	01010101 01010101 01010101 10101010     ................
    ed8d:	42421010 42424242 02020202 02020202     ..BBBBBB........
    ed9d:	02020202 02020202 02020202 10101010     ................
    edad:	00000020 00000000 00000000 00000000      ...............
	...

0000ee30 <_init>:
    ee30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee32:	46c0      	nop			; (mov r8, r8)
    ee34:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ee36:	bc08      	pop	{r3}
    ee38:	469e      	mov	lr, r3
    ee3a:	4770      	bx	lr

0000ee3c <__init_array_start>:
    ee3c:	000060dd 	.word	0x000060dd

0000ee40 <_fini>:
    ee40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee42:	46c0      	nop			; (mov r8, r8)
    ee44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ee46:	bc08      	pop	{r3}
    ee48:	469e      	mov	lr, r3
    ee4a:	4770      	bx	lr

0000ee4c <__fini_array_start>:
    ee4c:	000060b5 	.word	0x000060b5
